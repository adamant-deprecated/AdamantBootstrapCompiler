//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreprocessorLineParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Compiler.Antlr {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="PreprocessorLineParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public interface IPreprocessorLineParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.preprocessorLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorLine([NotNull] PreprocessorLineParser.PreprocessorLineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDirective([NotNull] PreprocessorLineParser.DirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.define"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefine([NotNull] PreprocessorLineParser.DefineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.undefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUndefine([NotNull] PreprocessorLineParser.UndefineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.conditionalSymbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditionalSymbol([NotNull] PreprocessorLineParser.ConditionalSymbolContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.ifDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfDecl([NotNull] PreprocessorLineParser.IfDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.elseif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseif([NotNull] PreprocessorLineParser.ElseifContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.elseDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseDecl([NotNull] PreprocessorLineParser.ElseDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.endif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEndif([NotNull] PreprocessorLineParser.EndifContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNot([NotNull] PreprocessorLineParser.NotContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] PreprocessorLineParser.VariableContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOr([NotNull] PreprocessorLineParser.OrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnd([NotNull] PreprocessorLineParser.AndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BooleanValue</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanValue([NotNull] PreprocessorLineParser.BooleanValueContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Grouping</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGrouping([NotNull] PreprocessorLineParser.GroupingContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEquality([NotNull] PreprocessorLineParser.EqualityContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLine([NotNull] PreprocessorLineParser.LineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.error"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitError([NotNull] PreprocessorLineParser.ErrorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorLineParser.warning"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWarning([NotNull] PreprocessorLineParser.WarningContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RegionBegin</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.region"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegionBegin([NotNull] PreprocessorLineParser.RegionBeginContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RegionEnd</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.region"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegionEnd([NotNull] PreprocessorLineParser.RegionEndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PragmaWarning</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.pragma"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPragmaWarning([NotNull] PreprocessorLineParser.PragmaWarningContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PragmaUnknown</c>
	/// labeled alternative in <see cref="PreprocessorLineParser.pragma"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPragmaUnknown([NotNull] PreprocessorLineParser.PragmaUnknownContext context);
}
} // namespace Adamant.Compiler.Antlr
