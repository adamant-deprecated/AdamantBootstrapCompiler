//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AdamantParser : Parser {
	public const int
		SingleLineDocComment=1, BlockDocComment=2, SingleLineComment=3, BlockComment=4, 
		PreprocessorLine=5, Whitespace=6, Newline=7, PreprocessorSkippedSection=8, 
		Using=9, Namespace=10, Class=11, Enum=12, New=13, Delete=14, Operator=15, 
		This=16, Return=17, Uninitialized=18, Where=19, Var=20, Let=21, Get=22, 
		Set=23, Do=24, While=25, If=26, Else=27, Abstract=28, Params=29, For=30, 
		Foreach=31, In=32, Ref=33, Base=34, Const=35, Sealed=36, Override=37, 
		Partial=38, Yield=39, Switch=40, Break=41, Continue=42, Try=43, Catch=44, 
		Finally=45, Throw=46, Implicit=47, Explicit=48, Conversion=49, Public=50, 
		Private=51, Protected=52, Package=53, Safe=54, Unsafe=55, Own=56, Mutable=57, 
		BooleanLiteral=58, IntLiteral=59, NullLiteral=60, StringLiteral=61, Semicolon=62, 
		Colon=63, Dot=64, Comma=65, Arrow=66, Lambda=67, LeftBrace=68, RightBrace=69, 
		LeftAngle=70, RightAngle=71, LeftBracket=72, RightBracket=73, LeftParen=74, 
		RightParen=75, Asterisk=76, AtSign=77, AddressOf=78, Coalesce=79, IsNull=80, 
		Equal=81, NotEqual=82, LessThanOrEqual=83, GreaterThanOrEqual=84, TypeList=85, 
		Plus=86, Minus=87, Divide=88, And=89, Xor=90, Or=91, Not=92, Increment=93, 
		Decrement=94, Assign=95, AddAssign=96, SubtractAssign=97, MultiplyAssign=98, 
		DivideAssign=99, LeftShiftAssign=100, RightShiftAssign=101, AndAssign=102, 
		XorAssign=103, OrAssign=104, Identifier=105, EscapedIdentifier=106, Unknown=107;
	public const int
		RULE_compilationUnit = 0, RULE_usingStatement = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_attribute = 5, RULE_baseTypes = 6, 
		RULE_modifier = 7, RULE_typeParameterList = 8, RULE_typeParameter = 9, 
		RULE_typeName = 10, RULE_typeArguments = 11, RULE_type = 12, RULE_funcTypeParameterList = 13, 
		RULE_funcTypeParameter = 14, RULE_constExpression = 15, RULE_typeParameterConstraintClause = 16, 
		RULE_typeParameterConstraint = 17, RULE_member = 18, RULE_parameterList = 19, 
		RULE_parameter = 20, RULE_parameterModifier = 21, RULE_constructorInitializer = 22, 
		RULE_argumentList = 23, RULE_methodBody = 24, RULE_overloadableOperator = 25, 
		RULE_statement = 26, RULE_variableDeclaration = 27, RULE_letDeclaration = 28, 
		RULE_expression = 29;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingStatement", "identifier", "namespaceName", "declaration", 
		"attribute", "baseTypes", "modifier", "typeParameterList", "typeParameter", 
		"typeName", "typeArguments", "type", "funcTypeParameterList", "funcTypeParameter", 
		"constExpression", "typeParameterConstraintClause", "typeParameterConstraint", 
		"member", "parameterList", "parameter", "parameterModifier", "constructorInitializer", 
		"argumentList", "methodBody", "overloadableOperator", "statement", "variableDeclaration", 
		"letDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'operator'", "'this'", "'return'", 
		"'uninitialized'", "'where'", "'var'", "'let'", "'get'", "'set'", "'do'", 
		"'while'", "'if'", "'else'", "'abstract'", "'params'", "'for'", "'foreach'", 
		"'in'", "'ref'", "'base'", "'const'", "'sealed'", "'override'", "'partial'", 
		"'yeild'", "'switch'", "'break'", "'continue'", "'try'", "'catch'", "'finally'", 
		"'throw'", "'implicit'", "'explicit'", "'conversion'", "'public'", "'private'", 
		"'protected'", "'package'", "'safe'", "'unsafe'", "'own'", "'mut'", null, 
		null, "'null'", null, "';'", "':'", "'.'", "','", "'->'", "'=>'", "'{'", 
		"'}'", "'<'", "'>'", "'['", "']'", "'('", "')'", "'*'", "'@'", "'&'", 
		"'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", "'...'", "'+'", "'-'", 
		"'/'", "'and'", "'xor'", "'or'", "'not'", "'++'", "'--'", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'<<='", "'>>='", "'and='", "'xor='", "'or='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "BlockDocComment", "SingleLineComment", 
		"BlockComment", "PreprocessorLine", "Whitespace", "Newline", "PreprocessorSkippedSection", 
		"Using", "Namespace", "Class", "Enum", "New", "Delete", "Operator", "This", 
		"Return", "Uninitialized", "Where", "Var", "Let", "Get", "Set", "Do", 
		"While", "If", "Else", "Abstract", "Params", "For", "Foreach", "In", "Ref", 
		"Base", "Const", "Sealed", "Override", "Partial", "Yield", "Switch", "Break", 
		"Continue", "Try", "Catch", "Finally", "Throw", "Implicit", "Explicit", 
		"Conversion", "Public", "Private", "Protected", "Package", "Safe", "Unsafe", 
		"Own", "Mutable", "BooleanLiteral", "IntLiteral", "NullLiteral", "StringLiteral", 
		"Semicolon", "Colon", "Dot", "Comma", "Arrow", "Lambda", "LeftBrace", 
		"RightBrace", "LeftAngle", "RightAngle", "LeftBracket", "RightBracket", 
		"LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", "Coalesce", 
		"IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "And", "Xor", "Or", "Not", "Increment", 
		"Decrement", "Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", 
		"DivideAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Identifier", "EscapedIdentifier", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AdamantParser.Eof, 0); }
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 60; usingStatement();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
				{
				{
				State = 66; declaration();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 72; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStatementContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingStatementContext usingStatement() {
		UsingStatementContext _localctx = new UsingStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(Using);
			State = 75; namespaceName();
			State = 76; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(AdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.La(1);
			if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; identifier();
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 81; Match(Dot);
				State = 82; identifier();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			State = 164;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; Match(Namespace);
				State = 89; namespaceName();
				State = 90; Match(LeftBrace);
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 91; usingStatement();
					}
					}
					State = 96;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 97; declaration();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 103; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 105; attribute();
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 111; modifier();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 117; Match(Class);
				State = 118; ((ClassDeclarationContext)_localctx).name = identifier();
				State = 120;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 119; typeParameterList();
					}
				}

				State = 123;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 122; baseTypes();
					}
				}

				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 125; typeParameterConstraintClause();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 131; Match(LeftBrace);
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 132; member();
					}
					}
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 138; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new GlobalDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 140; attribute();
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 146; modifier();
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 152;
				((GlobalDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((GlobalDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 153; ((GlobalDeclarationContext)_localctx).name = identifier();
				State = 156;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 154; Match(Colon);
					State = 155; type(0);
					}
				}

				State = 160;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 158; Match(Assign);
					State = 159; expression(0);
					}
				}

				State = 162; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(EscapedIdentifier);
			State = 169;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 167; Match(LeftParen);
				State = 168; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public TypeNameContext baseType;
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _interfaces = new List<TypeNameContext>();
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 171; Match(Colon);
			State = 173;
			_la = TokenStream.La(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
				{
				State = 172; _localctx.baseType = typeName();
				}
			}

			State = 184;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 175; Match(Colon);
				State = 176; _localctx._typeName = typeName();
				_localctx._interfaces.Add(_localctx._typeName);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 177; Match(Comma);
					State = 178; _localctx._typeName = typeName();
					_localctx._interfaces.Add(_localctx._typeName);
					}
					}
					State = 183;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken Symbol;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_modifier);
		try {
			State = 199;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; _localctx.Symbol = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; _localctx.Symbol = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188; _localctx.Symbol = Match(Protected);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 4);
				{
				State = 189; _localctx.Symbol = Match(Package);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 190; _localctx.Symbol = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 191; _localctx.Symbol = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 192; _localctx.Symbol = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 193; _localctx.Symbol = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 194; _localctx.Symbol = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 195; _localctx.Symbol = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 196; _localctx.Symbol = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 197; _localctx.Symbol = Match(Override);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 13);
				{
				State = 198; _localctx.Symbol = Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(LeftAngle);
			State = 202; typeParameter();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 203; Match(Comma);
				State = 204; typeParameter();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 210; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; identifier();
			State = 214;
			_la = TokenStream.La(1);
			if (_la==TypeList) {
				{
				State = 213; Match(TypeList);
				}
			}

			State = 218;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 216; Match(Colon);
				State = 217; typeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; identifier();
			State = 222;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 221; typeArguments();
				}
				break;
			}
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 224; Match(Dot);
					State = 225; identifier();
					State = 227;
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 226; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(LeftAngle);
			State = 235; type(0);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 236; Match(Comma);
				State = 237; type(0);
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 243; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ConstExpressionContext[] constExpression() {
			return GetRuleContexts<ConstExpressionContext>();
		}
		public ConstExpressionContext constExpression(int i) {
			return GetRuleContext<ConstExpressionContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			switch (TokenStream.La(1)) {
			case Mutable:
				{
				State = 246; Match(Mutable);
				State = 247; type(4);
				}
				break;
			case Own:
				{
				State = 248; Match(Own);
				State = 249; type(3);
				}
				break;
			case Ref:
				{
				State = 250; Match(Ref);
				State = 251; type(2);
				}
				break;
			case LeftParen:
				{
				State = 252; funcTypeParameterList();
				State = 253; Match(Lambda);
				State = 254; type(1);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				{
				State = 256; typeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 275;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 273;
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 259;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 260; Match(Asterisk);
						}
						break;
					case 2:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 261;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 262; Match(LeftBracket);
						State = 263; constExpression();
						State = 268;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 264; Match(Comma);
							State = 265; constExpression();
							}
							}
							State = 270;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 271; Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 277;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 26, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 291;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278; Match(LeftParen);
				State = 279; funcTypeParameter();
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 280; Match(Comma);
					State = 281; funcTypeParameter();
					}
					}
					State = 286;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 287; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; Match(LeftParen);
				State = 290; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_funcTypeParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 293; parameterModifier();
					}
					} 
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 299; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_constExpression);
		try {
			State = 304;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; Match(StringLiteral);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 303; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 322;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; Match(Where);
				State = 307; typeParameter();
				State = 308; Match(Colon);
				State = 309; typeParameterConstraint();
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 310; Match(Comma);
					State = 311; typeParameterConstraint();
					}
					}
					State = 316;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317; Match(Where);
				State = 318; typeParameter();
				State = 319;
				_la = TokenStream.La(1);
				if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (LeftAngle - 70)) | (1L << (RightAngle - 70)) | (1L << (LessThanOrEqual - 70)) | (1L << (GreaterThanOrEqual - 70)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 320; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameterConstraint);
		try {
			State = 329;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; Match(New);
				State = 325; Match(LeftParen);
				State = 326; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 327; typeName();
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 328; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public IToken mutable;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadMethodContext : MemberContext {
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OperatorOverloadMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverloadMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverloadMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverloadMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public PropertyContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 36, RULE_member);
		int _la;
		try {
			int _alt;
			State = 497;
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 331; attribute();
					}
					}
					State = 336;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 337; modifier();
					}
					}
					State = 342;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 343; Match(New);
				State = 345;
				_la = TokenStream.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
					{
					State = 344; identifier();
					}
				}

				State = 347; parameterList();
				State = 349;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 348; constructorInitializer();
					}
				}

				State = 351; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 353; attribute();
					}
					}
					State = 358;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 359; modifier();
					}
					}
					State = 364;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 365; Match(Delete);
				State = 366; parameterList();
				State = 367; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 369; attribute();
					}
					}
					State = 374;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 375; modifier();
					}
					}
					State = 380;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 381; Match(Conversion);
				State = 383;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 382; typeArguments();
					}
				}

				State = 385; parameterList();
				State = 386; Match(Lambda);
				State = 387; type(0);
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 388; typeParameterConstraintClause();
					}
					}
					State = 393;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 394; methodBody();
				}
				break;
			case 4:
				_localctx = new OperatorOverloadMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 396; attribute();
					}
					}
					State = 401;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 402; modifier();
					}
					}
					State = 407;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 408; Match(Operator);
				State = 409; overloadableOperator();
				State = 410; parameterList();
				State = 411; Match(Lambda);
				State = 412; type(0);
				State = 413; methodBody();
				}
				break;
			case 5:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 415; attribute();
					}
					}
					State = 420;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 421; modifier();
					}
					}
					State = 426;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 427;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 429;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 428; ((FieldContext)_localctx).mutable = Match(Mutable);
					}
				}

				State = 431; identifier();
				State = 434;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 432; Match(Colon);
					State = 433; type(0);
					}
				}

				State = 438;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 436; Match(Assign);
					State = 437; expression(0);
					}
				}

				State = 440; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new PropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 442; attribute();
					}
					}
					State = 447;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 448; modifier();
					}
					}
					State = 453;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 454;
				((PropertyContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((PropertyContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 455; identifier();
				State = 457;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 456; typeArguments();
					}
				}

				State = 459; parameterList();
				State = 460; Match(Lambda);
				State = 461; type(0);
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 462; typeParameterConstraintClause();
					}
					}
					State = 467;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 468; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 470; attribute();
						}
						} 
					}
					State = 475;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 476; modifier();
					}
					}
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 482; identifier();
				State = 484;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 483; typeArguments();
					}
				}

				State = 486; parameterList();
				State = 487; Match(Lambda);
				State = 488; type(0);
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 489; typeParameterConstraintClause();
					}
					}
					State = 494;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 495; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameterList);
		int _la;
		try {
			State = 512;
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 499; Match(LeftParen);
				State = 500; parameter();
				State = 505;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 501; Match(Comma);
					State = 502; parameter();
					}
					}
					State = 507;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 508; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; Match(LeftParen);
				State = 511; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameter);
		int _la;
		try {
			State = 532;
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) {
					{
					{
					State = 514; parameterModifier();
					}
					}
					State = 519;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 521;
				_la = TokenStream.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
					{
					State = 520; identifier();
					}
				}

				State = 523; Match(Colon);
				State = 524; type(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) {
					{
					{
					State = 525; parameterModifier();
					}
					}
					State = 530;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 531; Match(This);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameterModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 44, RULE_constructorInitializer);
		try {
			State = 548;
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 536; Match(Colon);
				State = 537; Match(Base);
				State = 538; Match(LeftParen);
				State = 539; argumentList();
				State = 540; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542; Match(Colon);
				State = 543; Match(This);
				State = 544; Match(LeftParen);
				State = 545; argumentList();
				State = 546; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentList);
		int _la;
		try {
			State = 559;
			switch (TokenStream.La(1)) {
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 550; expression(0);
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 551; Match(Comma);
					State = 552; expression(0);
					}
					}
					State = 557;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodBody);
		int _la;
		try {
			State = 570;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561; Match(LeftBrace);
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LeftBrace - 68)) | (1L << (Asterisk - 68)) | (1L << (AddressOf - 68)) | (1L << (Plus - 68)) | (1L << (Minus - 68)) | (1L << (Not - 68)) | (1L << (Increment - 68)) | (1L << (Decrement - 68)) | (1L << (Identifier - 68)) | (1L << (EscapedIdentifier - 68)))) != 0)) {
					{
					{
					State = 562; statement();
					}
					}
					State = 567;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 568; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 569; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_overloadableOperator);
		try {
			State = 582;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 574; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 575; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 576; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 577; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 578; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 579; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 580; Match(LeftBracket);
				State = 581; Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetDeclarationStatementContext : StatementContext {
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public LetDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_statement);
		int _la;
		try {
			State = 659;
			switch (TokenStream.La(1)) {
			case Var:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 584; variableDeclaration();
				State = 585; Match(Semicolon);
				}
				break;
			case Let:
				_localctx = new LetDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 587; letDeclaration();
				State = 588; Match(Semicolon);
				}
				break;
			case Unsafe:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 590; Match(Unsafe);
				State = 591; Match(LeftBrace);
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LeftBrace - 68)) | (1L << (Asterisk - 68)) | (1L << (AddressOf - 68)) | (1L << (Plus - 68)) | (1L << (Minus - 68)) | (1L << (Not - 68)) | (1L << (Increment - 68)) | (1L << (Decrement - 68)) | (1L << (Identifier - 68)) | (1L << (EscapedIdentifier - 68)))) != 0)) {
					{
					{
					State = 592; statement();
					}
					}
					State = 597;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 598; Match(RightBrace);
				}
				break;
			case LeftBrace:
				_localctx = new BlockContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 599; Match(LeftBrace);
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LeftBrace - 68)) | (1L << (Asterisk - 68)) | (1L << (AddressOf - 68)) | (1L << (Plus - 68)) | (1L << (Minus - 68)) | (1L << (Not - 68)) | (1L << (Increment - 68)) | (1L << (Decrement - 68)) | (1L << (Identifier - 68)) | (1L << (EscapedIdentifier - 68)))) != 0)) {
					{
					{
					State = 600; statement();
					}
					}
					State = 605;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 606; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 607; Match(Semicolon);
				}
				break;
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 608; expression(0);
				State = 609; Match(Semicolon);
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 611; Match(Return);
				State = 612; expression(0);
				State = 613; Match(Semicolon);
				}
				break;
			case Throw:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 615; Match(Throw);
				State = 616; expression(0);
				State = 617; Match(Semicolon);
				}
				break;
			case If:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 619; Match(If);
				State = 620; Match(LeftParen);
				State = 621; expression(0);
				State = 622; Match(RightParen);
				State = 623; statement();
				State = 626;
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 624; Match(Else);
					State = 625; statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 628; Match(For);
				State = 629; Match(LeftParen);
				State = 632;
				switch (TokenStream.La(1)) {
				case Var:
					{
					State = 630; variableDeclaration();
					}
					break;
				case Let:
					{
					State = 631; letDeclaration();
					}
					break;
				case Semicolon:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 634; Match(Semicolon);
				State = 636;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Asterisk - 76)) | (1L << (AddressOf - 76)) | (1L << (Plus - 76)) | (1L << (Minus - 76)) | (1L << (Not - 76)) | (1L << (Increment - 76)) | (1L << (Decrement - 76)) | (1L << (Identifier - 76)) | (1L << (EscapedIdentifier - 76)))) != 0)) {
					{
					State = 635; expression(0);
					}
				}

				State = 638; Match(Semicolon);
				State = 640;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Asterisk - 76)) | (1L << (AddressOf - 76)) | (1L << (Plus - 76)) | (1L << (Minus - 76)) | (1L << (Not - 76)) | (1L << (Increment - 76)) | (1L << (Decrement - 76)) | (1L << (Identifier - 76)) | (1L << (EscapedIdentifier - 76)))) != 0)) {
					{
					State = 639; expression(0);
					}
				}

				State = 642; Match(RightParen);
				State = 643; statement();
				}
				break;
			case Foreach:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 644; Match(Foreach);
				State = 645; Match(LeftParen);
				State = 648;
				switch (TokenStream.La(1)) {
				case Var:
					{
					State = 646; variableDeclaration();
					}
					break;
				case Let:
					{
					State = 647; letDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 650; Match(In);
				State = 651; expression(0);
				State = 652; Match(RightParen);
				State = 653; statement();
				}
				break;
			case Delete:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 655; Match(Delete);
				State = 656; expression(0);
				State = 657; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661; Match(Var);
			State = 662; identifier();
			State = 665;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 663; Match(Colon);
				State = 664; type(0);
				}
			}

			State = 669;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 667; Match(Assign);
				State = 668; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public LetDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetDeclarationContext letDeclaration() {
		LetDeclarationContext _localctx = new LetDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_letDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671; Match(Let);
			State = 672; identifier();
			State = 675;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 673; Match(Colon);
				State = 674; type(0);
				}
			}

			State = 677; Match(Assign);
			State = 678; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(AdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public IToken s70;
		public IList<IToken> _ops = new List<IToken>();
		public IToken s71;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 681;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Asterisk - 76)) | (1L << (AddressOf - 76)) | (1L << (Plus - 76)) | (1L << (Minus - 76)) | (1L << (Not - 76)) | (1L << (Increment - 76)) | (1L << (Decrement - 76)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 682; expression(21);
				}
				break;
			case 2:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 683; identifier();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 684; Match(New);
				State = 685; typeName();
				State = 688;
				_la = TokenStream.La(1);
				if (_la==Dot) {
					{
					State = 686; Match(Dot);
					State = 687; identifier();
					}
				}

				State = 690; Match(LeftParen);
				State = 691; argumentList();
				State = 692; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 694; Match(New);
				State = 696;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 695; baseTypes();
					}
				}

				State = 698; Match(LeftParen);
				State = 699; argumentList();
				State = 700; Match(RightParen);
				State = 701; Match(LeftBrace);
				State = 705;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 702; member();
					}
					}
					State = 707;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 708; Match(RightBrace);
				}
				break;
			case 5:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 710; Match(NullLiteral);
				}
				break;
			case 6:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 711; Match(This);
				}
				break;
			case 7:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 712; Match(BooleanLiteral);
				}
				break;
			case 8:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 713; Match(IntLiteral);
				}
				break;
			case 9:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 714; Match(Uninitialized);
				}
				break;
			case 10:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 715; Match(StringLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 779;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 777;
					switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 718;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 719;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 720; expression(21);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 721;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 722;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 723; expression(20);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 724;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 729;
						switch (TokenStream.La(1)) {
						case LeftAngle:
							{
							State = 725; ((ShiftExpressionContext)_localctx).s70 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s70);
							State = 726; ((ShiftExpressionContext)_localctx).s70 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s70);
							}
							break;
						case RightAngle:
							{
							State = 727; ((ShiftExpressionContext)_localctx).s71 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							State = 728; ((ShiftExpressionContext)_localctx).s71 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 731; expression(19);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 732;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 733;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (LeftAngle - 70)) | (1L << (RightAngle - 70)) | (1L << (LessThanOrEqual - 70)) | (1L << (GreaterThanOrEqual - 70)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 734; expression(18);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 735;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 736;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 737; expression(17);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 738;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 739; Match(And);
						State = 740; expression(16);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 741;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 742; Match(Xor);
						State = 743; expression(15);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 744;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 745; Match(Or);
						State = 746; expression(14);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 747;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 748; Match(Coalesce);
						State = 749; expression(13);
						}
						break;
					case 10:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 750;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 751; Match(IsNull);
						State = 752; expression(0);
						State = 753; Match(Colon);
						State = 754; expression(11);
						}
						break;
					case 11:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 756;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 757;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (Assign - 95)) | (1L << (AddAssign - 95)) | (1L << (SubtractAssign - 95)) | (1L << (MultiplyAssign - 95)) | (1L << (DivideAssign - 95)) | (1L << (LeftShiftAssign - 95)) | (1L << (RightShiftAssign - 95)) | (1L << (AndAssign - 95)) | (1L << (XorAssign - 95)) | (1L << (OrAssign - 95)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 758; expression(10);
						}
						break;
					case 12:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 759;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 760; Match(Dot);
						State = 761; identifier();
						}
						break;
					case 13:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 762;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 763; Match(Arrow);
						State = 764; identifier();
						}
						break;
					case 14:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 765;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 766; Match(LeftParen);
						State = 767; argumentList();
						State = 768; Match(RightParen);
						}
						break;
					case 15:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 770;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 771; Match(LeftBracket);
						State = 772; argumentList();
						State = 773; Match(RightBracket);
						}
						break;
					case 16:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 775;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 776; Match(IsNull);
						}
						break;
					}
					} 
				}
				State = 781;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return type_sempred((TypeContext)_localctx, predIndex);
		case 29: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 20);
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 16);
		case 7: return Precpred(Context, 15);
		case 8: return Precpred(Context, 14);
		case 9: return Precpred(Context, 13);
		case 10: return Precpred(Context, 12);
		case 11: return Precpred(Context, 11);
		case 12: return Precpred(Context, 10);
		case 13: return Precpred(Context, 26);
		case 14: return Precpred(Context, 25);
		case 15: return Precpred(Context, 24);
		case 16: return Precpred(Context, 23);
		case 17: return Precpred(Context, 22);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3m\x311\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\a\x2"+
		"@\n\x2\f\x2\xE\x2\x43\v\x2\x3\x2\a\x2\x46\n\x2\f\x2\xE\x2I\v\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5V\n\x5"+
		"\f\x5\xE\x5Y\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6_\n\x6\f\x6\xE\x6\x62\v"+
		"\x6\x3\x6\a\x6\x65\n\x6\f\x6\xE\x6h\v\x6\x3\x6\x3\x6\x3\x6\a\x6m\n\x6"+
		"\f\x6\xE\x6p\v\x6\x3\x6\a\x6s\n\x6\f\x6\xE\x6v\v\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6{\n\x6\x3\x6\x5\x6~\n\x6\x3\x6\a\x6\x81\n\x6\f\x6\xE\x6\x84\v\x6"+
		"\x3\x6\x3\x6\a\x6\x88\n\x6\f\x6\xE\x6\x8B\v\x6\x3\x6\x3\x6\x3\x6\a\x6"+
		"\x90\n\x6\f\x6\xE\x6\x93\v\x6\x3\x6\a\x6\x96\n\x6\f\x6\xE\x6\x99\v\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x9F\n\x6\x3\x6\x3\x6\x5\x6\xA3\n\x6\x3"+
		"\x6\x3\x6\x5\x6\xA7\n\x6\x3\a\x3\a\x3\a\x5\a\xAC\n\a\x3\b\x3\b\x5\b\xB0"+
		"\n\b\x3\b\x3\b\x3\b\x3\b\a\b\xB6\n\b\f\b\xE\b\xB9\v\b\x5\b\xBB\n\b\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xCA"+
		"\n\t\x3\n\x3\n\x3\n\x3\n\a\n\xD0\n\n\f\n\xE\n\xD3\v\n\x3\n\x3\n\x3\v\x3"+
		"\v\x5\v\xD9\n\v\x3\v\x3\v\x5\v\xDD\n\v\x3\f\x3\f\x5\f\xE1\n\f\x3\f\x3"+
		"\f\x3\f\x5\f\xE6\n\f\a\f\xE8\n\f\f\f\xE\f\xEB\v\f\x3\r\x3\r\x3\r\x3\r"+
		"\a\r\xF1\n\r\f\r\xE\r\xF4\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x104\n\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x10D\n\xE\f\xE\xE\xE\x110\v\xE\x3"+
		"\xE\x3\xE\a\xE\x114\n\xE\f\xE\xE\xE\x117\v\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\a\xF\x11D\n\xF\f\xF\xE\xF\x120\v\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x126"+
		"\n\xF\x3\x10\a\x10\x129\n\x10\f\x10\xE\x10\x12C\v\x10\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\x133\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\a\x12\x13B\n\x12\f\x12\xE\x12\x13E\v\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\x145\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\x14C\n\x13\x3\x14\a\x14\x14F\n\x14\f\x14\xE\x14\x152\v\x14\x3\x14"+
		"\a\x14\x155\n\x14\f\x14\xE\x14\x158\v\x14\x3\x14\x3\x14\x5\x14\x15C\n"+
		"\x14\x3\x14\x3\x14\x5\x14\x160\n\x14\x3\x14\x3\x14\x3\x14\a\x14\x165\n"+
		"\x14\f\x14\xE\x14\x168\v\x14\x3\x14\a\x14\x16B\n\x14\f\x14\xE\x14\x16E"+
		"\v\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x175\n\x14\f\x14\xE\x14"+
		"\x178\v\x14\x3\x14\a\x14\x17B\n\x14\f\x14\xE\x14\x17E\v\x14\x3\x14\x3"+
		"\x14\x5\x14\x182\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x188\n\x14\f"+
		"\x14\xE\x14\x18B\v\x14\x3\x14\x3\x14\x3\x14\a\x14\x190\n\x14\f\x14\xE"+
		"\x14\x193\v\x14\x3\x14\a\x14\x196\n\x14\f\x14\xE\x14\x199\v\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x1A3\n\x14\f\x14"+
		"\xE\x14\x1A6\v\x14\x3\x14\a\x14\x1A9\n\x14\f\x14\xE\x14\x1AC\v\x14\x3"+
		"\x14\x3\x14\x5\x14\x1B0\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x1B5\n\x14\x3"+
		"\x14\x3\x14\x5\x14\x1B9\n\x14\x3\x14\x3\x14\x3\x14\a\x14\x1BE\n\x14\f"+
		"\x14\xE\x14\x1C1\v\x14\x3\x14\a\x14\x1C4\n\x14\f\x14\xE\x14\x1C7\v\x14"+
		"\x3\x14\x3\x14\x3\x14\x5\x14\x1CC\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\a"+
		"\x14\x1D2\n\x14\f\x14\xE\x14\x1D5\v\x14\x3\x14\x3\x14\x3\x14\a\x14\x1DA"+
		"\n\x14\f\x14\xE\x14\x1DD\v\x14\x3\x14\a\x14\x1E0\n\x14\f\x14\xE\x14\x1E3"+
		"\v\x14\x3\x14\x3\x14\x5\x14\x1E7\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14"+
		"\x1ED\n\x14\f\x14\xE\x14\x1F0\v\x14\x3\x14\x3\x14\x5\x14\x1F4\n\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\a\x15\x1FA\n\x15\f\x15\xE\x15\x1FD\v\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x5\x15\x203\n\x15\x3\x16\a\x16\x206\n\x16\f"+
		"\x16\xE\x16\x209\v\x16\x3\x16\x5\x16\x20C\n\x16\x3\x16\x3\x16\x3\x16\a"+
		"\x16\x211\n\x16\f\x16\xE\x16\x214\v\x16\x3\x16\x5\x16\x217\n\x16\x3\x17"+
		"\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\x227\n\x18\x3\x19\x3\x19\x3\x19\a\x19\x22C"+
		"\n\x19\f\x19\xE\x19\x22F\v\x19\x3\x19\x5\x19\x232\n\x19\x3\x1A\x3\x1A"+
		"\a\x1A\x236\n\x1A\f\x1A\xE\x1A\x239\v\x1A\x3\x1A\x3\x1A\x5\x1A\x23D\n"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x249\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\a\x1C\x254\n\x1C\f\x1C\xE\x1C\x257\v\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\a\x1C\x25C\n\x1C\f\x1C\xE\x1C\x25F\v\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x275\n\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x27B\n\x1C\x3\x1C\x3\x1C\x5\x1C\x27F"+
		"\n\x1C\x3\x1C\x3\x1C\x5\x1C\x283\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x5\x1C\x28B\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x296\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x29C\n\x1D\x3\x1D\x3\x1D\x5\x1D\x2A0\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x2A6\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2B3\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x5\x1F\x2BB\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\a\x1F\x2C2\n\x1F\f\x1F\xE\x1F\x2C5\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2CF\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2DC\n\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x30C\n\x1F\f\x1F\xE\x1F"+
		"\x30F\v\x1F\x3\x1F\x2\x4\x1A< \x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A"+
		"\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<\x2\f\x4\x2\x33\x33kl\x3\x2\x16"+
		"\x17\x4\x2HIUV\x3\x2\x18\x19\x4\x2\x1F\x1F:;\x6\x2NNPPXY^`\x4\x2NNZZ\x3"+
		"\x2XY\x3\x2ST\x3\x2\x61j\x38F\x2\x41\x3\x2\x2\x2\x4L\x3\x2\x2\x2\x6P\x3"+
		"\x2\x2\x2\bR\x3\x2\x2\x2\n\xA6\x3\x2\x2\x2\f\xA8\x3\x2\x2\x2\xE\xAD\x3"+
		"\x2\x2\x2\x10\xC9\x3\x2\x2\x2\x12\xCB\x3\x2\x2\x2\x14\xD6\x3\x2\x2\x2"+
		"\x16\xDE\x3\x2\x2\x2\x18\xEC\x3\x2\x2\x2\x1A\x103\x3\x2\x2\x2\x1C\x125"+
		"\x3\x2\x2\x2\x1E\x12A\x3\x2\x2\x2 \x132\x3\x2\x2\x2\"\x144\x3\x2\x2\x2"+
		"$\x14B\x3\x2\x2\x2&\x1F3\x3\x2\x2\x2(\x202\x3\x2\x2\x2*\x216\x3\x2\x2"+
		"\x2,\x218\x3\x2\x2\x2.\x226\x3\x2\x2\x2\x30\x231\x3\x2\x2\x2\x32\x23C"+
		"\x3\x2\x2\x2\x34\x248\x3\x2\x2\x2\x36\x295\x3\x2\x2\x2\x38\x297\x3\x2"+
		"\x2\x2:\x2A1\x3\x2\x2\x2<\x2CE\x3\x2\x2\x2>@\x5\x4\x3\x2?>\x3\x2\x2\x2"+
		"@\x43\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42G\x3\x2\x2\x2"+
		"\x43\x41\x3\x2\x2\x2\x44\x46\x5\n\x6\x2\x45\x44\x3\x2\x2\x2\x46I\x3\x2"+
		"\x2\x2G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2HJ\x3\x2\x2\x2IG\x3\x2\x2\x2JK\a"+
		"\x2\x2\x3K\x3\x3\x2\x2\x2LM\a\v\x2\x2MN\x5\b\x5\x2NO\a@\x2\x2O\x5\x3\x2"+
		"\x2\x2PQ\t\x2\x2\x2Q\a\x3\x2\x2\x2RW\x5\x6\x4\x2ST\a\x42\x2\x2TV\x5\x6"+
		"\x4\x2US\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2X\t\x3\x2"+
		"\x2\x2YW\x3\x2\x2\x2Z[\a\f\x2\x2[\\\x5\b\x5\x2\\`\a\x46\x2\x2]_\x5\x4"+
		"\x3\x2^]\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61"+
		"\x66\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x65\x5\n\x6\x2\x64\x63\x3\x2\x2"+
		"\x2\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gi\x3\x2\x2\x2"+
		"h\x66\x3\x2\x2\x2ij\aG\x2\x2j\xA7\x3\x2\x2\x2km\x5\f\a\x2lk\x3\x2\x2\x2"+
		"mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2ot\x3\x2\x2\x2pn\x3\x2\x2\x2"+
		"qs\x5\x10\t\x2rq\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2"+
		"uw\x3\x2\x2\x2vt\x3\x2\x2\x2wx\a\r\x2\x2xz\x5\x6\x4\x2y{\x5\x12\n\x2z"+
		"y\x3\x2\x2\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|~\x5\xE\b\x2}|\x3\x2\x2\x2}"+
		"~\x3\x2\x2\x2~\x82\x3\x2\x2\x2\x7F\x81\x5\"\x12\x2\x80\x7F\x3\x2\x2\x2"+
		"\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3"+
		"\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x89\a\x46\x2\x2\x86\x88\x5&\x14\x2\x87"+
		"\x86\x3\x2\x2\x2\x88\x8B\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2"+
		"\x2\x2\x8A\x8C\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8C\x8D\aG\x2\x2\x8D\xA7"+
		"\x3\x2\x2\x2\x8E\x90\x5\f\a\x2\x8F\x8E\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2"+
		"\x91\x8F\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x97\x3\x2\x2\x2\x93\x91\x3"+
		"\x2\x2\x2\x94\x96\x5\x10\t\x2\x95\x94\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2"+
		"\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x9A\x3\x2\x2\x2\x99\x97\x3"+
		"\x2\x2\x2\x9A\x9B\t\x3\x2\x2\x9B\x9E\x5\x6\x4\x2\x9C\x9D\a\x41\x2\x2\x9D"+
		"\x9F\x5\x1A\xE\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA2\x3\x2"+
		"\x2\x2\xA0\xA1\a\x61\x2\x2\xA1\xA3\x5<\x1F\x2\xA2\xA0\x3\x2\x2\x2\xA2"+
		"\xA3\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\a@\x2\x2\xA5\xA7\x3\x2\x2"+
		"\x2\xA6Z\x3\x2\x2\x2\xA6n\x3\x2\x2\x2\xA6\x91\x3\x2\x2\x2\xA7\v\x3\x2"+
		"\x2\x2\xA8\xAB\al\x2\x2\xA9\xAA\aL\x2\x2\xAA\xAC\aM\x2\x2\xAB\xA9\x3\x2"+
		"\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\r\x3\x2\x2\x2\xAD\xAF\a\x41\x2\x2\xAE\xB0"+
		"\x5\x16\f\x2\xAF\xAE\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xBA\x3\x2\x2"+
		"\x2\xB1\xB2\a\x41\x2\x2\xB2\xB7\x5\x16\f\x2\xB3\xB4\a\x43\x2\x2\xB4\xB6"+
		"\x5\x16\f\x2\xB5\xB3\x3\x2\x2\x2\xB6\xB9\x3\x2\x2\x2\xB7\xB5\x3\x2\x2"+
		"\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xBA\xB1"+
		"\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xF\x3\x2\x2\x2\xBC\xCA\a\x34\x2\x2"+
		"\xBD\xCA\a\x35\x2\x2\xBE\xCA\a\x36\x2\x2\xBF\xCA\a\x37\x2\x2\xC0\xCA\a"+
		"\x38\x2\x2\xC1\xCA\a\x39\x2\x2\xC2\xCA\a\x1E\x2\x2\xC3\xCA\a(\x2\x2\xC4"+
		"\xCA\a\x31\x2\x2\xC5\xCA\a\x32\x2\x2\xC6\xCA\a&\x2\x2\xC7\xCA\a\'\x2\x2"+
		"\xC8\xCA\a%\x2\x2\xC9\xBC\x3\x2\x2\x2\xC9\xBD\x3\x2\x2\x2\xC9\xBE\x3\x2"+
		"\x2\x2\xC9\xBF\x3\x2\x2\x2\xC9\xC0\x3\x2\x2\x2\xC9\xC1\x3\x2\x2\x2\xC9"+
		"\xC2\x3\x2\x2\x2\xC9\xC3\x3\x2\x2\x2\xC9\xC4\x3\x2\x2\x2\xC9\xC5\x3\x2"+
		"\x2\x2\xC9\xC6\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA"+
		"\x11\x3\x2\x2\x2\xCB\xCC\aH\x2\x2\xCC\xD1\x5\x14\v\x2\xCD\xCE\a\x43\x2"+
		"\x2\xCE\xD0\x5\x14\v\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1\xCF"+
		"\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD4\x3\x2\x2\x2\xD3\xD1\x3\x2\x2"+
		"\x2\xD4\xD5\aI\x2\x2\xD5\x13\x3\x2\x2\x2\xD6\xD8\x5\x6\x4\x2\xD7\xD9\a"+
		"W\x2\x2\xD8\xD7\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA"+
		"\xDB\a\x41\x2\x2\xDB\xDD\x5\x16\f\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2"+
		"\x2\x2\xDD\x15\x3\x2\x2\x2\xDE\xE0\x5\x6\x4\x2\xDF\xE1\x5\x18\r\x2\xE0"+
		"\xDF\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE9\x3\x2\x2\x2\xE2\xE3\a\x42"+
		"\x2\x2\xE3\xE5\x5\x6\x4\x2\xE4\xE6\x5\x18\r\x2\xE5\xE4\x3\x2\x2\x2\xE5"+
		"\xE6\x3\x2\x2\x2\xE6\xE8\x3\x2\x2\x2\xE7\xE2\x3\x2\x2\x2\xE8\xEB\x3\x2"+
		"\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\x17\x3\x2\x2\x2\xEB"+
		"\xE9\x3\x2\x2\x2\xEC\xED\aH\x2\x2\xED\xF2\x5\x1A\xE\x2\xEE\xEF\a\x43\x2"+
		"\x2\xEF\xF1\x5\x1A\xE\x2\xF0\xEE\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0"+
		"\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF5\x3\x2\x2\x2\xF4\xF2\x3\x2\x2"+
		"\x2\xF5\xF6\aI\x2\x2\xF6\x19\x3\x2\x2\x2\xF7\xF8\b\xE\x1\x2\xF8\xF9\a"+
		";\x2\x2\xF9\x104\x5\x1A\xE\x6\xFA\xFB\a:\x2\x2\xFB\x104\x5\x1A\xE\x5\xFC"+
		"\xFD\a#\x2\x2\xFD\x104\x5\x1A\xE\x4\xFE\xFF\x5\x1C\xF\x2\xFF\x100\a\x45"+
		"\x2\x2\x100\x101\x5\x1A\xE\x3\x101\x104\x3\x2\x2\x2\x102\x104\x5\x16\f"+
		"\x2\x103\xF7\x3\x2\x2\x2\x103\xFA\x3\x2\x2\x2\x103\xFC\x3\x2\x2\x2\x103"+
		"\xFE\x3\x2\x2\x2\x103\x102\x3\x2\x2\x2\x104\x115\x3\x2\x2\x2\x105\x106"+
		"\f\b\x2\x2\x106\x114\aN\x2\x2\x107\x108\f\a\x2\x2\x108\x109\aJ\x2\x2\x109"+
		"\x10E\x5 \x11\x2\x10A\x10B\a\x43\x2\x2\x10B\x10D\x5 \x11\x2\x10C\x10A"+
		"\x3\x2\x2\x2\x10D\x110\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10F\x3"+
		"\x2\x2\x2\x10F\x111\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x111\x112\aK\x2"+
		"\x2\x112\x114\x3\x2\x2\x2\x113\x105\x3\x2\x2\x2\x113\x107\x3\x2\x2\x2"+
		"\x114\x117\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116"+
		"\x1B\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x118\x119\aL\x2\x2\x119\x11E\x5"+
		"\x1E\x10\x2\x11A\x11B\a\x43\x2\x2\x11B\x11D\x5\x1E\x10\x2\x11C\x11A\x3"+
		"\x2\x2\x2\x11D\x120\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2\x11E\x11F\x3\x2"+
		"\x2\x2\x11F\x121\x3\x2\x2\x2\x120\x11E\x3\x2\x2\x2\x121\x122\aM\x2\x2"+
		"\x122\x126\x3\x2\x2\x2\x123\x124\aL\x2\x2\x124\x126\aM\x2\x2\x125\x118"+
		"\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x126\x1D\x3\x2\x2\x2\x127\x129\x5,"+
		"\x17\x2\x128\x127\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2"+
		"\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2"+
		"\x12D\x12E\x5\x1A\xE\x2\x12E\x1F\x3\x2\x2\x2\x12F\x133\a=\x2\x2\x130\x133"+
		"\a?\x2\x2\x131\x133\x5\x6\x4\x2\x132\x12F\x3\x2\x2\x2\x132\x130\x3\x2"+
		"\x2\x2\x132\x131\x3\x2\x2\x2\x133!\x3\x2\x2\x2\x134\x135\a\x15\x2\x2\x135"+
		"\x136\x5\x14\v\x2\x136\x137\a\x41\x2\x2\x137\x13C\x5$\x13\x2\x138\x139"+
		"\a\x43\x2\x2\x139\x13B\x5$\x13\x2\x13A\x138\x3\x2\x2\x2\x13B\x13E\x3\x2"+
		"\x2\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x145\x3\x2\x2"+
		"\x2\x13E\x13C\x3\x2\x2\x2\x13F\x140\a\x15\x2\x2\x140\x141\x5\x14\v\x2"+
		"\x141\x142\t\x4\x2\x2\x142\x143\a=\x2\x2\x143\x145\x3\x2\x2\x2\x144\x134"+
		"\x3\x2\x2\x2\x144\x13F\x3\x2\x2\x2\x145#\x3\x2\x2\x2\x146\x147\a\xF\x2"+
		"\x2\x147\x148\aL\x2\x2\x148\x14C\aM\x2\x2\x149\x14C\x5\x16\f\x2\x14A\x14C"+
		"\x5\x14\v\x2\x14B\x146\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14B\x14A\x3"+
		"\x2\x2\x2\x14C%\x3\x2\x2\x2\x14D\x14F\x5\f\a\x2\x14E\x14D\x3\x2\x2\x2"+
		"\x14F\x152\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151"+
		"\x156\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x153\x155\x5\x10\t\x2\x154\x153"+
		"\x3\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x156\x157\x3"+
		"\x2\x2\x2\x157\x159\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x159\x15B\a\xF\x2"+
		"\x2\x15A\x15C\x5\x6\x4\x2\x15B\x15A\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2"+
		"\x15C\x15D\x3\x2\x2\x2\x15D\x15F\x5(\x15\x2\x15E\x160\x5.\x18\x2\x15F"+
		"\x15E\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x162"+
		"\x5\x32\x1A\x2\x162\x1F4\x3\x2\x2\x2\x163\x165\x5\f\a\x2\x164\x163\x3"+
		"\x2\x2\x2\x165\x168\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x166\x167\x3\x2"+
		"\x2\x2\x167\x16C\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x169\x16B\x5\x10\t"+
		"\x2\x16A\x169\x3\x2\x2\x2\x16B\x16E\x3\x2\x2\x2\x16C\x16A\x3\x2\x2\x2"+
		"\x16C\x16D\x3\x2\x2\x2\x16D\x16F\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16F"+
		"\x170\a\x10\x2\x2\x170\x171\x5(\x15\x2\x171\x172\x5\x32\x1A\x2\x172\x1F4"+
		"\x3\x2\x2\x2\x173\x175\x5\f\a\x2\x174\x173\x3\x2\x2\x2\x175\x178\x3\x2"+
		"\x2\x2\x176\x174\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177\x17C\x3\x2\x2"+
		"\x2\x178\x176\x3\x2\x2\x2\x179\x17B\x5\x10\t\x2\x17A\x179\x3\x2\x2\x2"+
		"\x17B\x17E\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D"+
		"\x17F\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17F\x181\a\x33\x2\x2\x180\x182"+
		"\x5\x18\r\x2\x181\x180\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\x3"+
		"\x2\x2\x2\x183\x184\x5(\x15\x2\x184\x185\a\x45\x2\x2\x185\x189\x5\x1A"+
		"\xE\x2\x186\x188\x5\"\x12\x2\x187\x186\x3\x2\x2\x2\x188\x18B\x3\x2\x2"+
		"\x2\x189\x187\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x18C\x3\x2\x2\x2"+
		"\x18B\x189\x3\x2\x2\x2\x18C\x18D\x5\x32\x1A\x2\x18D\x1F4\x3\x2\x2\x2\x18E"+
		"\x190\x5\f\a\x2\x18F\x18E\x3\x2\x2\x2\x190\x193\x3\x2\x2\x2\x191\x18F"+
		"\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192\x197\x3\x2\x2\x2\x193\x191\x3"+
		"\x2\x2\x2\x194\x196\x5\x10\t\x2\x195\x194\x3\x2\x2\x2\x196\x199\x3\x2"+
		"\x2\x2\x197\x195\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x19A\x3\x2\x2"+
		"\x2\x199\x197\x3\x2\x2\x2\x19A\x19B\a\x11\x2\x2\x19B\x19C\x5\x34\x1B\x2"+
		"\x19C\x19D\x5(\x15\x2\x19D\x19E\a\x45\x2\x2\x19E\x19F\x5\x1A\xE\x2\x19F"+
		"\x1A0\x5\x32\x1A\x2\x1A0\x1F4\x3\x2\x2\x2\x1A1\x1A3\x5\f\a\x2\x1A2\x1A1"+
		"\x3\x2\x2\x2\x1A3\x1A6\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A5\x3"+
		"\x2\x2\x2\x1A5\x1AA\x3\x2\x2\x2\x1A6\x1A4\x3\x2\x2\x2\x1A7\x1A9\x5\x10"+
		"\t\x2\x1A8\x1A7\x3\x2\x2\x2\x1A9\x1AC\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2"+
		"\x1AA\x1AB\x3\x2\x2\x2\x1AB\x1AD\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AD"+
		"\x1AF\t\x3\x2\x2\x1AE\x1B0\a;\x2\x2\x1AF\x1AE\x3\x2\x2\x2\x1AF\x1B0\x3"+
		"\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B4\x5\x6\x4\x2\x1B2\x1B3\a\x41"+
		"\x2\x2\x1B3\x1B5\x5\x1A\xE\x2\x1B4\x1B2\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2"+
		"\x2\x1B5\x1B8\x3\x2\x2\x2\x1B6\x1B7\a\x61\x2\x2\x1B7\x1B9\x5<\x1F\x2\x1B8"+
		"\x1B6\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BB"+
		"\a@\x2\x2\x1BB\x1F4\x3\x2\x2\x2\x1BC\x1BE\x5\f\a\x2\x1BD\x1BC\x3\x2\x2"+
		"\x2\x1BE\x1C1\x3\x2\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2"+
		"\x1C0\x1C5\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C2\x1C4\x5\x10\t\x2\x1C3"+
		"\x1C2\x3\x2\x2\x2\x1C4\x1C7\x3\x2\x2\x2\x1C5\x1C3\x3\x2\x2\x2\x1C5\x1C6"+
		"\x3\x2\x2\x2\x1C6\x1C8\x3\x2\x2\x2\x1C7\x1C5\x3\x2\x2\x2\x1C8\x1C9\t\x5"+
		"\x2\x2\x1C9\x1CB\x5\x6\x4\x2\x1CA\x1CC\x5\x18\r\x2\x1CB\x1CA\x3\x2\x2"+
		"\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CE\x5(\x15\x2\x1CE"+
		"\x1CF\a\x45\x2\x2\x1CF\x1D3\x5\x1A\xE\x2\x1D0\x1D2\x5\"\x12\x2\x1D1\x1D0"+
		"\x3\x2\x2\x2\x1D2\x1D5\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3"+
		"\x2\x2\x2\x1D4\x1D6\x3\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D6\x1D7\x5\x32"+
		"\x1A\x2\x1D7\x1F4\x3\x2\x2\x2\x1D8\x1DA\x5\f\a\x2\x1D9\x1D8\x3\x2\x2\x2"+
		"\x1DA\x1DD\x3\x2\x2\x2\x1DB\x1D9\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC"+
		"\x1E1\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DE\x1E0\x5\x10\t\x2\x1DF\x1DE"+
		"\x3\x2\x2\x2\x1E0\x1E3\x3\x2\x2\x2\x1E1\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3"+
		"\x2\x2\x2\x1E2\x1E4\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2\x1E4\x1E6\x5\x6"+
		"\x4\x2\x1E5\x1E7\x5\x18\r\x2\x1E6\x1E5\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2"+
		"\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1E9\x5(\x15\x2\x1E9\x1EA\a\x45\x2\x2\x1EA"+
		"\x1EE\x5\x1A\xE\x2\x1EB\x1ED\x5\"\x12\x2\x1EC\x1EB\x3\x2\x2\x2\x1ED\x1F0"+
		"\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1F1\x3"+
		"\x2\x2\x2\x1F0\x1EE\x3\x2\x2\x2\x1F1\x1F2\x5\x32\x1A\x2\x1F2\x1F4\x3\x2"+
		"\x2\x2\x1F3\x150\x3\x2\x2\x2\x1F3\x166\x3\x2\x2\x2\x1F3\x176\x3\x2\x2"+
		"\x2\x1F3\x191\x3\x2\x2\x2\x1F3\x1A4\x3\x2\x2\x2\x1F3\x1BF\x3\x2\x2\x2"+
		"\x1F3\x1DB\x3\x2\x2\x2\x1F4\'\x3\x2\x2\x2\x1F5\x1F6\aL\x2\x2\x1F6\x1FB"+
		"\x5*\x16\x2\x1F7\x1F8\a\x43\x2\x2\x1F8\x1FA\x5*\x16\x2\x1F9\x1F7\x3\x2"+
		"\x2\x2\x1FA\x1FD\x3\x2\x2\x2\x1FB\x1F9\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2"+
		"\x2\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1FB\x3\x2\x2\x2\x1FE\x1FF\aM\x2\x2\x1FF"+
		"\x203\x3\x2\x2\x2\x200\x201\aL\x2\x2\x201\x203\aM\x2\x2\x202\x1F5\x3\x2"+
		"\x2\x2\x202\x200\x3\x2\x2\x2\x203)\x3\x2\x2\x2\x204\x206\x5,\x17\x2\x205"+
		"\x204\x3\x2\x2\x2\x206\x209\x3\x2\x2\x2\x207\x205\x3\x2\x2\x2\x207\x208"+
		"\x3\x2\x2\x2\x208\x20B\x3\x2\x2\x2\x209\x207\x3\x2\x2\x2\x20A\x20C\x5"+
		"\x6\x4\x2\x20B\x20A\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20D\x3\x2"+
		"\x2\x2\x20D\x20E\a\x41\x2\x2\x20E\x217\x5\x1A\xE\x2\x20F\x211\x5,\x17"+
		"\x2\x210\x20F\x3\x2\x2\x2\x211\x214\x3\x2\x2\x2\x212\x210\x3\x2\x2\x2"+
		"\x212\x213\x3\x2\x2\x2\x213\x215\x3\x2\x2\x2\x214\x212\x3\x2\x2\x2\x215"+
		"\x217\a\x12\x2\x2\x216\x207\x3\x2\x2\x2\x216\x212\x3\x2\x2\x2\x217+\x3"+
		"\x2\x2\x2\x218\x219\t\x6\x2\x2\x219-\x3\x2\x2\x2\x21A\x21B\a\x41\x2\x2"+
		"\x21B\x21C\a$\x2\x2\x21C\x21D\aL\x2\x2\x21D\x21E\x5\x30\x19\x2\x21E\x21F"+
		"\aM\x2\x2\x21F\x227\x3\x2\x2\x2\x220\x221\a\x41\x2\x2\x221\x222\a\x12"+
		"\x2\x2\x222\x223\aL\x2\x2\x223\x224\x5\x30\x19\x2\x224\x225\aM\x2\x2\x225"+
		"\x227\x3\x2\x2\x2\x226\x21A\x3\x2\x2\x2\x226\x220\x3\x2\x2\x2\x227/\x3"+
		"\x2\x2\x2\x228\x22D\x5<\x1F\x2\x229\x22A\a\x43\x2\x2\x22A\x22C\x5<\x1F"+
		"\x2\x22B\x229\x3\x2\x2\x2\x22C\x22F\x3\x2\x2\x2\x22D\x22B\x3\x2\x2\x2"+
		"\x22D\x22E\x3\x2\x2\x2\x22E\x232\x3\x2\x2\x2\x22F\x22D\x3\x2\x2\x2\x230"+
		"\x232\x3\x2\x2\x2\x231\x228\x3\x2\x2\x2\x231\x230\x3\x2\x2\x2\x232\x31"+
		"\x3\x2\x2\x2\x233\x237\a\x46\x2\x2\x234\x236\x5\x36\x1C\x2\x235\x234\x3"+
		"\x2\x2\x2\x236\x239\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x237\x238\x3\x2"+
		"\x2\x2\x238\x23A\x3\x2\x2\x2\x239\x237\x3\x2\x2\x2\x23A\x23D\aG\x2\x2"+
		"\x23B\x23D\a@\x2\x2\x23C\x233\x3\x2\x2\x2\x23C\x23B\x3\x2\x2\x2\x23D\x33"+
		"\x3\x2\x2\x2\x23E\x249\aN\x2\x2\x23F\x249\aP\x2\x2\x240\x249\a]\x2\x2"+
		"\x241\x249\a[\x2\x2\x242\x249\a\\\x2\x2\x243\x249\aR\x2\x2\x244\x249\a"+
		"Q\x2\x2\x245\x249\a\x42\x2\x2\x246\x247\aJ\x2\x2\x247\x249\aK\x2\x2\x248"+
		"\x23E\x3\x2\x2\x2\x248\x23F\x3\x2\x2\x2\x248\x240\x3\x2\x2\x2\x248\x241"+
		"\x3\x2\x2\x2\x248\x242\x3\x2\x2\x2\x248\x243\x3\x2\x2\x2\x248\x244\x3"+
		"\x2\x2\x2\x248\x245\x3\x2\x2\x2\x248\x246\x3\x2\x2\x2\x249\x35\x3\x2\x2"+
		"\x2\x24A\x24B\x5\x38\x1D\x2\x24B\x24C\a@\x2\x2\x24C\x296\x3\x2\x2\x2\x24D"+
		"\x24E\x5:\x1E\x2\x24E\x24F\a@\x2\x2\x24F\x296\x3\x2\x2\x2\x250\x251\a"+
		"\x39\x2\x2\x251\x255\a\x46\x2\x2\x252\x254\x5\x36\x1C\x2\x253\x252\x3"+
		"\x2\x2\x2\x254\x257\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2\x255\x256\x3\x2"+
		"\x2\x2\x256\x258\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x258\x296\aG\x2\x2"+
		"\x259\x25D\a\x46\x2\x2\x25A\x25C\x5\x36\x1C\x2\x25B\x25A\x3\x2\x2\x2\x25C"+
		"\x25F\x3\x2\x2\x2\x25D\x25B\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x260"+
		"\x3\x2\x2\x2\x25F\x25D\x3\x2\x2\x2\x260\x296\aG\x2\x2\x261\x296\a@\x2"+
		"\x2\x262\x263\x5<\x1F\x2\x263\x264\a@\x2\x2\x264\x296\x3\x2\x2\x2\x265"+
		"\x266\a\x13\x2\x2\x266\x267\x5<\x1F\x2\x267\x268\a@\x2\x2\x268\x296\x3"+
		"\x2\x2\x2\x269\x26A\a\x30\x2\x2\x26A\x26B\x5<\x1F\x2\x26B\x26C\a@\x2\x2"+
		"\x26C\x296\x3\x2\x2\x2\x26D\x26E\a\x1C\x2\x2\x26E\x26F\aL\x2\x2\x26F\x270"+
		"\x5<\x1F\x2\x270\x271\aM\x2\x2\x271\x274\x5\x36\x1C\x2\x272\x273\a\x1D"+
		"\x2\x2\x273\x275\x5\x36\x1C\x2\x274\x272\x3\x2\x2\x2\x274\x275\x3\x2\x2"+
		"\x2\x275\x296\x3\x2\x2\x2\x276\x277\a \x2\x2\x277\x27A\aL\x2\x2\x278\x27B"+
		"\x5\x38\x1D\x2\x279\x27B\x5:\x1E\x2\x27A\x278\x3\x2\x2\x2\x27A\x279\x3"+
		"\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27C\x3\x2\x2\x2\x27C\x27E\a@\x2"+
		"\x2\x27D\x27F\x5<\x1F\x2\x27E\x27D\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F"+
		"\x280\x3\x2\x2\x2\x280\x282\a@\x2\x2\x281\x283\x5<\x1F\x2\x282\x281\x3"+
		"\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x285\aM\x2"+
		"\x2\x285\x296\x5\x36\x1C\x2\x286\x287\a!\x2\x2\x287\x28A\aL\x2\x2\x288"+
		"\x28B\x5\x38\x1D\x2\x289\x28B\x5:\x1E\x2\x28A\x288\x3\x2\x2\x2\x28A\x289"+
		"\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x28D\a\"\x2\x2\x28D\x28E\x5<\x1F"+
		"\x2\x28E\x28F\aM\x2\x2\x28F\x290\x5\x36\x1C\x2\x290\x296\x3\x2\x2\x2\x291"+
		"\x292\a\x10\x2\x2\x292\x293\x5<\x1F\x2\x293\x294\a@\x2\x2\x294\x296\x3"+
		"\x2\x2\x2\x295\x24A\x3\x2\x2\x2\x295\x24D\x3\x2\x2\x2\x295\x250\x3\x2"+
		"\x2\x2\x295\x259\x3\x2\x2\x2\x295\x261\x3\x2\x2\x2\x295\x262\x3\x2\x2"+
		"\x2\x295\x265\x3\x2\x2\x2\x295\x269\x3\x2\x2\x2\x295\x26D\x3\x2\x2\x2"+
		"\x295\x276\x3\x2\x2\x2\x295\x286\x3\x2\x2\x2\x295\x291\x3\x2\x2\x2\x296"+
		"\x37\x3\x2\x2\x2\x297\x298\a\x16\x2\x2\x298\x29B\x5\x6\x4\x2\x299\x29A"+
		"\a\x41\x2\x2\x29A\x29C\x5\x1A\xE\x2\x29B\x299\x3\x2\x2\x2\x29B\x29C\x3"+
		"\x2\x2\x2\x29C\x29F\x3\x2\x2\x2\x29D\x29E\a\x61\x2\x2\x29E\x2A0\x5<\x1F"+
		"\x2\x29F\x29D\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0\x39\x3\x2\x2\x2\x2A1"+
		"\x2A2\a\x17\x2\x2\x2A2\x2A5\x5\x6\x4\x2\x2A3\x2A4\a\x41\x2\x2\x2A4\x2A6"+
		"\x5\x1A\xE\x2\x2A5\x2A3\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A7\x3"+
		"\x2\x2\x2\x2A7\x2A8\a\x61\x2\x2\x2A8\x2A9\x5<\x1F\x2\x2A9;\x3\x2\x2\x2"+
		"\x2AA\x2AB\b\x1F\x1\x2\x2AB\x2AC\t\a\x2\x2\x2AC\x2CF\x5<\x1F\x17\x2AD"+
		"\x2CF\x5\x6\x4\x2\x2AE\x2AF\a\xF\x2\x2\x2AF\x2B2\x5\x16\f\x2\x2B0\x2B1"+
		"\a\x42\x2\x2\x2B1\x2B3\x5\x6\x4\x2\x2B2\x2B0\x3\x2\x2\x2\x2B2\x2B3\x3"+
		"\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B5\aL\x2\x2\x2B5\x2B6\x5\x30\x19"+
		"\x2\x2B6\x2B7\aM\x2\x2\x2B7\x2CF\x3\x2\x2\x2\x2B8\x2BA\a\xF\x2\x2\x2B9"+
		"\x2BB\x5\xE\b\x2\x2BA\x2B9\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BC"+
		"\x3\x2\x2\x2\x2BC\x2BD\aL\x2\x2\x2BD\x2BE\x5\x30\x19\x2\x2BE\x2BF\aM\x2"+
		"\x2\x2BF\x2C3\a\x46\x2\x2\x2C0\x2C2\x5&\x14\x2\x2C1\x2C0\x3\x2\x2\x2\x2C2"+
		"\x2C5\x3\x2\x2\x2\x2C3\x2C1\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2C6"+
		"\x3\x2\x2\x2\x2C5\x2C3\x3\x2\x2\x2\x2C6\x2C7\aG\x2\x2\x2C7\x2CF\x3\x2"+
		"\x2\x2\x2C8\x2CF\a>\x2\x2\x2C9\x2CF\a\x12\x2\x2\x2CA\x2CF\a<\x2\x2\x2CB"+
		"\x2CF\a=\x2\x2\x2CC\x2CF\a\x14\x2\x2\x2CD\x2CF\a?\x2\x2\x2CE\x2AA\x3\x2"+
		"\x2\x2\x2CE\x2AD\x3\x2\x2\x2\x2CE\x2AE\x3\x2\x2\x2\x2CE\x2B8\x3\x2\x2"+
		"\x2\x2CE\x2C8\x3\x2\x2\x2\x2CE\x2C9\x3\x2\x2\x2\x2CE\x2CA\x3\x2\x2\x2"+
		"\x2CE\x2CB\x3\x2\x2\x2\x2CE\x2CC\x3\x2\x2\x2\x2CE\x2CD\x3\x2\x2\x2\x2CF"+
		"\x30D\x3\x2\x2\x2\x2D0\x2D1\f\x16\x2\x2\x2D1\x2D2\t\b\x2\x2\x2D2\x30C"+
		"\x5<\x1F\x17\x2D3\x2D4\f\x15\x2\x2\x2D4\x2D5\t\t\x2\x2\x2D5\x30C\x5<\x1F"+
		"\x16\x2D6\x2DB\f\x14\x2\x2\x2D7\x2D8\aH\x2\x2\x2D8\x2DC\aH\x2\x2\x2D9"+
		"\x2DA\aI\x2\x2\x2DA\x2DC\aI\x2\x2\x2DB\x2D7\x3\x2\x2\x2\x2DB\x2D9\x3\x2"+
		"\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x30C\x5<\x1F\x15\x2DE\x2DF\f\x13\x2"+
		"\x2\x2DF\x2E0\t\x4\x2\x2\x2E0\x30C\x5<\x1F\x14\x2E1\x2E2\f\x12\x2\x2\x2E2"+
		"\x2E3\t\n\x2\x2\x2E3\x30C\x5<\x1F\x13\x2E4\x2E5\f\x11\x2\x2\x2E5\x2E6"+
		"\a[\x2\x2\x2E6\x30C\x5<\x1F\x12\x2E7\x2E8\f\x10\x2\x2\x2E8\x2E9\a\\\x2"+
		"\x2\x2E9\x30C\x5<\x1F\x11\x2EA\x2EB\f\xF\x2\x2\x2EB\x2EC\a]\x2\x2\x2EC"+
		"\x30C\x5<\x1F\x10\x2ED\x2EE\f\xE\x2\x2\x2EE\x2EF\aQ\x2\x2\x2EF\x30C\x5"+
		"<\x1F\xF\x2F0\x2F1\f\r\x2\x2\x2F1\x2F2\aR\x2\x2\x2F2\x2F3\x5<\x1F\x2\x2F3"+
		"\x2F4\a\x41\x2\x2\x2F4\x2F5\x5<\x1F\r\x2F5\x30C\x3\x2\x2\x2\x2F6\x2F7"+
		"\f\f\x2\x2\x2F7\x2F8\t\v\x2\x2\x2F8\x30C\x5<\x1F\f\x2F9\x2FA\f\x1C\x2"+
		"\x2\x2FA\x2FB\a\x42\x2\x2\x2FB\x30C\x5\x6\x4\x2\x2FC\x2FD\f\x1B\x2\x2"+
		"\x2FD\x2FE\a\x44\x2\x2\x2FE\x30C\x5\x6\x4\x2\x2FF\x300\f\x1A\x2\x2\x300"+
		"\x301\aL\x2\x2\x301\x302\x5\x30\x19\x2\x302\x303\aM\x2\x2\x303\x30C\x3"+
		"\x2\x2\x2\x304\x305\f\x19\x2\x2\x305\x306\aJ\x2\x2\x306\x307\x5\x30\x19"+
		"\x2\x307\x308\aK\x2\x2\x308\x30C\x3\x2\x2\x2\x309\x30A\f\x18\x2\x2\x30A"+
		"\x30C\aR\x2\x2\x30B\x2D0\x3\x2\x2\x2\x30B\x2D3\x3\x2\x2\x2\x30B\x2D6\x3"+
		"\x2\x2\x2\x30B\x2DE\x3\x2\x2\x2\x30B\x2E1\x3\x2\x2\x2\x30B\x2E4\x3\x2"+
		"\x2\x2\x30B\x2E7\x3\x2\x2\x2\x30B\x2EA\x3\x2\x2\x2\x30B\x2ED\x3\x2\x2"+
		"\x2\x30B\x2F0\x3\x2\x2\x2\x30B\x2F6\x3\x2\x2\x2\x30B\x2F9\x3\x2\x2\x2"+
		"\x30B\x2FC\x3\x2\x2\x2\x30B\x2FF\x3\x2\x2\x2\x30B\x304\x3\x2\x2\x2\x30B"+
		"\x309\x3\x2\x2\x2\x30C\x30F\x3\x2\x2\x2\x30D\x30B\x3\x2\x2\x2\x30D\x30E"+
		"\x3\x2\x2\x2\x30E=\x3\x2\x2\x2\x30F\x30D\x3\x2\x2\x2\x61\x41GW`\x66nt"+
		"z}\x82\x89\x91\x97\x9E\xA2\xA6\xAB\xAF\xB7\xBA\xC9\xD1\xD8\xDC\xE0\xE5"+
		"\xE9\xF2\x103\x10E\x113\x115\x11E\x125\x12A\x132\x13C\x144\x14B\x150\x156"+
		"\x15B\x15F\x166\x16C\x176\x17C\x181\x189\x191\x197\x1A4\x1AA\x1AF\x1B4"+
		"\x1B8\x1BF\x1C5\x1CB\x1D3\x1DB\x1E1\x1E6\x1EE\x1F3\x1FB\x202\x207\x20B"+
		"\x212\x216\x226\x22D\x231\x237\x23C\x248\x255\x25D\x274\x27A\x27E\x282"+
		"\x28A\x295\x29B\x29F\x2A5\x2B2\x2BA\x2C3\x2CE\x2DB\x30B\x30D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Compiler.Antlr
