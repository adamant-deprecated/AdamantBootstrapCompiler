//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AdamantParser : Parser {
	public const int
		SingleLineDocComment=1, BlockDocComment=2, SingleLineComment=3, BlockComment=4, 
		PreprocessorLine=5, Whitespace=6, Newline=7, PreprocessorSkippedSection=8, 
		Using=9, Namespace=10, Class=11, Enum=12, New=13, Delete=14, Operator=15, 
		This=16, Return=17, Uninitialized=18, Where=19, Var=20, Let=21, Get=22, 
		Set=23, Do=24, While=25, If=26, Else=27, Abstract=28, Params=29, For=30, 
		Foreach=31, In=32, Ref=33, Base=34, Const=35, Sealed=36, Override=37, 
		Partial=38, Yield=39, Switch=40, Break=41, Continue=42, Try=43, Catch=44, 
		Finally=45, Throw=46, Implicit=47, Explicit=48, Conversion=49, Public=50, 
		Private=51, Protected=52, Package=53, Safe=54, Unsafe=55, Own=56, Mutable=57, 
		Immutable=58, Async=59, Await=60, BooleanLiteral=61, IntLiteral=62, NullLiteral=63, 
		StringLiteral=64, Semicolon=65, Colon=66, Dot=67, Comma=68, Arrow=69, 
		Lambda=70, LeftBrace=71, RightBrace=72, LeftAngle=73, RightAngle=74, LeftBracket=75, 
		RightBracket=76, LeftParen=77, RightParen=78, Asterisk=79, AtSign=80, 
		AddressOf=81, Coalesce=82, IsNull=83, Equal=84, NotEqual=85, LessThanOrEqual=86, 
		GreaterThanOrEqual=87, TypeList=88, Plus=89, Minus=90, Divide=91, And=92, 
		Xor=93, Or=94, Not=95, Increment=96, Decrement=97, Assign=98, AddAssign=99, 
		SubtractAssign=100, MultiplyAssign=101, DivideAssign=102, LeftShiftAssign=103, 
		RightShiftAssign=104, AndAssign=105, XorAssign=106, OrAssign=107, Identifier=108, 
		EscapedIdentifier=109, Unknown=110;
	public const int
		RULE_compilationUnit = 0, RULE_usingStatement = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_attribute = 5, RULE_baseTypes = 6, 
		RULE_modifier = 7, RULE_typeParameterList = 8, RULE_typeParameter = 9, 
		RULE_typeName = 10, RULE_typeArguments = 11, RULE_ownershipType = 12, 
		RULE_plainType = 13, RULE_funcTypeParameterList = 14, RULE_funcTypeParameter = 15, 
		RULE_constExpression = 16, RULE_typeParameterConstraintClause = 17, RULE_typeParameterConstraint = 18, 
		RULE_member = 19, RULE_parameterList = 20, RULE_parameter = 21, RULE_parameterModifier = 22, 
		RULE_constructorInitializer = 23, RULE_argumentList = 24, RULE_methodBody = 25, 
		RULE_overloadableOperator = 26, RULE_statement = 27, RULE_variableDeclaration = 28, 
		RULE_expression = 29;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingStatement", "identifier", "namespaceName", "declaration", 
		"attribute", "baseTypes", "modifier", "typeParameterList", "typeParameter", 
		"typeName", "typeArguments", "ownershipType", "plainType", "funcTypeParameterList", 
		"funcTypeParameter", "constExpression", "typeParameterConstraintClause", 
		"typeParameterConstraint", "member", "parameterList", "parameter", "parameterModifier", 
		"constructorInitializer", "argumentList", "methodBody", "overloadableOperator", 
		"statement", "variableDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'operator'", "'this'", "'return'", 
		"'uninitialized'", "'where'", "'var'", "'let'", "'get'", "'set'", "'do'", 
		"'while'", "'if'", "'else'", "'abstract'", "'params'", "'for'", "'foreach'", 
		"'in'", "'ref'", "'base'", "'const'", "'sealed'", "'override'", "'partial'", 
		"'yeild'", "'switch'", "'break'", "'continue'", "'try'", "'catch'", "'finally'", 
		"'throw'", "'implicit'", "'explicit'", "'conversion'", "'public'", "'private'", 
		"'protected'", "'package'", "'safe'", "'unsafe'", "'own'", "'mut'", "'immut'", 
		"'async'", "'await'", null, null, "'null'", null, "';'", "':'", "'.'", 
		"','", "'->'", "'=>'", "'{'", "'}'", "'<'", "'>'", "'['", "']'", "'('", 
		"')'", "'*'", "'@'", "'&'", "'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", 
		"'...'", "'+'", "'-'", "'/'", "'and'", "'xor'", "'or'", "'not'", "'++'", 
		"'--'", "'='", "'+='", "'-='", "'*='", "'/='", "'<<='", "'>>='", "'and='", 
		"'xor='", "'or='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "BlockDocComment", "SingleLineComment", 
		"BlockComment", "PreprocessorLine", "Whitespace", "Newline", "PreprocessorSkippedSection", 
		"Using", "Namespace", "Class", "Enum", "New", "Delete", "Operator", "This", 
		"Return", "Uninitialized", "Where", "Var", "Let", "Get", "Set", "Do", 
		"While", "If", "Else", "Abstract", "Params", "For", "Foreach", "In", "Ref", 
		"Base", "Const", "Sealed", "Override", "Partial", "Yield", "Switch", "Break", 
		"Continue", "Try", "Catch", "Finally", "Throw", "Implicit", "Explicit", 
		"Conversion", "Public", "Private", "Protected", "Package", "Safe", "Unsafe", 
		"Own", "Mutable", "Immutable", "Async", "Await", "BooleanLiteral", "IntLiteral", 
		"NullLiteral", "StringLiteral", "Semicolon", "Colon", "Dot", "Comma", 
		"Arrow", "Lambda", "LeftBrace", "RightBrace", "LeftAngle", "RightAngle", 
		"LeftBracket", "RightBracket", "LeftParen", "RightParen", "Asterisk", 
		"AtSign", "AddressOf", "Coalesce", "IsNull", "Equal", "NotEqual", "LessThanOrEqual", 
		"GreaterThanOrEqual", "TypeList", "Plus", "Minus", "Divide", "And", "Xor", 
		"Or", "Not", "Increment", "Decrement", "Assign", "AddAssign", "SubtractAssign", 
		"MultiplyAssign", "DivideAssign", "LeftShiftAssign", "RightShiftAssign", 
		"AndAssign", "XorAssign", "OrAssign", "Identifier", "EscapedIdentifier", 
		"Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AdamantParser.Eof, 0); }
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 60; usingStatement();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
				{
				{
				State = 66; declaration();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 72; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStatementContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingStatementContext usingStatement() {
		UsingStatementContext _localctx = new UsingStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(Using);
			State = 75; namespaceName();
			State = 76; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(AdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.La(1);
			if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; identifier();
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 81; Match(Dot);
				State = 82; identifier();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public IdentifierContext name;
		public OwnershipTypeContext returnType;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			int _alt;
			State = 191;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; Match(Namespace);
				State = 89; namespaceName();
				State = 90; Match(LeftBrace);
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 91; usingStatement();
					}
					}
					State = 96;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 97; declaration();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 103; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 105; attribute();
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 111; modifier();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 117; Match(Class);
				State = 118; ((ClassDeclarationContext)_localctx).name = identifier();
				State = 120;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 119; typeParameterList();
					}
				}

				State = 123;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 122; baseTypes();
					}
				}

				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 125; typeParameterConstraintClause();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 131; Match(LeftBrace);
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 132; member();
					}
					}
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 138; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new GlobalDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 140; attribute();
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 146; modifier();
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 152;
				((GlobalDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((GlobalDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 153; ((GlobalDeclarationContext)_localctx).name = identifier();
				State = 156;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 154; Match(Colon);
					State = 155; ownershipType();
					}
				}

				State = 160;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 158; Match(Assign);
					State = 159; expression(0);
					}
				}

				State = 162; Match(Semicolon);
				}
				break;
			case 4:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 164; attribute();
						}
						} 
					}
					State = 169;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 170; modifier();
					}
					}
					State = 175;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 176; ((FunctionDeclarationContext)_localctx).name = identifier();
				State = 178;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 177; typeArguments();
					}
				}

				State = 180; parameterList();
				State = 181; Match(Lambda);
				State = 182; ((FunctionDeclarationContext)_localctx).returnType = ownershipType();
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 183; typeParameterConstraintClause();
					}
					}
					State = 188;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 189; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(EscapedIdentifier);
			State = 196;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 194; Match(LeftParen);
				State = 195; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public TypeNameContext baseType;
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _interfaces = new List<TypeNameContext>();
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 198; Match(Colon);
			State = 200;
			_la = TokenStream.La(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
				{
				State = 199; _localctx.baseType = typeName(0);
				}
			}

			State = 211;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 202; Match(Colon);
				State = 203; _localctx._typeName = typeName(0);
				_localctx._interfaces.Add(_localctx._typeName);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 204; Match(Comma);
					State = 205; _localctx._typeName = typeName(0);
					_localctx._interfaces.Add(_localctx._typeName);
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken Symbol;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_modifier);
		try {
			State = 227;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; _localctx.Symbol = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; _localctx.Symbol = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; _localctx.Symbol = Match(Protected);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 4);
				{
				State = 216; _localctx.Symbol = Match(Package);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 217; _localctx.Symbol = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 218; _localctx.Symbol = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 219; _localctx.Symbol = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 220; _localctx.Symbol = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 221; _localctx.Symbol = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 222; _localctx.Symbol = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 223; _localctx.Symbol = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 224; _localctx.Symbol = Match(Override);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 13);
				{
				State = 225; _localctx.Symbol = Match(Const);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 14);
				{
				State = 226; _localctx.Symbol = Match(Async);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(LeftAngle);
			State = 230; typeParameter();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 231; Match(Comma);
				State = 232; typeParameter();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 238; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; identifier();
			State = 242;
			_la = TokenStream.La(1);
			if (_la==TypeList) {
				{
				State = 241; Match(TypeList);
				}
			}

			State = 246;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 244; Match(Colon);
				State = 245; typeName(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public TypeNameContext outerType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_typeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 249; identifier();
			State = 251;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 250; typeArguments();
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 261;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeNameContext(_parentctx, _parentState);
					_localctx.outerType = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 253;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 254; Match(Dot);
					State = 255; identifier();
					State = 257;
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						State = 256; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public OwnershipTypeContext[] ownershipType() {
			return GetRuleContexts<OwnershipTypeContext>();
		}
		public OwnershipTypeContext ownershipType(int i) {
			return GetRuleContext<OwnershipTypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(LeftAngle);
			State = 265; ownershipType();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 266; Match(Comma);
				State = 267; ownershipType();
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 273; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnershipTypeContext : ParserRuleContext {
		public OwnershipTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownershipType; } }
	 
		public OwnershipTypeContext() { }
		public virtual void CopyFrom(OwnershipTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MutableTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public MutableTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMutableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMutableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public OwnedTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmutableTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ImmutableTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterImmutableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitImmutableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ImplicitTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterImplicitType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitImplicitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnershipTypeContext ownershipType() {
		OwnershipTypeContext _localctx = new OwnershipTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_ownershipType);
		int _la;
		try {
			State = 294;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new MutableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 275; ((MutableTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 278; Match(Mutable);
				State = 279; plainType(0);
				}
				break;
			case 2:
				_localctx = new OwnedTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 280; ((OwnedTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 283; Match(Own);
				State = 284; plainType(0);
				}
				break;
			case 3:
				_localctx = new ImmutableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 286;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 285; ((ImmutableTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 288; Match(Immutable);
				State = 289; plainType(0);
				}
				break;
			case 4:
				_localctx = new ImplicitTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 291;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 290; ((ImplicitTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 293; plainType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainTypeContext : ParserRuleContext {
		public PlainTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainType; } }
	 
		public PlainTypeContext() { }
		public virtual void CopyFrom(PlainTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayTypeContext : PlainTypeContext {
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ConstExpressionContext[] constExpression() {
			return GetRuleContexts<ConstExpressionContext>();
		}
		public ConstExpressionContext constExpression(int i) {
			return GetRuleContext<ConstExpressionContext>(i);
		}
		public ArrayTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArraySliceTypeContext : PlainTypeContext {
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ArraySliceTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArraySliceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArraySliceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySliceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedTypeContext : PlainTypeContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NamedTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : PlainTypeContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public FunctionTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : PlainTypeContext {
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public PointerTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainTypeContext plainType() {
		return plainType(0);
	}

	private PlainTypeContext plainType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PlainTypeContext _localctx = new PlainTypeContext(Context, _parentState);
		PlainTypeContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_plainType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			switch (TokenStream.La(1)) {
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 297; typeName(0);
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 298; funcTypeParameterList();
				State = 299; Match(Lambda);
				State = 300; ownershipType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 327;
					switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
					case 1:
						{
						_localctx = new PointerTypeContext(new PlainTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plainType);
						State = 304;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 305; Match(Asterisk);
						}
						break;
					case 2:
						{
						_localctx = new ArrayTypeContext(new PlainTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plainType);
						State = 306;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 307; Match(LeftBracket);
						State = 308; constExpression();
						State = 313;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 309; Match(Comma);
							State = 310; constExpression();
							}
							}
							State = 315;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 316; Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new ArraySliceTypeContext(new PlainTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plainType);
						State = 318;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 319; Match(LeftBracket);
						State = 323;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 320; Match(Comma);
							}
							}
							State = 325;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 326; Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 345;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332; Match(LeftParen);
				State = 333; funcTypeParameter();
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 334; Match(Comma);
					State = 335; funcTypeParameter();
					}
					}
					State = 340;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 341; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; Match(LeftParen);
				State = 344; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 347; parameterModifier();
				}
				}
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 353; ownershipType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_constExpression);
		try {
			State = 358;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356; Match(StringLiteral);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 376;
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360; Match(Where);
				State = 361; typeParameter();
				State = 362; Match(Colon);
				State = 363; typeParameterConstraint();
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 364; Match(Comma);
					State = 365; typeParameterConstraint();
					}
					}
					State = 370;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371; Match(Where);
				State = 372; typeParameter();
				State = 373;
				_la = TokenStream.La(1);
				if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (LeftAngle - 73)) | (1L << (RightAngle - 73)) | (1L << (LessThanOrEqual - 73)) | (1L << (GreaterThanOrEqual - 73)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 374; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeParameterConstraint);
		try {
			State = 383;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 378; Match(New);
				State = 379; Match(LeftParen);
				State = 380; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 381; typeName(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 382; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadMethodContext : MemberContext {
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OperatorOverloadMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverloadMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverloadMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverloadMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public OwnershipTypeContext returnType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public PropertyContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 38, RULE_member);
		int _la;
		try {
			int _alt;
			State = 548;
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 385; attribute();
					}
					}
					State = 390;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 391; modifier();
					}
					}
					State = 396;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 397; Match(New);
				State = 399;
				_la = TokenStream.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
					{
					State = 398; identifier();
					}
				}

				State = 401; parameterList();
				State = 403;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 402; constructorInitializer();
					}
				}

				State = 405; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 407; attribute();
					}
					}
					State = 412;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 413; modifier();
					}
					}
					State = 418;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 419; Match(Delete);
				State = 420; parameterList();
				State = 421; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 423; attribute();
					}
					}
					State = 428;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 429; modifier();
					}
					}
					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 435; Match(Conversion);
				State = 437;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 436; typeArguments();
					}
				}

				State = 439; parameterList();
				State = 440; Match(Lambda);
				State = 441; ownershipType();
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 442; typeParameterConstraintClause();
					}
					}
					State = 447;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 448; methodBody();
				}
				break;
			case 4:
				_localctx = new OperatorOverloadMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 450; attribute();
					}
					}
					State = 455;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 456; modifier();
					}
					}
					State = 461;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 462; Match(Operator);
				State = 463; overloadableOperator();
				State = 464; parameterList();
				State = 465; Match(Lambda);
				State = 466; ownershipType();
				State = 467; methodBody();
				}
				break;
			case 5:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 469; attribute();
					}
					}
					State = 474;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 475; modifier();
					}
					}
					State = 480;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 481;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 482; identifier();
				State = 485;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 483; Match(Colon);
					State = 484; ownershipType();
					}
				}

				State = 489;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 487; Match(Assign);
					State = 488; expression(0);
					}
				}

				State = 491; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new PropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 493; attribute();
					}
					}
					State = 498;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 499; modifier();
					}
					}
					State = 504;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 505;
				((PropertyContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((PropertyContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 506; identifier();
				State = 508;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 507; typeArguments();
					}
				}

				State = 510; parameterList();
				State = 511; Match(Lambda);
				State = 512; ownershipType();
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 513; typeParameterConstraintClause();
					}
					}
					State = 518;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 519; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 521; attribute();
						}
						} 
					}
					State = 526;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 527; modifier();
					}
					}
					State = 532;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 533; identifier();
				State = 535;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 534; typeArguments();
					}
				}

				State = 537; parameterList();
				State = 538; Match(Lambda);
				State = 539; ((MethodContext)_localctx).returnType = ownershipType();
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 540; typeParameterConstraintClause();
					}
					}
					State = 545;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 546; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _parameters = new List<ParameterContext>();
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameterList);
		int _la;
		try {
			State = 563;
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 550; Match(LeftParen);
				State = 551; _localctx._parameter = parameter();
				_localctx._parameters.Add(_localctx._parameter);
				State = 556;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 552; Match(Comma);
					State = 553; _localctx._parameter = parameter();
					_localctx._parameters.Add(_localctx._parameter);
					}
					}
					State = 558;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 559; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 561; Match(LeftParen);
				State = 562; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameter);
		int _la;
		try {
			State = 587;
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 565; parameterModifier();
					}
					}
					State = 570;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 572;
				_la = TokenStream.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
					{
					State = 571; identifier();
					}
				}

				State = 574; Match(Colon);
				State = 575; ownershipType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 576; parameterModifier();
					}
					}
					State = 581;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 582; Match(This);
				State = 585;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 583; Match(Colon);
					State = 584; Match(Mutable);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 46, RULE_constructorInitializer);
		try {
			State = 603;
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 591; Match(Colon);
				State = 592; Match(Base);
				State = 593; Match(LeftParen);
				State = 594; argumentList();
				State = 595; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 597; Match(Colon);
				State = 598; Match(This);
				State = 599; Match(LeftParen);
				State = 600; argumentList();
				State = 601; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 48, RULE_argumentList);
		int _la;
		try {
			State = 614;
			switch (TokenStream.La(1)) {
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 605; expression(0);
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 606; Match(Comma);
					State = 607; expression(0);
					}
					}
					State = 612;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodBody);
		int _la;
		try {
			State = 625;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 616; Match(LeftBrace);
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 617; statement();
					}
					}
					State = 622;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 623; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 624; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_overloadableOperator);
		try {
			State = 637;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 629; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 630; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 631; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 632; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 633; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 634; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 635; Match(LeftBracket);
				State = 636; Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_statement);
		int _la;
		try {
			State = 707;
			switch (TokenStream.La(1)) {
			case Var:
			case Let:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 639; variableDeclaration();
				State = 640; Match(Semicolon);
				}
				break;
			case Unsafe:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 642; Match(Unsafe);
				State = 643; Match(LeftBrace);
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 644; statement();
					}
					}
					State = 649;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 650; Match(RightBrace);
				}
				break;
			case LeftBrace:
				_localctx = new BlockContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 651; Match(LeftBrace);
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 652; statement();
					}
					}
					State = 657;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 658; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 659; Match(Semicolon);
				}
				break;
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 660; expression(0);
				State = 661; Match(Semicolon);
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 663; Match(Return);
				State = 664; expression(0);
				State = 665; Match(Semicolon);
				}
				break;
			case Throw:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 667; Match(Throw);
				State = 668; expression(0);
				State = 669; Match(Semicolon);
				}
				break;
			case If:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 671; Match(If);
				State = 672; Match(LeftParen);
				State = 673; expression(0);
				State = 674; Match(RightParen);
				State = 675; statement();
				State = 678;
				switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
				case 1:
					{
					State = 676; Match(Else);
					State = 677; statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 680; Match(For);
				State = 681; Match(LeftParen);
				State = 683;
				_la = TokenStream.La(1);
				if (_la==Var || _la==Let) {
					{
					State = 682; variableDeclaration();
					}
				}

				State = 685; Match(Semicolon);
				State = 687;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					State = 686; expression(0);
					}
				}

				State = 689; Match(Semicolon);
				State = 691;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					State = 690; expression(0);
					}
				}

				State = 693; Match(RightParen);
				State = 694; statement();
				}
				break;
			case Foreach:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 695; Match(Foreach);
				State = 696; Match(LeftParen);
				State = 697; variableDeclaration();
				State = 698; Match(In);
				State = 699; expression(0);
				State = 700; Match(RightParen);
				State = 701; statement();
				}
				break;
			case Delete:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 703; Match(Delete);
				State = 704; expression(0);
				State = 705; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			_localctx.kind = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 710; identifier();
			State = 713;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 711; Match(Colon);
				State = 712; ownershipType();
				}
			}

			State = 717;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 715; Match(Assign);
				State = 716; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(AdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public IToken s73;
		public IList<IToken> _ops = new List<IToken>();
		public IToken s74;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 755;
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 720;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (Asterisk - 79)) | (1L << (AddressOf - 79)) | (1L << (Plus - 79)) | (1L << (Minus - 79)) | (1L << (Not - 79)) | (1L << (Increment - 79)) | (1L << (Decrement - 79)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 721; expression(21);
				}
				break;
			case 2:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 722; identifier();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 723; Match(New);
				State = 724; typeName(0);
				State = 727;
				_la = TokenStream.La(1);
				if (_la==Dot) {
					{
					State = 725; Match(Dot);
					State = 726; identifier();
					}
				}

				State = 729; Match(LeftParen);
				State = 730; argumentList();
				State = 731; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 733; Match(New);
				State = 735;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 734; baseTypes();
					}
				}

				State = 737; Match(LeftParen);
				State = 738; argumentList();
				State = 739; Match(RightParen);
				State = 740; Match(LeftBrace);
				State = 744;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 741; member();
					}
					}
					State = 746;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 747; Match(RightBrace);
				}
				break;
			case 5:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 749; Match(NullLiteral);
				}
				break;
			case 6:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 750; Match(This);
				}
				break;
			case 7:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 751; Match(BooleanLiteral);
				}
				break;
			case 8:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 752; Match(IntLiteral);
				}
				break;
			case 9:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 753; Match(Uninitialized);
				}
				break;
			case 10:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 754; Match(StringLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 818;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 816;
					switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 757;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 758;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 759; expression(21);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 760;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 761;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 762; expression(20);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 763;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 768;
						switch (TokenStream.La(1)) {
						case LeftAngle:
							{
							State = 764; ((ShiftExpressionContext)_localctx).s73 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s73);
							State = 765; ((ShiftExpressionContext)_localctx).s73 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s73);
							}
							break;
						case RightAngle:
							{
							State = 766; ((ShiftExpressionContext)_localctx).s74 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s74);
							State = 767; ((ShiftExpressionContext)_localctx).s74 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s74);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 770; expression(19);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 771;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 772;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (LeftAngle - 73)) | (1L << (RightAngle - 73)) | (1L << (LessThanOrEqual - 73)) | (1L << (GreaterThanOrEqual - 73)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 773; expression(18);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 774;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 775;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 776; expression(17);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 777;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 778; Match(And);
						State = 779; expression(16);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 780;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 781; Match(Xor);
						State = 782; expression(15);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 783;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 784; Match(Or);
						State = 785; expression(14);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 786;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 787; Match(Coalesce);
						State = 788; expression(13);
						}
						break;
					case 10:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 789;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 790; Match(IsNull);
						State = 791; expression(0);
						State = 792; Match(Colon);
						State = 793; expression(11);
						}
						break;
					case 11:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 795;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 796;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (Assign - 98)) | (1L << (AddAssign - 98)) | (1L << (SubtractAssign - 98)) | (1L << (MultiplyAssign - 98)) | (1L << (DivideAssign - 98)) | (1L << (LeftShiftAssign - 98)) | (1L << (RightShiftAssign - 98)) | (1L << (AndAssign - 98)) | (1L << (XorAssign - 98)) | (1L << (OrAssign - 98)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 797; expression(10);
						}
						break;
					case 12:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 798;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 799; Match(Dot);
						State = 800; identifier();
						}
						break;
					case 13:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 801;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 802; Match(Arrow);
						State = 803; identifier();
						}
						break;
					case 14:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 804;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 805; Match(LeftParen);
						State = 806; argumentList();
						State = 807; Match(RightParen);
						}
						break;
					case 15:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 809;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 810; Match(LeftBracket);
						State = 811; argumentList();
						State = 812; Match(RightBracket);
						}
						break;
					case 16:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 814;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 815; Match(IsNull);
						}
						break;
					}
					} 
				}
				State = 820;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 13: return plainType_sempred((PlainTypeContext)_localctx, predIndex);
		case 29: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool plainType_sempred(PlainTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 20);
		case 5: return Precpred(Context, 19);
		case 6: return Precpred(Context, 18);
		case 7: return Precpred(Context, 17);
		case 8: return Precpred(Context, 16);
		case 9: return Precpred(Context, 15);
		case 10: return Precpred(Context, 14);
		case 11: return Precpred(Context, 13);
		case 12: return Precpred(Context, 12);
		case 13: return Precpred(Context, 11);
		case 14: return Precpred(Context, 10);
		case 15: return Precpred(Context, 26);
		case 16: return Precpred(Context, 25);
		case 17: return Precpred(Context, 24);
		case 18: return Precpred(Context, 23);
		case 19: return Precpred(Context, 22);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3p\x338\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\a\x2"+
		"@\n\x2\f\x2\xE\x2\x43\v\x2\x3\x2\a\x2\x46\n\x2\f\x2\xE\x2I\v\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5V\n\x5"+
		"\f\x5\xE\x5Y\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6_\n\x6\f\x6\xE\x6\x62\v"+
		"\x6\x3\x6\a\x6\x65\n\x6\f\x6\xE\x6h\v\x6\x3\x6\x3\x6\x3\x6\a\x6m\n\x6"+
		"\f\x6\xE\x6p\v\x6\x3\x6\a\x6s\n\x6\f\x6\xE\x6v\v\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6{\n\x6\x3\x6\x5\x6~\n\x6\x3\x6\a\x6\x81\n\x6\f\x6\xE\x6\x84\v\x6"+
		"\x3\x6\x3\x6\a\x6\x88\n\x6\f\x6\xE\x6\x8B\v\x6\x3\x6\x3\x6\x3\x6\a\x6"+
		"\x90\n\x6\f\x6\xE\x6\x93\v\x6\x3\x6\a\x6\x96\n\x6\f\x6\xE\x6\x99\v\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x9F\n\x6\x3\x6\x3\x6\x5\x6\xA3\n\x6\x3"+
		"\x6\x3\x6\x3\x6\a\x6\xA8\n\x6\f\x6\xE\x6\xAB\v\x6\x3\x6\a\x6\xAE\n\x6"+
		"\f\x6\xE\x6\xB1\v\x6\x3\x6\x3\x6\x5\x6\xB5\n\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\a\x6\xBB\n\x6\f\x6\xE\x6\xBE\v\x6\x3\x6\x3\x6\x5\x6\xC2\n\x6\x3\a\x3"+
		"\a\x3\a\x5\a\xC7\n\a\x3\b\x3\b\x5\b\xCB\n\b\x3\b\x3\b\x3\b\x3\b\a\b\xD1"+
		"\n\b\f\b\xE\b\xD4\v\b\x5\b\xD6\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xE6\n\t\x3\n\x3\n\x3\n\x3\n\a"+
		"\n\xEC\n\n\f\n\xE\n\xEF\v\n\x3\n\x3\n\x3\v\x3\v\x5\v\xF5\n\v\x3\v\x3\v"+
		"\x5\v\xF9\n\v\x3\f\x3\f\x3\f\x5\f\xFE\n\f\x3\f\x3\f\x3\f\x3\f\x5\f\x104"+
		"\n\f\a\f\x106\n\f\f\f\xE\f\x109\v\f\x3\r\x3\r\x3\r\x3\r\a\r\x10F\n\r\f"+
		"\r\xE\r\x112\v\r\x3\r\x3\r\x3\xE\x5\xE\x117\n\xE\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\x11C\n\xE\x3\xE\x3\xE\x3\xE\x5\xE\x121\n\xE\x3\xE\x3\xE\x3\xE\x5\xE"+
		"\x126\n\xE\x3\xE\x5\xE\x129\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5"+
		"\xF\x131\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x13A\n\xF"+
		"\f\xF\xE\xF\x13D\v\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x144\n\xF\f\xF"+
		"\xE\xF\x147\v\xF\x3\xF\a\xF\x14A\n\xF\f\xF\xE\xF\x14D\v\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\a\x10\x153\n\x10\f\x10\xE\x10\x156\v\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\x15C\n\x10\x3\x11\a\x11\x15F\n\x11\f\x11\xE\x11"+
		"\x162\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x5\x12\x169\n\x12\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x171\n\x13\f\x13\xE\x13\x174"+
		"\v\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x17B\n\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\x182\n\x14\x3\x15\a\x15\x185\n\x15\f"+
		"\x15\xE\x15\x188\v\x15\x3\x15\a\x15\x18B\n\x15\f\x15\xE\x15\x18E\v\x15"+
		"\x3\x15\x3\x15\x5\x15\x192\n\x15\x3\x15\x3\x15\x5\x15\x196\n\x15\x3\x15"+
		"\x3\x15\x3\x15\a\x15\x19B\n\x15\f\x15\xE\x15\x19E\v\x15\x3\x15\a\x15\x1A1"+
		"\n\x15\f\x15\xE\x15\x1A4\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15"+
		"\x1AB\n\x15\f\x15\xE\x15\x1AE\v\x15\x3\x15\a\x15\x1B1\n\x15\f\x15\xE\x15"+
		"\x1B4\v\x15\x3\x15\x3\x15\x5\x15\x1B8\n\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\a\x15\x1BE\n\x15\f\x15\xE\x15\x1C1\v\x15\x3\x15\x3\x15\x3\x15\a\x15\x1C6"+
		"\n\x15\f\x15\xE\x15\x1C9\v\x15\x3\x15\a\x15\x1CC\n\x15\f\x15\xE\x15\x1CF"+
		"\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x1D9"+
		"\n\x15\f\x15\xE\x15\x1DC\v\x15\x3\x15\a\x15\x1DF\n\x15\f\x15\xE\x15\x1E2"+
		"\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x1E8\n\x15\x3\x15\x3\x15\x5"+
		"\x15\x1EC\n\x15\x3\x15\x3\x15\x3\x15\a\x15\x1F1\n\x15\f\x15\xE\x15\x1F4"+
		"\v\x15\x3\x15\a\x15\x1F7\n\x15\f\x15\xE\x15\x1FA\v\x15\x3\x15\x3\x15\x3"+
		"\x15\x5\x15\x1FF\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x205\n\x15\f"+
		"\x15\xE\x15\x208\v\x15\x3\x15\x3\x15\x3\x15\a\x15\x20D\n\x15\f\x15\xE"+
		"\x15\x210\v\x15\x3\x15\a\x15\x213\n\x15\f\x15\xE\x15\x216\v\x15\x3\x15"+
		"\x3\x15\x5\x15\x21A\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x220\n\x15"+
		"\f\x15\xE\x15\x223\v\x15\x3\x15\x3\x15\x5\x15\x227\n\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\a\x16\x22D\n\x16\f\x16\xE\x16\x230\v\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x5\x16\x236\n\x16\x3\x17\a\x17\x239\n\x17\f\x17\xE\x17"+
		"\x23C\v\x17\x3\x17\x5\x17\x23F\n\x17\x3\x17\x3\x17\x3\x17\a\x17\x244\n"+
		"\x17\f\x17\xE\x17\x247\v\x17\x3\x17\x3\x17\x3\x17\x5\x17\x24C\n\x17\x5"+
		"\x17\x24E\n\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x25E\n\x19\x3\x1A\x3"+
		"\x1A\x3\x1A\a\x1A\x263\n\x1A\f\x1A\xE\x1A\x266\v\x1A\x3\x1A\x5\x1A\x269"+
		"\n\x1A\x3\x1B\x3\x1B\a\x1B\x26D\n\x1B\f\x1B\xE\x1B\x270\v\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x274\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x280\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\a\x1D\x288\n\x1D\f\x1D\xE\x1D\x28B\v\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\a\x1D\x290\n\x1D\f\x1D\xE\x1D\x293\v\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2A9\n\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x5\x1D\x2AE\n\x1D\x3\x1D\x3\x1D\x5\x1D\x2B2\n\x1D\x3\x1D"+
		"\x3\x1D\x5\x1D\x2B6\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2C6\n\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2CC\n\x1E\x3\x1E\x3\x1E\x5\x1E\x2D0"+
		"\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F"+
		"\x2DA\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2E2\n\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x2E9\n\x1F\f\x1F\xE\x1F\x2EC"+
		"\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F"+
		"\x2F6\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x5\x1F\x303\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\a\x1F\x333\n\x1F\f\x1F\xE\x1F\x336\v\x1F\x3\x1F\x2\x5\x16\x1C"+
		"< \x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32"+
		"\x34\x36\x38:<\x2\v\x4\x2\x33\x33no\x3\x2\x16\x17\x4\x2KLXY\x3\x2\x18"+
		"\x19\x6\x2QQSS[\\\x61\x63\x4\x2QQ]]\x3\x2[\\\x3\x2VW\x3\x2\x64m\x3BE\x2"+
		"\x41\x3\x2\x2\x2\x4L\x3\x2\x2\x2\x6P\x3\x2\x2\x2\bR\x3\x2\x2\x2\n\xC1"+
		"\x3\x2\x2\x2\f\xC3\x3\x2\x2\x2\xE\xC8\x3\x2\x2\x2\x10\xE5\x3\x2\x2\x2"+
		"\x12\xE7\x3\x2\x2\x2\x14\xF2\x3\x2\x2\x2\x16\xFA\x3\x2\x2\x2\x18\x10A"+
		"\x3\x2\x2\x2\x1A\x128\x3\x2\x2\x2\x1C\x130\x3\x2\x2\x2\x1E\x15B\x3\x2"+
		"\x2\x2 \x160\x3\x2\x2\x2\"\x168\x3\x2\x2\x2$\x17A\x3\x2\x2\x2&\x181\x3"+
		"\x2\x2\x2(\x226\x3\x2\x2\x2*\x235\x3\x2\x2\x2,\x24D\x3\x2\x2\x2.\x24F"+
		"\x3\x2\x2\x2\x30\x25D\x3\x2\x2\x2\x32\x268\x3\x2\x2\x2\x34\x273\x3\x2"+
		"\x2\x2\x36\x27F\x3\x2\x2\x2\x38\x2C5\x3\x2\x2\x2:\x2C7\x3\x2\x2\x2<\x2F5"+
		"\x3\x2\x2\x2>@\x5\x4\x3\x2?>\x3\x2\x2\x2@\x43\x3\x2\x2\x2\x41?\x3\x2\x2"+
		"\x2\x41\x42\x3\x2\x2\x2\x42G\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x44\x46\x5"+
		"\n\x6\x2\x45\x44\x3\x2\x2\x2\x46I\x3\x2\x2\x2G\x45\x3\x2\x2\x2GH\x3\x2"+
		"\x2\x2HJ\x3\x2\x2\x2IG\x3\x2\x2\x2JK\a\x2\x2\x3K\x3\x3\x2\x2\x2LM\a\v"+
		"\x2\x2MN\x5\b\x5\x2NO\a\x43\x2\x2O\x5\x3\x2\x2\x2PQ\t\x2\x2\x2Q\a\x3\x2"+
		"\x2\x2RW\x5\x6\x4\x2ST\a\x45\x2\x2TV\x5\x6\x4\x2US\x3\x2\x2\x2VY\x3\x2"+
		"\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2X\t\x3\x2\x2\x2YW\x3\x2\x2\x2Z[\a\f"+
		"\x2\x2[\\\x5\b\x5\x2\\`\aI\x2\x2]_\x5\x4\x3\x2^]\x3\x2\x2\x2_\x62\x3\x2"+
		"\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x66\x3\x2\x2\x2\x62`\x3\x2\x2"+
		"\x2\x63\x65\x5\n\x6\x2\x64\x63\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3"+
		"\x2\x2\x2\x66g\x3\x2\x2\x2gi\x3\x2\x2\x2h\x66\x3\x2\x2\x2ij\aJ\x2\x2j"+
		"\xC2\x3\x2\x2\x2km\x5\f\a\x2lk\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2"+
		"no\x3\x2\x2\x2ot\x3\x2\x2\x2pn\x3\x2\x2\x2qs\x5\x10\t\x2rq\x3\x2\x2\x2"+
		"sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2uw\x3\x2\x2\x2vt\x3\x2\x2\x2"+
		"wx\a\r\x2\x2xz\x5\x6\x4\x2y{\x5\x12\n\x2zy\x3\x2\x2\x2z{\x3\x2\x2\x2{"+
		"}\x3\x2\x2\x2|~\x5\xE\b\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\x82\x3\x2\x2\x2"+
		"\x7F\x81\x5$\x13\x2\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3"+
		"\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2"+
		"\x85\x89\aI\x2\x2\x86\x88\x5(\x15\x2\x87\x86\x3\x2\x2\x2\x88\x8B\x3\x2"+
		"\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8C\x3\x2\x2\x2\x8B"+
		"\x89\x3\x2\x2\x2\x8C\x8D\aJ\x2\x2\x8D\xC2\x3\x2\x2\x2\x8E\x90\x5\f\a\x2"+
		"\x8F\x8E\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x92\x3"+
		"\x2\x2\x2\x92\x97\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94\x96\x5\x10\t\x2"+
		"\x95\x94\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97\x98\x3"+
		"\x2\x2\x2\x98\x9A\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x9A\x9B\t\x3\x2\x2\x9B"+
		"\x9E\x5\x6\x4\x2\x9C\x9D\a\x44\x2\x2\x9D\x9F\x5\x1A\xE\x2\x9E\x9C\x3\x2"+
		"\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA2\x3\x2\x2\x2\xA0\xA1\a\x64\x2\x2\xA1"+
		"\xA3\x5<\x1F\x2\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA4\x3\x2"+
		"\x2\x2\xA4\xA5\a\x43\x2\x2\xA5\xC2\x3\x2\x2\x2\xA6\xA8\x5\f\a\x2\xA7\xA6"+
		"\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9\xAA\x3\x2\x2"+
		"\x2\xAA\xAF\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAC\xAE\x5\x10\t\x2\xAD\xAC"+
		"\x3\x2\x2\x2\xAE\xB1\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2"+
		"\x2\xB0\xB2\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2\xB4\x5\x6\x4\x2\xB3\xB5"+
		"\x5\x18\r\x2\xB4\xB3\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\x3\x2\x2"+
		"\x2\xB6\xB7\x5*\x16\x2\xB7\xB8\aH\x2\x2\xB8\xBC\x5\x1A\xE\x2\xB9\xBB\x5"+
		"$\x13\x2\xBA\xB9\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC"+
		"\xBD\x3\x2\x2\x2\xBD\xBF\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC0\x5\x34"+
		"\x1B\x2\xC0\xC2\x3\x2\x2\x2\xC1Z\x3\x2\x2\x2\xC1n\x3\x2\x2\x2\xC1\x91"+
		"\x3\x2\x2\x2\xC1\xA9\x3\x2\x2\x2\xC2\v\x3\x2\x2\x2\xC3\xC6\ao\x2\x2\xC4"+
		"\xC5\aO\x2\x2\xC5\xC7\aP\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2"+
		"\xC7\r\x3\x2\x2\x2\xC8\xCA\a\x44\x2\x2\xC9\xCB\x5\x16\f\x2\xCA\xC9\x3"+
		"\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xD5\x3\x2\x2\x2\xCC\xCD\a\x44\x2\x2"+
		"\xCD\xD2\x5\x16\f\x2\xCE\xCF\a\x46\x2\x2\xCF\xD1\x5\x16\f\x2\xD0\xCE\x3"+
		"\x2\x2\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2"+
		"\xD3\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xCC\x3\x2\x2\x2\xD5\xD6\x3"+
		"\x2\x2\x2\xD6\xF\x3\x2\x2\x2\xD7\xE6\a\x34\x2\x2\xD8\xE6\a\x35\x2\x2\xD9"+
		"\xE6\a\x36\x2\x2\xDA\xE6\a\x37\x2\x2\xDB\xE6\a\x38\x2\x2\xDC\xE6\a\x39"+
		"\x2\x2\xDD\xE6\a\x1E\x2\x2\xDE\xE6\a(\x2\x2\xDF\xE6\a\x31\x2\x2\xE0\xE6"+
		"\a\x32\x2\x2\xE1\xE6\a&\x2\x2\xE2\xE6\a\'\x2\x2\xE3\xE6\a%\x2\x2\xE4\xE6"+
		"\a=\x2\x2\xE5\xD7\x3\x2\x2\x2\xE5\xD8\x3\x2\x2\x2\xE5\xD9\x3\x2\x2\x2"+
		"\xE5\xDA\x3\x2\x2\x2\xE5\xDB\x3\x2\x2\x2\xE5\xDC\x3\x2\x2\x2\xE5\xDD\x3"+
		"\x2\x2\x2\xE5\xDE\x3\x2\x2\x2\xE5\xDF\x3\x2\x2\x2\xE5\xE0\x3\x2\x2\x2"+
		"\xE5\xE1\x3\x2\x2\x2\xE5\xE2\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE4\x3"+
		"\x2\x2\x2\xE6\x11\x3\x2\x2\x2\xE7\xE8\aK\x2\x2\xE8\xED\x5\x14\v\x2\xE9"+
		"\xEA\a\x46\x2\x2\xEA\xEC\x5\x14\v\x2\xEB\xE9\x3\x2\x2\x2\xEC\xEF\x3\x2"+
		"\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xF0\x3\x2\x2\x2\xEF"+
		"\xED\x3\x2\x2\x2\xF0\xF1\aL\x2\x2\xF1\x13\x3\x2\x2\x2\xF2\xF4\x5\x6\x4"+
		"\x2\xF3\xF5\aZ\x2\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF8\x3"+
		"\x2\x2\x2\xF6\xF7\a\x44\x2\x2\xF7\xF9\x5\x16\f\x2\xF8\xF6\x3\x2\x2\x2"+
		"\xF8\xF9\x3\x2\x2\x2\xF9\x15\x3\x2\x2\x2\xFA\xFB\b\f\x1\x2\xFB\xFD\x5"+
		"\x6\x4\x2\xFC\xFE\x5\x18\r\x2\xFD\xFC\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2"+
		"\xFE\x107\x3\x2\x2\x2\xFF\x100\f\x4\x2\x2\x100\x101\a\x45\x2\x2\x101\x103"+
		"\x5\x6\x4\x2\x102\x104\x5\x18\r\x2\x103\x102\x3\x2\x2\x2\x103\x104\x3"+
		"\x2\x2\x2\x104\x106\x3\x2\x2\x2\x105\xFF\x3\x2\x2\x2\x106\x109\x3\x2\x2"+
		"\x2\x107\x105\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108\x17\x3\x2\x2\x2\x109"+
		"\x107\x3\x2\x2\x2\x10A\x10B\aK\x2\x2\x10B\x110\x5\x1A\xE\x2\x10C\x10D"+
		"\a\x46\x2\x2\x10D\x10F\x5\x1A\xE\x2\x10E\x10C\x3\x2\x2\x2\x10F\x112\x3"+
		"\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111\x113\x3\x2"+
		"\x2\x2\x112\x110\x3\x2\x2\x2\x113\x114\aL\x2\x2\x114\x19\x3\x2\x2\x2\x115"+
		"\x117\a#\x2\x2\x116\x115\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x118\x3"+
		"\x2\x2\x2\x118\x119\a;\x2\x2\x119\x129\x5\x1C\xF\x2\x11A\x11C\a#\x2\x2"+
		"\x11B\x11A\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D"+
		"\x11E\a:\x2\x2\x11E\x129\x5\x1C\xF\x2\x11F\x121\a#\x2\x2\x120\x11F\x3"+
		"\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x123\a<\x2"+
		"\x2\x123\x129\x5\x1C\xF\x2\x124\x126\a#\x2\x2\x125\x124\x3\x2\x2\x2\x125"+
		"\x126\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x129\x5\x1C\xF\x2\x128\x116"+
		"\x3\x2\x2\x2\x128\x11B\x3\x2\x2\x2\x128\x120\x3\x2\x2\x2\x128\x125\x3"+
		"\x2\x2\x2\x129\x1B\x3\x2\x2\x2\x12A\x12B\b\xF\x1\x2\x12B\x131\x5\x16\f"+
		"\x2\x12C\x12D\x5\x1E\x10\x2\x12D\x12E\aH\x2\x2\x12E\x12F\x5\x1A\xE\x2"+
		"\x12F\x131\x3\x2\x2\x2\x130\x12A\x3\x2\x2\x2\x130\x12C\x3\x2\x2\x2\x131"+
		"\x14B\x3\x2\x2\x2\x132\x133\f\x6\x2\x2\x133\x14A\aQ\x2\x2\x134\x135\f"+
		"\x5\x2\x2\x135\x136\aM\x2\x2\x136\x13B\x5\"\x12\x2\x137\x138\a\x46\x2"+
		"\x2\x138\x13A\x5\"\x12\x2\x139\x137\x3\x2\x2\x2\x13A\x13D\x3\x2\x2\x2"+
		"\x13B\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13E\x3\x2\x2\x2\x13D"+
		"\x13B\x3\x2\x2\x2\x13E\x13F\aN\x2\x2\x13F\x14A\x3\x2\x2\x2\x140\x141\f"+
		"\x4\x2\x2\x141\x145\aM\x2\x2\x142\x144\a\x46\x2\x2\x143\x142\x3\x2\x2"+
		"\x2\x144\x147\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2"+
		"\x146\x148\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x148\x14A\aN\x2\x2\x149\x132"+
		"\x3\x2\x2\x2\x149\x134\x3\x2\x2\x2\x149\x140\x3\x2\x2\x2\x14A\x14D\x3"+
		"\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x1D\x3\x2\x2"+
		"\x2\x14D\x14B\x3\x2\x2\x2\x14E\x14F\aO\x2\x2\x14F\x154\x5 \x11\x2\x150"+
		"\x151\a\x46\x2\x2\x151\x153\x5 \x11\x2\x152\x150\x3\x2\x2\x2\x153\x156"+
		"\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x157\x3"+
		"\x2\x2\x2\x156\x154\x3\x2\x2\x2\x157\x158\aP\x2\x2\x158\x15C\x3\x2\x2"+
		"\x2\x159\x15A\aO\x2\x2\x15A\x15C\aP\x2\x2\x15B\x14E\x3\x2\x2\x2\x15B\x159"+
		"\x3\x2\x2\x2\x15C\x1F\x3\x2\x2\x2\x15D\x15F\x5.\x18\x2\x15E\x15D\x3\x2"+
		"\x2\x2\x15F\x162\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x160\x161\x3\x2\x2"+
		"\x2\x161\x163\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163\x164\x5\x1A\xE\x2"+
		"\x164!\x3\x2\x2\x2\x165\x169\a@\x2\x2\x166\x169\a\x42\x2\x2\x167\x169"+
		"\x5\x6\x4\x2\x168\x165\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x168\x167\x3"+
		"\x2\x2\x2\x169#\x3\x2\x2\x2\x16A\x16B\a\x15\x2\x2\x16B\x16C\x5\x14\v\x2"+
		"\x16C\x16D\a\x44\x2\x2\x16D\x172\x5&\x14\x2\x16E\x16F\a\x46\x2\x2\x16F"+
		"\x171\x5&\x14\x2\x170\x16E\x3\x2\x2\x2\x171\x174\x3\x2\x2\x2\x172\x170"+
		"\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x17B\x3\x2\x2\x2\x174\x172\x3"+
		"\x2\x2\x2\x175\x176\a\x15\x2\x2\x176\x177\x5\x14\v\x2\x177\x178\t\x4\x2"+
		"\x2\x178\x179\a@\x2\x2\x179\x17B\x3\x2\x2\x2\x17A\x16A\x3\x2\x2\x2\x17A"+
		"\x175\x3\x2\x2\x2\x17B%\x3\x2\x2\x2\x17C\x17D\a\xF\x2\x2\x17D\x17E\aO"+
		"\x2\x2\x17E\x182\aP\x2\x2\x17F\x182\x5\x16\f\x2\x180\x182\x5\x14\v\x2"+
		"\x181\x17C\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2\x181\x180\x3\x2\x2\x2\x182"+
		"\'\x3\x2\x2\x2\x183\x185\x5\f\a\x2\x184\x183\x3\x2\x2\x2\x185\x188\x3"+
		"\x2\x2\x2\x186\x184\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x18C\x3\x2"+
		"\x2\x2\x188\x186\x3\x2\x2\x2\x189\x18B\x5\x10\t\x2\x18A\x189\x3\x2\x2"+
		"\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2"+
		"\x18D\x18F\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18F\x191\a\xF\x2\x2\x190"+
		"\x192\x5\x6\x4\x2\x191\x190\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192\x193"+
		"\x3\x2\x2\x2\x193\x195\x5*\x16\x2\x194\x196\x5\x30\x19\x2\x195\x194\x3"+
		"\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x198\x5\x34"+
		"\x1B\x2\x198\x227\x3\x2\x2\x2\x199\x19B\x5\f\a\x2\x19A\x199\x3\x2\x2\x2"+
		"\x19B\x19E\x3\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D"+
		"\x1A2\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19F\x1A1\x5\x10\t\x2\x1A0\x19F"+
		"\x3\x2\x2\x2\x1A1\x1A4\x3\x2\x2\x2\x1A2\x1A0\x3\x2\x2\x2\x1A2\x1A3\x3"+
		"\x2\x2\x2\x1A3\x1A5\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A5\x1A6\a\x10"+
		"\x2\x2\x1A6\x1A7\x5*\x16\x2\x1A7\x1A8\x5\x34\x1B\x2\x1A8\x227\x3\x2\x2"+
		"\x2\x1A9\x1AB\x5\f\a\x2\x1AA\x1A9\x3\x2\x2\x2\x1AB\x1AE\x3\x2\x2\x2\x1AC"+
		"\x1AA\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1B2\x3\x2\x2\x2\x1AE\x1AC"+
		"\x3\x2\x2\x2\x1AF\x1B1\x5\x10\t\x2\x1B0\x1AF\x3\x2\x2\x2\x1B1\x1B4\x3"+
		"\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B5\x3\x2"+
		"\x2\x2\x1B4\x1B2\x3\x2\x2\x2\x1B5\x1B7\a\x33\x2\x2\x1B6\x1B8\x5\x18\r"+
		"\x2\x1B7\x1B6\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2"+
		"\x1B9\x1BA\x5*\x16\x2\x1BA\x1BB\aH\x2\x2\x1BB\x1BF\x5\x1A\xE\x2\x1BC\x1BE"+
		"\x5$\x13\x2\x1BD\x1BC\x3\x2\x2\x2\x1BE\x1C1\x3\x2\x2\x2\x1BF\x1BD\x3\x2"+
		"\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0\x1C2\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2"+
		"\x2\x1C2\x1C3\x5\x34\x1B\x2\x1C3\x227\x3\x2\x2\x2\x1C4\x1C6\x5\f\a\x2"+
		"\x1C5\x1C4\x3\x2\x2\x2\x1C6\x1C9\x3\x2\x2\x2\x1C7\x1C5\x3\x2\x2\x2\x1C7"+
		"\x1C8\x3\x2\x2\x2\x1C8\x1CD\x3\x2\x2\x2\x1C9\x1C7\x3\x2\x2\x2\x1CA\x1CC"+
		"\x5\x10\t\x2\x1CB\x1CA\x3\x2\x2\x2\x1CC\x1CF\x3\x2\x2\x2\x1CD\x1CB\x3"+
		"\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1D0\x3\x2\x2\x2\x1CF\x1CD\x3\x2"+
		"\x2\x2\x1D0\x1D1\a\x11\x2\x2\x1D1\x1D2\x5\x36\x1C\x2\x1D2\x1D3\x5*\x16"+
		"\x2\x1D3\x1D4\aH\x2\x2\x1D4\x1D5\x5\x1A\xE\x2\x1D5\x1D6\x5\x34\x1B\x2"+
		"\x1D6\x227\x3\x2\x2\x2\x1D7\x1D9\x5\f\a\x2\x1D8\x1D7\x3\x2\x2\x2\x1D9"+
		"\x1DC\x3\x2\x2\x2\x1DA\x1D8\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1E0"+
		"\x3\x2\x2\x2\x1DC\x1DA\x3\x2\x2\x2\x1DD\x1DF\x5\x10\t\x2\x1DE\x1DD\x3"+
		"\x2\x2\x2\x1DF\x1E2\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2\x2\x1E0\x1E1\x3\x2"+
		"\x2\x2\x1E1\x1E3\x3\x2\x2\x2\x1E2\x1E0\x3\x2\x2\x2\x1E3\x1E4\t\x3\x2\x2"+
		"\x1E4\x1E7\x5\x6\x4\x2\x1E5\x1E6\a\x44\x2\x2\x1E6\x1E8\x5\x1A\xE\x2\x1E7"+
		"\x1E5\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1EB\x3\x2\x2\x2\x1E9\x1EA"+
		"\a\x64\x2\x2\x1EA\x1EC\x5<\x1F\x2\x1EB\x1E9\x3\x2\x2\x2\x1EB\x1EC\x3\x2"+
		"\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1EE\a\x43\x2\x2\x1EE\x227\x3\x2\x2"+
		"\x2\x1EF\x1F1\x5\f\a\x2\x1F0\x1EF\x3\x2\x2\x2\x1F1\x1F4\x3\x2\x2\x2\x1F2"+
		"\x1F0\x3\x2\x2\x2\x1F2\x1F3\x3\x2\x2\x2\x1F3\x1F8\x3\x2\x2\x2\x1F4\x1F2"+
		"\x3\x2\x2\x2\x1F5\x1F7\x5\x10\t\x2\x1F6\x1F5\x3\x2\x2\x2\x1F7\x1FA\x3"+
		"\x2\x2\x2\x1F8\x1F6\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FB\x3\x2"+
		"\x2\x2\x1FA\x1F8\x3\x2\x2\x2\x1FB\x1FC\t\x5\x2\x2\x1FC\x1FE\x5\x6\x4\x2"+
		"\x1FD\x1FF\x5\x18\r\x2\x1FE\x1FD\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF"+
		"\x200\x3\x2\x2\x2\x200\x201\x5*\x16\x2\x201\x202\aH\x2\x2\x202\x206\x5"+
		"\x1A\xE\x2\x203\x205\x5$\x13\x2\x204\x203\x3\x2\x2\x2\x205\x208\x3\x2"+
		"\x2\x2\x206\x204\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2\x207\x209\x3\x2\x2"+
		"\x2\x208\x206\x3\x2\x2\x2\x209\x20A\x5\x34\x1B\x2\x20A\x227\x3\x2\x2\x2"+
		"\x20B\x20D\x5\f\a\x2\x20C\x20B\x3\x2\x2\x2\x20D\x210\x3\x2\x2\x2\x20E"+
		"\x20C\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F\x214\x3\x2\x2\x2\x210\x20E"+
		"\x3\x2\x2\x2\x211\x213\x5\x10\t\x2\x212\x211\x3\x2\x2\x2\x213\x216\x3"+
		"\x2\x2\x2\x214\x212\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x215\x217\x3\x2"+
		"\x2\x2\x216\x214\x3\x2\x2\x2\x217\x219\x5\x6\x4\x2\x218\x21A\x5\x18\r"+
		"\x2\x219\x218\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A\x21B\x3\x2\x2\x2"+
		"\x21B\x21C\x5*\x16\x2\x21C\x21D\aH\x2\x2\x21D\x221\x5\x1A\xE\x2\x21E\x220"+
		"\x5$\x13\x2\x21F\x21E\x3\x2\x2\x2\x220\x223\x3\x2\x2\x2\x221\x21F\x3\x2"+
		"\x2\x2\x221\x222\x3\x2\x2\x2\x222\x224\x3\x2\x2\x2\x223\x221\x3\x2\x2"+
		"\x2\x224\x225\x5\x34\x1B\x2\x225\x227\x3\x2\x2\x2\x226\x186\x3\x2\x2\x2"+
		"\x226\x19C\x3\x2\x2\x2\x226\x1AC\x3\x2\x2\x2\x226\x1C7\x3\x2\x2\x2\x226"+
		"\x1DA\x3\x2\x2\x2\x226\x1F2\x3\x2\x2\x2\x226\x20E\x3\x2\x2\x2\x227)\x3"+
		"\x2\x2\x2\x228\x229\aO\x2\x2\x229\x22E\x5,\x17\x2\x22A\x22B\a\x46\x2\x2"+
		"\x22B\x22D\x5,\x17\x2\x22C\x22A\x3\x2\x2\x2\x22D\x230\x3\x2\x2\x2\x22E"+
		"\x22C\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F\x231\x3\x2\x2\x2\x230\x22E"+
		"\x3\x2\x2\x2\x231\x232\aP\x2\x2\x232\x236\x3\x2\x2\x2\x233\x234\aO\x2"+
		"\x2\x234\x236\aP\x2\x2\x235\x228\x3\x2\x2\x2\x235\x233\x3\x2\x2\x2\x236"+
		"+\x3\x2\x2\x2\x237\x239\x5.\x18\x2\x238\x237\x3\x2\x2\x2\x239\x23C\x3"+
		"\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B\x23E\x3\x2"+
		"\x2\x2\x23C\x23A\x3\x2\x2\x2\x23D\x23F\x5\x6\x4\x2\x23E\x23D\x3\x2\x2"+
		"\x2\x23E\x23F\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x241\a\x44\x2\x2"+
		"\x241\x24E\x5\x1A\xE\x2\x242\x244\x5.\x18\x2\x243\x242\x3\x2\x2\x2\x244"+
		"\x247\x3\x2\x2\x2\x245\x243\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x248"+
		"\x3\x2\x2\x2\x247\x245\x3\x2\x2\x2\x248\x24B\a\x12\x2\x2\x249\x24A\a\x44"+
		"\x2\x2\x24A\x24C\a;\x2\x2\x24B\x249\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2"+
		"\x24C\x24E\x3\x2\x2\x2\x24D\x23A\x3\x2\x2\x2\x24D\x245\x3\x2\x2\x2\x24E"+
		"-\x3\x2\x2\x2\x24F\x250\a\x1F\x2\x2\x250/\x3\x2\x2\x2\x251\x252\a\x44"+
		"\x2\x2\x252\x253\a$\x2\x2\x253\x254\aO\x2\x2\x254\x255\x5\x32\x1A\x2\x255"+
		"\x256\aP\x2\x2\x256\x25E\x3\x2\x2\x2\x257\x258\a\x44\x2\x2\x258\x259\a"+
		"\x12\x2\x2\x259\x25A\aO\x2\x2\x25A\x25B\x5\x32\x1A\x2\x25B\x25C\aP\x2"+
		"\x2\x25C\x25E\x3\x2\x2\x2\x25D\x251\x3\x2\x2\x2\x25D\x257\x3\x2\x2\x2"+
		"\x25E\x31\x3\x2\x2\x2\x25F\x264\x5<\x1F\x2\x260\x261\a\x46\x2\x2\x261"+
		"\x263\x5<\x1F\x2\x262\x260\x3\x2\x2\x2\x263\x266\x3\x2\x2\x2\x264\x262"+
		"\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x269\x3\x2\x2\x2\x266\x264\x3"+
		"\x2\x2\x2\x267\x269\x3\x2\x2\x2\x268\x25F\x3\x2\x2\x2\x268\x267\x3\x2"+
		"\x2\x2\x269\x33\x3\x2\x2\x2\x26A\x26E\aI\x2\x2\x26B\x26D\x5\x38\x1D\x2"+
		"\x26C\x26B\x3\x2\x2\x2\x26D\x270\x3\x2\x2\x2\x26E\x26C\x3\x2\x2\x2\x26E"+
		"\x26F\x3\x2\x2\x2\x26F\x271\x3\x2\x2\x2\x270\x26E\x3\x2\x2\x2\x271\x274"+
		"\aJ\x2\x2\x272\x274\a\x43\x2\x2\x273\x26A\x3\x2\x2\x2\x273\x272\x3\x2"+
		"\x2\x2\x274\x35\x3\x2\x2\x2\x275\x280\aQ\x2\x2\x276\x280\aS\x2\x2\x277"+
		"\x280\a`\x2\x2\x278\x280\a^\x2\x2\x279\x280\a_\x2\x2\x27A\x280\aU\x2\x2"+
		"\x27B\x280\aT\x2\x2\x27C\x280\a\x45\x2\x2\x27D\x27E\aM\x2\x2\x27E\x280"+
		"\aN\x2\x2\x27F\x275\x3\x2\x2\x2\x27F\x276\x3\x2\x2\x2\x27F\x277\x3\x2"+
		"\x2\x2\x27F\x278\x3\x2\x2\x2\x27F\x279\x3\x2\x2\x2\x27F\x27A\x3\x2\x2"+
		"\x2\x27F\x27B\x3\x2\x2\x2\x27F\x27C\x3\x2\x2\x2\x27F\x27D\x3\x2\x2\x2"+
		"\x280\x37\x3\x2\x2\x2\x281\x282\x5:\x1E\x2\x282\x283\a\x43\x2\x2\x283"+
		"\x2C6\x3\x2\x2\x2\x284\x285\a\x39\x2\x2\x285\x289\aI\x2\x2\x286\x288\x5"+
		"\x38\x1D\x2\x287\x286\x3\x2\x2\x2\x288\x28B\x3\x2\x2\x2\x289\x287\x3\x2"+
		"\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x28C\x3\x2\x2\x2\x28B\x289\x3\x2\x2"+
		"\x2\x28C\x2C6\aJ\x2\x2\x28D\x291\aI\x2\x2\x28E\x290\x5\x38\x1D\x2\x28F"+
		"\x28E\x3\x2\x2\x2\x290\x293\x3\x2\x2\x2\x291\x28F\x3\x2\x2\x2\x291\x292"+
		"\x3\x2\x2\x2\x292\x294\x3\x2\x2\x2\x293\x291\x3\x2\x2\x2\x294\x2C6\aJ"+
		"\x2\x2\x295\x2C6\a\x43\x2\x2\x296\x297\x5<\x1F\x2\x297\x298\a\x43\x2\x2"+
		"\x298\x2C6\x3\x2\x2\x2\x299\x29A\a\x13\x2\x2\x29A\x29B\x5<\x1F\x2\x29B"+
		"\x29C\a\x43\x2\x2\x29C\x2C6\x3\x2\x2\x2\x29D\x29E\a\x30\x2\x2\x29E\x29F"+
		"\x5<\x1F\x2\x29F\x2A0\a\x43\x2\x2\x2A0\x2C6\x3\x2\x2\x2\x2A1\x2A2\a\x1C"+
		"\x2\x2\x2A2\x2A3\aO\x2\x2\x2A3\x2A4\x5<\x1F\x2\x2A4\x2A5\aP\x2\x2\x2A5"+
		"\x2A8\x5\x38\x1D\x2\x2A6\x2A7\a\x1D\x2\x2\x2A7\x2A9\x5\x38\x1D\x2\x2A8"+
		"\x2A6\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2C6\x3\x2\x2\x2\x2AA\x2AB"+
		"\a \x2\x2\x2AB\x2AD\aO\x2\x2\x2AC\x2AE\x5:\x1E\x2\x2AD\x2AC\x3\x2\x2\x2"+
		"\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2B1\a\x43\x2\x2\x2B0"+
		"\x2B2\x5<\x1F\x2\x2B1\x2B0\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2\x2B2\x2B3"+
		"\x3\x2\x2\x2\x2B3\x2B5\a\x43\x2\x2\x2B4\x2B6\x5<\x1F\x2\x2B5\x2B4\x3\x2"+
		"\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8\aP\x2\x2"+
		"\x2B8\x2C6\x5\x38\x1D\x2\x2B9\x2BA\a!\x2\x2\x2BA\x2BB\aO\x2\x2\x2BB\x2BC"+
		"\x5:\x1E\x2\x2BC\x2BD\a\"\x2\x2\x2BD\x2BE\x5<\x1F\x2\x2BE\x2BF\aP\x2\x2"+
		"\x2BF\x2C0\x5\x38\x1D\x2\x2C0\x2C6\x3\x2\x2\x2\x2C1\x2C2\a\x10\x2\x2\x2C2"+
		"\x2C3\x5<\x1F\x2\x2C3\x2C4\a\x43\x2\x2\x2C4\x2C6\x3\x2\x2\x2\x2C5\x281"+
		"\x3\x2\x2\x2\x2C5\x284\x3\x2\x2\x2\x2C5\x28D\x3\x2\x2\x2\x2C5\x295\x3"+
		"\x2\x2\x2\x2C5\x296\x3\x2\x2\x2\x2C5\x299\x3\x2\x2\x2\x2C5\x29D\x3\x2"+
		"\x2\x2\x2C5\x2A1\x3\x2\x2\x2\x2C5\x2AA\x3\x2\x2\x2\x2C5\x2B9\x3\x2\x2"+
		"\x2\x2C5\x2C1\x3\x2\x2\x2\x2C6\x39\x3\x2\x2\x2\x2C7\x2C8\t\x3\x2\x2\x2C8"+
		"\x2CB\x5\x6\x4\x2\x2C9\x2CA\a\x44\x2\x2\x2CA\x2CC\x5\x1A\xE\x2\x2CB\x2C9"+
		"\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CF\x3\x2\x2\x2\x2CD\x2CE\a\x64"+
		"\x2\x2\x2CE\x2D0\x5<\x1F\x2\x2CF\x2CD\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2"+
		"\x2D0;\x3\x2\x2\x2\x2D1\x2D2\b\x1F\x1\x2\x2D2\x2D3\t\x6\x2\x2\x2D3\x2F6"+
		"\x5<\x1F\x17\x2D4\x2F6\x5\x6\x4\x2\x2D5\x2D6\a\xF\x2\x2\x2D6\x2D9\x5\x16"+
		"\f\x2\x2D7\x2D8\a\x45\x2\x2\x2D8\x2DA\x5\x6\x4\x2\x2D9\x2D7\x3\x2\x2\x2"+
		"\x2D9\x2DA\x3\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2DC\aO\x2\x2\x2DC\x2DD"+
		"\x5\x32\x1A\x2\x2DD\x2DE\aP\x2\x2\x2DE\x2F6\x3\x2\x2\x2\x2DF\x2E1\a\xF"+
		"\x2\x2\x2E0\x2E2\x5\xE\b\x2\x2E1\x2E0\x3\x2\x2\x2\x2E1\x2E2\x3\x2\x2\x2"+
		"\x2E2\x2E3\x3\x2\x2\x2\x2E3\x2E4\aO\x2\x2\x2E4\x2E5\x5\x32\x1A\x2\x2E5"+
		"\x2E6\aP\x2\x2\x2E6\x2EA\aI\x2\x2\x2E7\x2E9\x5(\x15\x2\x2E8\x2E7\x3\x2"+
		"\x2\x2\x2E9\x2EC\x3\x2\x2\x2\x2EA\x2E8\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2"+
		"\x2\x2EB\x2ED\x3\x2\x2\x2\x2EC\x2EA\x3\x2\x2\x2\x2ED\x2EE\aJ\x2\x2\x2EE"+
		"\x2F6\x3\x2\x2\x2\x2EF\x2F6\a\x41\x2\x2\x2F0\x2F6\a\x12\x2\x2\x2F1\x2F6"+
		"\a?\x2\x2\x2F2\x2F6\a@\x2\x2\x2F3\x2F6\a\x14\x2\x2\x2F4\x2F6\a\x42\x2"+
		"\x2\x2F5\x2D1\x3\x2\x2\x2\x2F5\x2D4\x3\x2\x2\x2\x2F5\x2D5\x3\x2\x2\x2"+
		"\x2F5\x2DF\x3\x2\x2\x2\x2F5\x2EF\x3\x2\x2\x2\x2F5\x2F0\x3\x2\x2\x2\x2F5"+
		"\x2F1\x3\x2\x2\x2\x2F5\x2F2\x3\x2\x2\x2\x2F5\x2F3\x3\x2\x2\x2\x2F5\x2F4"+
		"\x3\x2\x2\x2\x2F6\x334\x3\x2\x2\x2\x2F7\x2F8\f\x16\x2\x2\x2F8\x2F9\t\a"+
		"\x2\x2\x2F9\x333\x5<\x1F\x17\x2FA\x2FB\f\x15\x2\x2\x2FB\x2FC\t\b\x2\x2"+
		"\x2FC\x333\x5<\x1F\x16\x2FD\x302\f\x14\x2\x2\x2FE\x2FF\aK\x2\x2\x2FF\x303"+
		"\aK\x2\x2\x300\x301\aL\x2\x2\x301\x303\aL\x2\x2\x302\x2FE\x3\x2\x2\x2"+
		"\x302\x300\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304\x333\x5<\x1F\x15\x305"+
		"\x306\f\x13\x2\x2\x306\x307\t\x4\x2\x2\x307\x333\x5<\x1F\x14\x308\x309"+
		"\f\x12\x2\x2\x309\x30A\t\t\x2\x2\x30A\x333\x5<\x1F\x13\x30B\x30C\f\x11"+
		"\x2\x2\x30C\x30D\a^\x2\x2\x30D\x333\x5<\x1F\x12\x30E\x30F\f\x10\x2\x2"+
		"\x30F\x310\a_\x2\x2\x310\x333\x5<\x1F\x11\x311\x312\f\xF\x2\x2\x312\x313"+
		"\a`\x2\x2\x313\x333\x5<\x1F\x10\x314\x315\f\xE\x2\x2\x315\x316\aT\x2\x2"+
		"\x316\x333\x5<\x1F\xF\x317\x318\f\r\x2\x2\x318\x319\aU\x2\x2\x319\x31A"+
		"\x5<\x1F\x2\x31A\x31B\a\x44\x2\x2\x31B\x31C\x5<\x1F\r\x31C\x333\x3\x2"+
		"\x2\x2\x31D\x31E\f\f\x2\x2\x31E\x31F\t\n\x2\x2\x31F\x333\x5<\x1F\f\x320"+
		"\x321\f\x1C\x2\x2\x321\x322\a\x45\x2\x2\x322\x333\x5\x6\x4\x2\x323\x324"+
		"\f\x1B\x2\x2\x324\x325\aG\x2\x2\x325\x333\x5\x6\x4\x2\x326\x327\f\x1A"+
		"\x2\x2\x327\x328\aO\x2\x2\x328\x329\x5\x32\x1A\x2\x329\x32A\aP\x2\x2\x32A"+
		"\x333\x3\x2\x2\x2\x32B\x32C\f\x19\x2\x2\x32C\x32D\aM\x2\x2\x32D\x32E\x5"+
		"\x32\x1A\x2\x32E\x32F\aN\x2\x2\x32F\x333\x3\x2\x2\x2\x330\x331\f\x18\x2"+
		"\x2\x331\x333\aU\x2\x2\x332\x2F7\x3\x2\x2\x2\x332\x2FA\x3\x2\x2\x2\x332"+
		"\x2FD\x3\x2\x2\x2\x332\x305\x3\x2\x2\x2\x332\x308\x3\x2\x2\x2\x332\x30B"+
		"\x3\x2\x2\x2\x332\x30E\x3\x2\x2\x2\x332\x311\x3\x2\x2\x2\x332\x314\x3"+
		"\x2\x2\x2\x332\x317\x3\x2\x2\x2\x332\x31D\x3\x2\x2\x2\x332\x320\x3\x2"+
		"\x2\x2\x332\x323\x3\x2\x2\x2\x332\x326\x3\x2\x2\x2\x332\x32B\x3\x2\x2"+
		"\x2\x332\x330\x3\x2\x2\x2\x333\x336\x3\x2\x2\x2\x334\x332\x3\x2\x2\x2"+
		"\x334\x335\x3\x2\x2\x2\x335=\x3\x2\x2\x2\x336\x334\x3\x2\x2\x2i\x41GW"+
		"`\x66ntz}\x82\x89\x91\x97\x9E\xA2\xA9\xAF\xB4\xBC\xC1\xC6\xCA\xD2\xD5"+
		"\xE5\xED\xF4\xF8\xFD\x103\x107\x110\x116\x11B\x120\x125\x128\x130\x13B"+
		"\x145\x149\x14B\x154\x15B\x160\x168\x172\x17A\x181\x186\x18C\x191\x195"+
		"\x19C\x1A2\x1AC\x1B2\x1B7\x1BF\x1C7\x1CD\x1DA\x1E0\x1E7\x1EB\x1F2\x1F8"+
		"\x1FE\x206\x20E\x214\x219\x221\x226\x22E\x235\x23A\x23E\x245\x24B\x24D"+
		"\x25D\x264\x268\x26E\x273\x27F\x289\x291\x2A8\x2AD\x2B1\x2B5\x2C5\x2CB"+
		"\x2CF\x2D9\x2E1\x2EA\x2F5\x302\x332\x334";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Compiler.Antlr
