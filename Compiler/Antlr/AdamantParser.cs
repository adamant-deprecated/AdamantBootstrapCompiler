//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AdamantParser : Parser {
	public const int
		SingleLineDocComment=1, BlockDocComment=2, SingleLineComment=3, BlockComment=4, 
		PreprocessorLine=5, Whitespace=6, Newline=7, PreprocessorSkippedSection=8, 
		Using=9, Namespace=10, Class=11, Enum=12, New=13, Delete=14, Operator=15, 
		This=16, Return=17, Uninitialized=18, Where=19, Var=20, Let=21, Get=22, 
		Set=23, Do=24, While=25, If=26, Else=27, Abstract=28, Params=29, For=30, 
		Foreach=31, In=32, Ref=33, Base=34, Const=35, Sealed=36, Override=37, 
		Partial=38, Yield=39, Switch=40, Break=41, Continue=42, Try=43, Catch=44, 
		Finally=45, Throw=46, Implicit=47, Explicit=48, Conversion=49, Public=50, 
		Private=51, Protected=52, Package=53, Safe=54, Unsafe=55, Own=56, Mutable=57, 
		Immutable=58, BooleanLiteral=59, IntLiteral=60, NullLiteral=61, StringLiteral=62, 
		Semicolon=63, Colon=64, Dot=65, Comma=66, Arrow=67, Lambda=68, LeftBrace=69, 
		RightBrace=70, LeftAngle=71, RightAngle=72, LeftBracket=73, RightBracket=74, 
		LeftParen=75, RightParen=76, Asterisk=77, AtSign=78, AddressOf=79, Coalesce=80, 
		IsNull=81, Equal=82, NotEqual=83, LessThanOrEqual=84, GreaterThanOrEqual=85, 
		TypeList=86, Plus=87, Minus=88, Divide=89, And=90, Xor=91, Or=92, Not=93, 
		Increment=94, Decrement=95, Assign=96, AddAssign=97, SubtractAssign=98, 
		MultiplyAssign=99, DivideAssign=100, LeftShiftAssign=101, RightShiftAssign=102, 
		AndAssign=103, XorAssign=104, OrAssign=105, Identifier=106, EscapedIdentifier=107, 
		Unknown=108;
	public const int
		RULE_compilationUnit = 0, RULE_usingStatement = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_attribute = 5, RULE_baseTypes = 6, 
		RULE_modifier = 7, RULE_typeParameterList = 8, RULE_typeParameter = 9, 
		RULE_typeName = 10, RULE_typeArguments = 11, RULE_ownershipType = 12, 
		RULE_plainType = 13, RULE_funcTypeParameterList = 14, RULE_funcTypeParameter = 15, 
		RULE_constExpression = 16, RULE_typeParameterConstraintClause = 17, RULE_typeParameterConstraint = 18, 
		RULE_member = 19, RULE_parameterList = 20, RULE_parameter = 21, RULE_parameterModifier = 22, 
		RULE_constructorInitializer = 23, RULE_argumentList = 24, RULE_methodBody = 25, 
		RULE_overloadableOperator = 26, RULE_statement = 27, RULE_variableDeclaration = 28, 
		RULE_expression = 29;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingStatement", "identifier", "namespaceName", "declaration", 
		"attribute", "baseTypes", "modifier", "typeParameterList", "typeParameter", 
		"typeName", "typeArguments", "ownershipType", "plainType", "funcTypeParameterList", 
		"funcTypeParameter", "constExpression", "typeParameterConstraintClause", 
		"typeParameterConstraint", "member", "parameterList", "parameter", "parameterModifier", 
		"constructorInitializer", "argumentList", "methodBody", "overloadableOperator", 
		"statement", "variableDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'operator'", "'this'", "'return'", 
		"'uninitialized'", "'where'", "'var'", "'let'", "'get'", "'set'", "'do'", 
		"'while'", "'if'", "'else'", "'abstract'", "'params'", "'for'", "'foreach'", 
		"'in'", "'ref'", "'base'", "'const'", "'sealed'", "'override'", "'partial'", 
		"'yeild'", "'switch'", "'break'", "'continue'", "'try'", "'catch'", "'finally'", 
		"'throw'", "'implicit'", "'explicit'", "'conversion'", "'public'", "'private'", 
		"'protected'", "'package'", "'safe'", "'unsafe'", "'own'", "'mut'", "'immut'", 
		null, null, "'null'", null, "';'", "':'", "'.'", "','", "'->'", "'=>'", 
		"'{'", "'}'", "'<'", "'>'", "'['", "']'", "'('", "')'", "'*'", "'@'", 
		"'&'", "'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", "'...'", "'+'", 
		"'-'", "'/'", "'and'", "'xor'", "'or'", "'not'", "'++'", "'--'", "'='", 
		"'+='", "'-='", "'*='", "'/='", "'<<='", "'>>='", "'and='", "'xor='", 
		"'or='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "BlockDocComment", "SingleLineComment", 
		"BlockComment", "PreprocessorLine", "Whitespace", "Newline", "PreprocessorSkippedSection", 
		"Using", "Namespace", "Class", "Enum", "New", "Delete", "Operator", "This", 
		"Return", "Uninitialized", "Where", "Var", "Let", "Get", "Set", "Do", 
		"While", "If", "Else", "Abstract", "Params", "For", "Foreach", "In", "Ref", 
		"Base", "Const", "Sealed", "Override", "Partial", "Yield", "Switch", "Break", 
		"Continue", "Try", "Catch", "Finally", "Throw", "Implicit", "Explicit", 
		"Conversion", "Public", "Private", "Protected", "Package", "Safe", "Unsafe", 
		"Own", "Mutable", "Immutable", "BooleanLiteral", "IntLiteral", "NullLiteral", 
		"StringLiteral", "Semicolon", "Colon", "Dot", "Comma", "Arrow", "Lambda", 
		"LeftBrace", "RightBrace", "LeftAngle", "RightAngle", "LeftBracket", "RightBracket", 
		"LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", "Coalesce", 
		"IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "And", "Xor", "Or", "Not", "Increment", 
		"Decrement", "Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", 
		"DivideAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Identifier", "EscapedIdentifier", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AdamantParser.Eof, 0); }
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 60; usingStatement();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
				{
				{
				State = 66; declaration();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 72; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStatementContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingStatementContext usingStatement() {
		UsingStatementContext _localctx = new UsingStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(Using);
			State = 75; namespaceName();
			State = 76; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(AdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.La(1);
			if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; identifier();
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 81; Match(Dot);
				State = 82; identifier();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			State = 164;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; Match(Namespace);
				State = 89; namespaceName();
				State = 90; Match(LeftBrace);
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 91; usingStatement();
					}
					}
					State = 96;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 97; declaration();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 103; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 105; attribute();
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 111; modifier();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 117; Match(Class);
				State = 118; ((ClassDeclarationContext)_localctx).name = identifier();
				State = 120;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 119; typeParameterList();
					}
				}

				State = 123;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 122; baseTypes();
					}
				}

				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 125; typeParameterConstraintClause();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 131; Match(LeftBrace);
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 132; member();
					}
					}
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 138; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new GlobalDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 140; attribute();
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 146; modifier();
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 152;
				((GlobalDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((GlobalDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 153; ((GlobalDeclarationContext)_localctx).name = identifier();
				State = 156;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 154; Match(Colon);
					State = 155; ownershipType();
					}
				}

				State = 160;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 158; Match(Assign);
					State = 159; expression(0);
					}
				}

				State = 162; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(EscapedIdentifier);
			State = 169;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 167; Match(LeftParen);
				State = 168; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public TypeNameContext baseType;
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _interfaces = new List<TypeNameContext>();
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 171; Match(Colon);
			State = 173;
			_la = TokenStream.La(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
				{
				State = 172; _localctx.baseType = typeName(0);
				}
			}

			State = 184;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 175; Match(Colon);
				State = 176; _localctx._typeName = typeName(0);
				_localctx._interfaces.Add(_localctx._typeName);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 177; Match(Comma);
					State = 178; _localctx._typeName = typeName(0);
					_localctx._interfaces.Add(_localctx._typeName);
					}
					}
					State = 183;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken Symbol;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_modifier);
		try {
			State = 199;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; _localctx.Symbol = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; _localctx.Symbol = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188; _localctx.Symbol = Match(Protected);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 4);
				{
				State = 189; _localctx.Symbol = Match(Package);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 190; _localctx.Symbol = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 191; _localctx.Symbol = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 192; _localctx.Symbol = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 193; _localctx.Symbol = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 194; _localctx.Symbol = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 195; _localctx.Symbol = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 196; _localctx.Symbol = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 197; _localctx.Symbol = Match(Override);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 13);
				{
				State = 198; _localctx.Symbol = Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(LeftAngle);
			State = 202; typeParameter();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 203; Match(Comma);
				State = 204; typeParameter();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 210; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; identifier();
			State = 214;
			_la = TokenStream.La(1);
			if (_la==TypeList) {
				{
				State = 213; Match(TypeList);
				}
			}

			State = 218;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 216; Match(Colon);
				State = 217; typeName(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public TypeNameContext outerType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_typeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 221; identifier();
			State = 223;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 222; typeArguments();
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeNameContext(_parentctx, _parentState);
					_localctx.outerType = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 225;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 226; Match(Dot);
					State = 227; identifier();
					State = 229;
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 228; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public OwnershipTypeContext[] ownershipType() {
			return GetRuleContexts<OwnershipTypeContext>();
		}
		public OwnershipTypeContext ownershipType(int i) {
			return GetRuleContext<OwnershipTypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(LeftAngle);
			State = 237; ownershipType();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 238; Match(Comma);
				State = 239; ownershipType();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 245; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnershipTypeContext : ParserRuleContext {
		public OwnershipTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownershipType; } }
	 
		public OwnershipTypeContext() { }
		public virtual void CopyFrom(OwnershipTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MutableTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public MutableTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMutableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMutableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public OwnedTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmutableTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ImmutableTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterImmutableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitImmutableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ImplicitTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterImplicitType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitImplicitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnershipTypeContext ownershipType() {
		OwnershipTypeContext _localctx = new OwnershipTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_ownershipType);
		int _la;
		try {
			State = 266;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				_localctx = new MutableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 248;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 247; ((MutableTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 250; Match(Mutable);
				State = 251; plainType(0);
				}
				break;
			case 2:
				_localctx = new OwnedTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 252; ((OwnedTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 255; Match(Own);
				State = 256; plainType(0);
				}
				break;
			case 3:
				_localctx = new ImmutableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 258;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 257; ((ImmutableTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 260; Match(Immutable);
				State = 261; plainType(0);
				}
				break;
			case 4:
				_localctx = new ImplicitTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 263;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 262; ((ImplicitTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 265; plainType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainTypeContext : ParserRuleContext {
		public PlainTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainType; } }
	 
		public PlainTypeContext() { }
		public virtual void CopyFrom(PlainTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayTypeContext : PlainTypeContext {
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ConstExpressionContext[] constExpression() {
			return GetRuleContexts<ConstExpressionContext>();
		}
		public ConstExpressionContext constExpression(int i) {
			return GetRuleContext<ConstExpressionContext>(i);
		}
		public ArrayTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedTypeContext : PlainTypeContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NamedTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : PlainTypeContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public FunctionTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : PlainTypeContext {
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public PointerTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainTypeContext plainType() {
		return plainType(0);
	}

	private PlainTypeContext plainType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PlainTypeContext _localctx = new PlainTypeContext(Context, _parentState);
		PlainTypeContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_plainType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			switch (TokenStream.La(1)) {
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 269; typeName(0);
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 270; funcTypeParameterList();
				State = 271; Match(Lambda);
				State = 272; ownershipType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 290;
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new PointerTypeContext(new PlainTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plainType);
						State = 276;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 277; Match(Asterisk);
						}
						break;
					case 2:
						{
						_localctx = new ArrayTypeContext(new PlainTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plainType);
						State = 278;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 279; Match(LeftBracket);
						State = 280; constExpression();
						State = 285;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 281; Match(Comma);
							State = 282; constExpression();
							}
							}
							State = 287;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 288; Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 308;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295; Match(LeftParen);
				State = 296; funcTypeParameter();
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 297; Match(Comma);
					State = 298; funcTypeParameter();
					}
					}
					State = 303;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 304; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306; Match(LeftParen);
				State = 307; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 310; parameterModifier();
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 316; ownershipType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_constExpression);
		try {
			State = 321;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; Match(StringLiteral);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 320; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 339;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323; Match(Where);
				State = 324; typeParameter();
				State = 325; Match(Colon);
				State = 326; typeParameterConstraint();
				State = 331;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 327; Match(Comma);
					State = 328; typeParameterConstraint();
					}
					}
					State = 333;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; Match(Where);
				State = 335; typeParameter();
				State = 336;
				_la = TokenStream.La(1);
				if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (LeftAngle - 71)) | (1L << (RightAngle - 71)) | (1L << (LessThanOrEqual - 71)) | (1L << (GreaterThanOrEqual - 71)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 337; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeParameterConstraint);
		try {
			State = 346;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 341; Match(New);
				State = 342; Match(LeftParen);
				State = 343; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 344; typeName(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadMethodContext : MemberContext {
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OperatorOverloadMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverloadMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverloadMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverloadMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public PropertyContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 38, RULE_member);
		int _la;
		try {
			int _alt;
			State = 511;
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 348; attribute();
					}
					}
					State = 353;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 354; modifier();
					}
					}
					State = 359;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 360; Match(New);
				State = 362;
				_la = TokenStream.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
					{
					State = 361; identifier();
					}
				}

				State = 364; parameterList();
				State = 366;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 365; constructorInitializer();
					}
				}

				State = 368; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 370; attribute();
					}
					}
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 376; modifier();
					}
					}
					State = 381;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 382; Match(Delete);
				State = 383; parameterList();
				State = 384; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 386; attribute();
					}
					}
					State = 391;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 392; modifier();
					}
					}
					State = 397;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 398; Match(Conversion);
				State = 400;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 399; typeArguments();
					}
				}

				State = 402; parameterList();
				State = 403; Match(Lambda);
				State = 404; ownershipType();
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 405; typeParameterConstraintClause();
					}
					}
					State = 410;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 411; methodBody();
				}
				break;
			case 4:
				_localctx = new OperatorOverloadMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 413; attribute();
					}
					}
					State = 418;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 419; modifier();
					}
					}
					State = 424;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 425; Match(Operator);
				State = 426; overloadableOperator();
				State = 427; parameterList();
				State = 428; Match(Lambda);
				State = 429; ownershipType();
				State = 430; methodBody();
				}
				break;
			case 5:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 432; attribute();
					}
					}
					State = 437;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 438; modifier();
					}
					}
					State = 443;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 444;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 445; identifier();
				State = 448;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 446; Match(Colon);
					State = 447; ownershipType();
					}
				}

				State = 452;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 450; Match(Assign);
					State = 451; expression(0);
					}
				}

				State = 454; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new PropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 456; attribute();
					}
					}
					State = 461;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 462; modifier();
					}
					}
					State = 467;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 468;
				((PropertyContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((PropertyContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 469; identifier();
				State = 471;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 470; typeArguments();
					}
				}

				State = 473; parameterList();
				State = 474; Match(Lambda);
				State = 475; ownershipType();
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 476; typeParameterConstraintClause();
					}
					}
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 482; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 487;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 484; attribute();
						}
						} 
					}
					State = 489;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 490; modifier();
					}
					}
					State = 495;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 496; identifier();
				State = 498;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 497; typeArguments();
					}
				}

				State = 500; parameterList();
				State = 501; Match(Lambda);
				State = 502; ownershipType();
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 503; typeParameterConstraintClause();
					}
					}
					State = 508;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 509; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _parameters = new List<ParameterContext>();
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameterList);
		int _la;
		try {
			State = 526;
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513; Match(LeftParen);
				State = 514; _localctx._parameter = parameter();
				_localctx._parameters.Add(_localctx._parameter);
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 515; Match(Comma);
					State = 516; _localctx._parameter = parameter();
					_localctx._parameters.Add(_localctx._parameter);
					}
					}
					State = 521;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 522; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524; Match(LeftParen);
				State = 525; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameter);
		int _la;
		try {
			State = 550;
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 528; parameterModifier();
					}
					}
					State = 533;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 535;
				_la = TokenStream.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
					{
					State = 534; identifier();
					}
				}

				State = 537; Match(Colon);
				State = 538; ownershipType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 539; parameterModifier();
					}
					}
					State = 544;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 545; Match(This);
				State = 548;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 546; Match(Colon);
					State = 547; Match(Mutable);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 46, RULE_constructorInitializer);
		try {
			State = 566;
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554; Match(Colon);
				State = 555; Match(Base);
				State = 556; Match(LeftParen);
				State = 557; argumentList();
				State = 558; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 560; Match(Colon);
				State = 561; Match(This);
				State = 562; Match(LeftParen);
				State = 563; argumentList();
				State = 564; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 48, RULE_argumentList);
		int _la;
		try {
			State = 577;
			switch (TokenStream.La(1)) {
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568; expression(0);
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 569; Match(Comma);
					State = 570; expression(0);
					}
					}
					State = 575;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodBody);
		int _la;
		try {
			State = 588;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 579; Match(LeftBrace);
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 580; statement();
					}
					}
					State = 585;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 586; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 587; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_overloadableOperator);
		try {
			State = 600;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 590; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 591; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 592; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 593; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 594; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 595; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 596; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 597; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 598; Match(LeftBracket);
				State = 599; Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_statement);
		int _la;
		try {
			State = 670;
			switch (TokenStream.La(1)) {
			case Var:
			case Let:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 602; variableDeclaration();
				State = 603; Match(Semicolon);
				}
				break;
			case Unsafe:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 605; Match(Unsafe);
				State = 606; Match(LeftBrace);
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 607; statement();
					}
					}
					State = 612;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 613; Match(RightBrace);
				}
				break;
			case LeftBrace:
				_localctx = new BlockContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 614; Match(LeftBrace);
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 615; statement();
					}
					}
					State = 620;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 621; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 622; Match(Semicolon);
				}
				break;
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 623; expression(0);
				State = 624; Match(Semicolon);
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 626; Match(Return);
				State = 627; expression(0);
				State = 628; Match(Semicolon);
				}
				break;
			case Throw:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 630; Match(Throw);
				State = 631; expression(0);
				State = 632; Match(Semicolon);
				}
				break;
			case If:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 634; Match(If);
				State = 635; Match(LeftParen);
				State = 636; expression(0);
				State = 637; Match(RightParen);
				State = 638; statement();
				State = 641;
				switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
				case 1:
					{
					State = 639; Match(Else);
					State = 640; statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 643; Match(For);
				State = 644; Match(LeftParen);
				State = 646;
				_la = TokenStream.La(1);
				if (_la==Var || _la==Let) {
					{
					State = 645; variableDeclaration();
					}
				}

				State = 648; Match(Semicolon);
				State = 650;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					State = 649; expression(0);
					}
				}

				State = 652; Match(Semicolon);
				State = 654;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					State = 653; expression(0);
					}
				}

				State = 656; Match(RightParen);
				State = 657; statement();
				}
				break;
			case Foreach:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 658; Match(Foreach);
				State = 659; Match(LeftParen);
				State = 660; variableDeclaration();
				State = 661; Match(In);
				State = 662; expression(0);
				State = 663; Match(RightParen);
				State = 664; statement();
				}
				break;
			case Delete:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 666; Match(Delete);
				State = 667; expression(0);
				State = 668; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			_localctx.kind = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 673; identifier();
			State = 676;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 674; Match(Colon);
				State = 675; ownershipType();
				}
			}

			State = 680;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 678; Match(Assign);
				State = 679; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(AdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public IToken s71;
		public IList<IToken> _ops = new List<IToken>();
		public IToken s72;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 683;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 684; expression(21);
				}
				break;
			case 2:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 685; identifier();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 686; Match(New);
				State = 687; typeName(0);
				State = 690;
				_la = TokenStream.La(1);
				if (_la==Dot) {
					{
					State = 688; Match(Dot);
					State = 689; identifier();
					}
				}

				State = 692; Match(LeftParen);
				State = 693; argumentList();
				State = 694; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 696; Match(New);
				State = 698;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 697; baseTypes();
					}
				}

				State = 700; Match(LeftParen);
				State = 701; argumentList();
				State = 702; Match(RightParen);
				State = 703; Match(LeftBrace);
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 704; member();
					}
					}
					State = 709;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 710; Match(RightBrace);
				}
				break;
			case 5:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 712; Match(NullLiteral);
				}
				break;
			case 6:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 713; Match(This);
				}
				break;
			case 7:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 714; Match(BooleanLiteral);
				}
				break;
			case 8:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 715; Match(IntLiteral);
				}
				break;
			case 9:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 716; Match(Uninitialized);
				}
				break;
			case 10:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 717; Match(StringLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 781;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 779;
					switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 720;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 721;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 722; expression(21);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 723;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 724;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 725; expression(20);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 726;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 731;
						switch (TokenStream.La(1)) {
						case LeftAngle:
							{
							State = 727; ((ShiftExpressionContext)_localctx).s71 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							State = 728; ((ShiftExpressionContext)_localctx).s71 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							}
							break;
						case RightAngle:
							{
							State = 729; ((ShiftExpressionContext)_localctx).s72 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s72);
							State = 730; ((ShiftExpressionContext)_localctx).s72 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s72);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 733; expression(19);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 734;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 735;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (LeftAngle - 71)) | (1L << (RightAngle - 71)) | (1L << (LessThanOrEqual - 71)) | (1L << (GreaterThanOrEqual - 71)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 736; expression(18);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 737;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 738;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 739; expression(17);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 740;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 741; Match(And);
						State = 742; expression(16);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 743;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 744; Match(Xor);
						State = 745; expression(15);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 746;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 747; Match(Or);
						State = 748; expression(14);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 749;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 750; Match(Coalesce);
						State = 751; expression(13);
						}
						break;
					case 10:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 752;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 753; Match(IsNull);
						State = 754; expression(0);
						State = 755; Match(Colon);
						State = 756; expression(11);
						}
						break;
					case 11:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 758;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 759;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (Assign - 96)) | (1L << (AddAssign - 96)) | (1L << (SubtractAssign - 96)) | (1L << (MultiplyAssign - 96)) | (1L << (DivideAssign - 96)) | (1L << (LeftShiftAssign - 96)) | (1L << (RightShiftAssign - 96)) | (1L << (AndAssign - 96)) | (1L << (XorAssign - 96)) | (1L << (OrAssign - 96)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 760; expression(10);
						}
						break;
					case 12:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 761;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 762; Match(Dot);
						State = 763; identifier();
						}
						break;
					case 13:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 764;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 765; Match(Arrow);
						State = 766; identifier();
						}
						break;
					case 14:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 767;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 768; Match(LeftParen);
						State = 769; argumentList();
						State = 770; Match(RightParen);
						}
						break;
					case 15:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 772;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 773; Match(LeftBracket);
						State = 774; argumentList();
						State = 775; Match(RightBracket);
						}
						break;
					case 16:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 777;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 778; Match(IsNull);
						}
						break;
					}
					} 
				}
				State = 783;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 13: return plainType_sempred((PlainTypeContext)_localctx, predIndex);
		case 29: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool plainType_sempred(PlainTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 20);
		case 4: return Precpred(Context, 19);
		case 5: return Precpred(Context, 18);
		case 6: return Precpred(Context, 17);
		case 7: return Precpred(Context, 16);
		case 8: return Precpred(Context, 15);
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 13);
		case 11: return Precpred(Context, 12);
		case 12: return Precpred(Context, 11);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 26);
		case 15: return Precpred(Context, 25);
		case 16: return Precpred(Context, 24);
		case 17: return Precpred(Context, 23);
		case 18: return Precpred(Context, 22);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3n\x313\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\a\x2"+
		"@\n\x2\f\x2\xE\x2\x43\v\x2\x3\x2\a\x2\x46\n\x2\f\x2\xE\x2I\v\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5V\n\x5"+
		"\f\x5\xE\x5Y\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6_\n\x6\f\x6\xE\x6\x62\v"+
		"\x6\x3\x6\a\x6\x65\n\x6\f\x6\xE\x6h\v\x6\x3\x6\x3\x6\x3\x6\a\x6m\n\x6"+
		"\f\x6\xE\x6p\v\x6\x3\x6\a\x6s\n\x6\f\x6\xE\x6v\v\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6{\n\x6\x3\x6\x5\x6~\n\x6\x3\x6\a\x6\x81\n\x6\f\x6\xE\x6\x84\v\x6"+
		"\x3\x6\x3\x6\a\x6\x88\n\x6\f\x6\xE\x6\x8B\v\x6\x3\x6\x3\x6\x3\x6\a\x6"+
		"\x90\n\x6\f\x6\xE\x6\x93\v\x6\x3\x6\a\x6\x96\n\x6\f\x6\xE\x6\x99\v\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x9F\n\x6\x3\x6\x3\x6\x5\x6\xA3\n\x6\x3"+
		"\x6\x3\x6\x5\x6\xA7\n\x6\x3\a\x3\a\x3\a\x5\a\xAC\n\a\x3\b\x3\b\x5\b\xB0"+
		"\n\b\x3\b\x3\b\x3\b\x3\b\a\b\xB6\n\b\f\b\xE\b\xB9\v\b\x5\b\xBB\n\b\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xCA"+
		"\n\t\x3\n\x3\n\x3\n\x3\n\a\n\xD0\n\n\f\n\xE\n\xD3\v\n\x3\n\x3\n\x3\v\x3"+
		"\v\x5\v\xD9\n\v\x3\v\x3\v\x5\v\xDD\n\v\x3\f\x3\f\x3\f\x5\f\xE2\n\f\x3"+
		"\f\x3\f\x3\f\x3\f\x5\f\xE8\n\f\a\f\xEA\n\f\f\f\xE\f\xED\v\f\x3\r\x3\r"+
		"\x3\r\x3\r\a\r\xF3\n\r\f\r\xE\r\xF6\v\r\x3\r\x3\r\x3\xE\x5\xE\xFB\n\xE"+
		"\x3\xE\x3\xE\x3\xE\x5\xE\x100\n\xE\x3\xE\x3\xE\x3\xE\x5\xE\x105\n\xE\x3"+
		"\xE\x3\xE\x3\xE\x5\xE\x10A\n\xE\x3\xE\x5\xE\x10D\n\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x5\xF\x115\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\a\xF\x11E\n\xF\f\xF\xE\xF\x121\v\xF\x3\xF\x3\xF\a\xF\x125\n\xF"+
		"\f\xF\xE\xF\x128\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x12E\n\x10\f\x10"+
		"\xE\x10\x131\v\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x137\n\x10\x3\x11"+
		"\a\x11\x13A\n\x11\f\x11\xE\x11\x13D\v\x11\x3\x11\x3\x11\x3\x12\x3\x12"+
		"\x3\x12\x5\x12\x144\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a"+
		"\x13\x14C\n\x13\f\x13\xE\x13\x14F\v\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x5\x13\x156\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x15D"+
		"\n\x14\x3\x15\a\x15\x160\n\x15\f\x15\xE\x15\x163\v\x15\x3\x15\a\x15\x166"+
		"\n\x15\f\x15\xE\x15\x169\v\x15\x3\x15\x3\x15\x5\x15\x16D\n\x15\x3\x15"+
		"\x3\x15\x5\x15\x171\n\x15\x3\x15\x3\x15\x3\x15\a\x15\x176\n\x15\f\x15"+
		"\xE\x15\x179\v\x15\x3\x15\a\x15\x17C\n\x15\f\x15\xE\x15\x17F\v\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x186\n\x15\f\x15\xE\x15\x189\v"+
		"\x15\x3\x15\a\x15\x18C\n\x15\f\x15\xE\x15\x18F\v\x15\x3\x15\x3\x15\x5"+
		"\x15\x193\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x199\n\x15\f\x15\xE"+
		"\x15\x19C\v\x15\x3\x15\x3\x15\x3\x15\a\x15\x1A1\n\x15\f\x15\xE\x15\x1A4"+
		"\v\x15\x3\x15\a\x15\x1A7\n\x15\f\x15\xE\x15\x1AA\v\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x1B4\n\x15\f\x15\xE\x15"+
		"\x1B7\v\x15\x3\x15\a\x15\x1BA\n\x15\f\x15\xE\x15\x1BD\v\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\x1C3\n\x15\x3\x15\x3\x15\x5\x15\x1C7\n\x15\x3"+
		"\x15\x3\x15\x3\x15\a\x15\x1CC\n\x15\f\x15\xE\x15\x1CF\v\x15\x3\x15\a\x15"+
		"\x1D2\n\x15\f\x15\xE\x15\x1D5\v\x15\x3\x15\x3\x15\x3\x15\x5\x15\x1DA\n"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x1E0\n\x15\f\x15\xE\x15\x1E3\v"+
		"\x15\x3\x15\x3\x15\x3\x15\a\x15\x1E8\n\x15\f\x15\xE\x15\x1EB\v\x15\x3"+
		"\x15\a\x15\x1EE\n\x15\f\x15\xE\x15\x1F1\v\x15\x3\x15\x3\x15\x5\x15\x1F5"+
		"\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x1FB\n\x15\f\x15\xE\x15\x1FE"+
		"\v\x15\x3\x15\x3\x15\x5\x15\x202\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\a\x16"+
		"\x208\n\x16\f\x16\xE\x16\x20B\v\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16"+
		"\x211\n\x16\x3\x17\a\x17\x214\n\x17\f\x17\xE\x17\x217\v\x17\x3\x17\x5"+
		"\x17\x21A\n\x17\x3\x17\x3\x17\x3\x17\a\x17\x21F\n\x17\f\x17\xE\x17\x222"+
		"\v\x17\x3\x17\x3\x17\x3\x17\x5\x17\x227\n\x17\x5\x17\x229\n\x17\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x5\x19\x239\n\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\x23E"+
		"\n\x1A\f\x1A\xE\x1A\x241\v\x1A\x3\x1A\x5\x1A\x244\n\x1A\x3\x1B\x3\x1B"+
		"\a\x1B\x248\n\x1B\f\x1B\xE\x1B\x24B\v\x1B\x3\x1B\x3\x1B\x5\x1B\x24F\n"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x5\x1C\x25B\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D"+
		"\x263\n\x1D\f\x1D\xE\x1D\x266\v\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x26B\n"+
		"\x1D\f\x1D\xE\x1D\x26E\v\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x284\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x289\n\x1D\x3\x1D\x3\x1D\x5\x1D\x28D\n\x1D\x3\x1D\x3\x1D\x5\x1D\x291"+
		"\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2A1\n\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x5\x1E\x2A7\n\x1E\x3\x1E\x3\x1E\x5\x1E\x2AB\n\x1E\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2B5\n\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2BD\n\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\a\x1F\x2C4\n\x1F\f\x1F\xE\x1F\x2C7\v\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2D1\n\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x2DE\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x30E"+
		"\n\x1F\f\x1F\xE\x1F\x311\v\x1F\x3\x1F\x2\x5\x16\x1C< \x2\x4\x6\b\n\f\xE"+
		"\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<\x2\v\x4"+
		"\x2\x33\x33lm\x3\x2\x16\x17\x4\x2IJVW\x3\x2\x18\x19\x6\x2OOQQYZ_\x61\x4"+
		"\x2OO[[\x3\x2YZ\x3\x2TU\x3\x2\x62k\x391\x2\x41\x3\x2\x2\x2\x4L\x3\x2\x2"+
		"\x2\x6P\x3\x2\x2\x2\bR\x3\x2\x2\x2\n\xA6\x3\x2\x2\x2\f\xA8\x3\x2\x2\x2"+
		"\xE\xAD\x3\x2\x2\x2\x10\xC9\x3\x2\x2\x2\x12\xCB\x3\x2\x2\x2\x14\xD6\x3"+
		"\x2\x2\x2\x16\xDE\x3\x2\x2\x2\x18\xEE\x3\x2\x2\x2\x1A\x10C\x3\x2\x2\x2"+
		"\x1C\x114\x3\x2\x2\x2\x1E\x136\x3\x2\x2\x2 \x13B\x3\x2\x2\x2\"\x143\x3"+
		"\x2\x2\x2$\x155\x3\x2\x2\x2&\x15C\x3\x2\x2\x2(\x201\x3\x2\x2\x2*\x210"+
		"\x3\x2\x2\x2,\x228\x3\x2\x2\x2.\x22A\x3\x2\x2\x2\x30\x238\x3\x2\x2\x2"+
		"\x32\x243\x3\x2\x2\x2\x34\x24E\x3\x2\x2\x2\x36\x25A\x3\x2\x2\x2\x38\x2A0"+
		"\x3\x2\x2\x2:\x2A2\x3\x2\x2\x2<\x2D0\x3\x2\x2\x2>@\x5\x4\x3\x2?>\x3\x2"+
		"\x2\x2@\x43\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42G\x3\x2"+
		"\x2\x2\x43\x41\x3\x2\x2\x2\x44\x46\x5\n\x6\x2\x45\x44\x3\x2\x2\x2\x46"+
		"I\x3\x2\x2\x2G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2HJ\x3\x2\x2\x2IG\x3\x2\x2"+
		"\x2JK\a\x2\x2\x3K\x3\x3\x2\x2\x2LM\a\v\x2\x2MN\x5\b\x5\x2NO\a\x41\x2\x2"+
		"O\x5\x3\x2\x2\x2PQ\t\x2\x2\x2Q\a\x3\x2\x2\x2RW\x5\x6\x4\x2ST\a\x43\x2"+
		"\x2TV\x5\x6\x4\x2US\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2"+
		"\x2X\t\x3\x2\x2\x2YW\x3\x2\x2\x2Z[\a\f\x2\x2[\\\x5\b\x5\x2\\`\aG\x2\x2"+
		"]_\x5\x4\x3\x2^]\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2"+
		"\x2\x2\x61\x66\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x65\x5\n\x6\x2\x64\x63"+
		"\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gi\x3"+
		"\x2\x2\x2h\x66\x3\x2\x2\x2ij\aH\x2\x2j\xA7\x3\x2\x2\x2km\x5\f\a\x2lk\x3"+
		"\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2ot\x3\x2\x2\x2pn\x3"+
		"\x2\x2\x2qs\x5\x10\t\x2rq\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3"+
		"\x2\x2\x2uw\x3\x2\x2\x2vt\x3\x2\x2\x2wx\a\r\x2\x2xz\x5\x6\x4\x2y{\x5\x12"+
		"\n\x2zy\x3\x2\x2\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|~\x5\xE\b\x2}|\x3\x2\x2"+
		"\x2}~\x3\x2\x2\x2~\x82\x3\x2\x2\x2\x7F\x81\x5$\x13\x2\x80\x7F\x3\x2\x2"+
		"\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85"+
		"\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x89\aG\x2\x2\x86\x88\x5(\x15\x2\x87"+
		"\x86\x3\x2\x2\x2\x88\x8B\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2"+
		"\x2\x2\x8A\x8C\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8C\x8D\aH\x2\x2\x8D\xA7"+
		"\x3\x2\x2\x2\x8E\x90\x5\f\a\x2\x8F\x8E\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2"+
		"\x91\x8F\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x97\x3\x2\x2\x2\x93\x91\x3"+
		"\x2\x2\x2\x94\x96\x5\x10\t\x2\x95\x94\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2"+
		"\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x9A\x3\x2\x2\x2\x99\x97\x3"+
		"\x2\x2\x2\x9A\x9B\t\x3\x2\x2\x9B\x9E\x5\x6\x4\x2\x9C\x9D\a\x42\x2\x2\x9D"+
		"\x9F\x5\x1A\xE\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA2\x3\x2"+
		"\x2\x2\xA0\xA1\a\x62\x2\x2\xA1\xA3\x5<\x1F\x2\xA2\xA0\x3\x2\x2\x2\xA2"+
		"\xA3\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\a\x41\x2\x2\xA5\xA7\x3\x2"+
		"\x2\x2\xA6Z\x3\x2\x2\x2\xA6n\x3\x2\x2\x2\xA6\x91\x3\x2\x2\x2\xA7\v\x3"+
		"\x2\x2\x2\xA8\xAB\am\x2\x2\xA9\xAA\aM\x2\x2\xAA\xAC\aN\x2\x2\xAB\xA9\x3"+
		"\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\r\x3\x2\x2\x2\xAD\xAF\a\x42\x2\x2\xAE"+
		"\xB0\x5\x16\f\x2\xAF\xAE\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xBA\x3\x2"+
		"\x2\x2\xB1\xB2\a\x42\x2\x2\xB2\xB7\x5\x16\f\x2\xB3\xB4\a\x44\x2\x2\xB4"+
		"\xB6\x5\x16\f\x2\xB5\xB3\x3\x2\x2\x2\xB6\xB9\x3\x2\x2\x2\xB7\xB5\x3\x2"+
		"\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xBA"+
		"\xB1\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xF\x3\x2\x2\x2\xBC\xCA\a\x34"+
		"\x2\x2\xBD\xCA\a\x35\x2\x2\xBE\xCA\a\x36\x2\x2\xBF\xCA\a\x37\x2\x2\xC0"+
		"\xCA\a\x38\x2\x2\xC1\xCA\a\x39\x2\x2\xC2\xCA\a\x1E\x2\x2\xC3\xCA\a(\x2"+
		"\x2\xC4\xCA\a\x31\x2\x2\xC5\xCA\a\x32\x2\x2\xC6\xCA\a&\x2\x2\xC7\xCA\a"+
		"\'\x2\x2\xC8\xCA\a%\x2\x2\xC9\xBC\x3\x2\x2\x2\xC9\xBD\x3\x2\x2\x2\xC9"+
		"\xBE\x3\x2\x2\x2\xC9\xBF\x3\x2\x2\x2\xC9\xC0\x3\x2\x2\x2\xC9\xC1\x3\x2"+
		"\x2\x2\xC9\xC2\x3\x2\x2\x2\xC9\xC3\x3\x2\x2\x2\xC9\xC4\x3\x2\x2\x2\xC9"+
		"\xC5\x3\x2\x2\x2\xC9\xC6\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xC8\x3\x2"+
		"\x2\x2\xCA\x11\x3\x2\x2\x2\xCB\xCC\aI\x2\x2\xCC\xD1\x5\x14\v\x2\xCD\xCE"+
		"\a\x44\x2\x2\xCE\xD0\x5\x14\v\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD3\x3\x2\x2"+
		"\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD4\x3\x2\x2\x2\xD3\xD1"+
		"\x3\x2\x2\x2\xD4\xD5\aJ\x2\x2\xD5\x13\x3\x2\x2\x2\xD6\xD8\x5\x6\x4\x2"+
		"\xD7\xD9\aX\x2\x2\xD8\xD7\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDC\x3\x2"+
		"\x2\x2\xDA\xDB\a\x42\x2\x2\xDB\xDD\x5\x16\f\x2\xDC\xDA\x3\x2\x2\x2\xDC"+
		"\xDD\x3\x2\x2\x2\xDD\x15\x3\x2\x2\x2\xDE\xDF\b\f\x1\x2\xDF\xE1\x5\x6\x4"+
		"\x2\xE0\xE2\x5\x18\r\x2\xE1\xE0\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xEB"+
		"\x3\x2\x2\x2\xE3\xE4\f\x4\x2\x2\xE4\xE5\a\x43\x2\x2\xE5\xE7\x5\x6\x4\x2"+
		"\xE6\xE8\x5\x18\r\x2\xE7\xE6\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xEA\x3"+
		"\x2\x2\x2\xE9\xE3\x3\x2\x2\x2\xEA\xED\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2"+
		"\xEB\xEC\x3\x2\x2\x2\xEC\x17\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE\xEF\a"+
		"I\x2\x2\xEF\xF4\x5\x1A\xE\x2\xF0\xF1\a\x44\x2\x2\xF1\xF3\x5\x1A\xE\x2"+
		"\xF2\xF0\x3\x2\x2\x2\xF3\xF6\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3"+
		"\x2\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF7\xF8\aJ\x2\x2\xF8"+
		"\x19\x3\x2\x2\x2\xF9\xFB\a#\x2\x2\xFA\xF9\x3\x2\x2\x2\xFA\xFB\x3\x2\x2"+
		"\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFD\a;\x2\x2\xFD\x10D\x5\x1C\xF\x2\xFE\x100"+
		"\a#\x2\x2\xFF\xFE\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x101\x3\x2\x2"+
		"\x2\x101\x102\a:\x2\x2\x102\x10D\x5\x1C\xF\x2\x103\x105\a#\x2\x2\x104"+
		"\x103\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\x107"+
		"\a<\x2\x2\x107\x10D\x5\x1C\xF\x2\x108\x10A\a#\x2\x2\x109\x108\x3\x2\x2"+
		"\x2\x109\x10A\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10D\x5\x1C\xF\x2"+
		"\x10C\xFA\x3\x2\x2\x2\x10C\xFF\x3\x2\x2\x2\x10C\x104\x3\x2\x2\x2\x10C"+
		"\x109\x3\x2\x2\x2\x10D\x1B\x3\x2\x2\x2\x10E\x10F\b\xF\x1\x2\x10F\x115"+
		"\x5\x16\f\x2\x110\x111\x5\x1E\x10\x2\x111\x112\a\x46\x2\x2\x112\x113\x5"+
		"\x1A\xE\x2\x113\x115\x3\x2\x2\x2\x114\x10E\x3\x2\x2\x2\x114\x110\x3\x2"+
		"\x2\x2\x115\x126\x3\x2\x2\x2\x116\x117\f\x5\x2\x2\x117\x125\aO\x2\x2\x118"+
		"\x119\f\x4\x2\x2\x119\x11A\aK\x2\x2\x11A\x11F\x5\"\x12\x2\x11B\x11C\a"+
		"\x44\x2\x2\x11C\x11E\x5\"\x12\x2\x11D\x11B\x3\x2\x2\x2\x11E\x121\x3\x2"+
		"\x2\x2\x11F\x11D\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x122\x3\x2\x2"+
		"\x2\x121\x11F\x3\x2\x2\x2\x122\x123\aL\x2\x2\x123\x125\x3\x2\x2\x2\x124"+
		"\x116\x3\x2\x2\x2\x124\x118\x3\x2\x2\x2\x125\x128\x3\x2\x2\x2\x126\x124"+
		"\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x1D\x3\x2\x2\x2\x128\x126\x3\x2"+
		"\x2\x2\x129\x12A\aM\x2\x2\x12A\x12F\x5 \x11\x2\x12B\x12C\a\x44\x2\x2\x12C"+
		"\x12E\x5 \x11\x2\x12D\x12B\x3\x2\x2\x2\x12E\x131\x3\x2\x2\x2\x12F\x12D"+
		"\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x132\x3\x2\x2\x2\x131\x12F\x3"+
		"\x2\x2\x2\x132\x133\aN\x2\x2\x133\x137\x3\x2\x2\x2\x134\x135\aM\x2\x2"+
		"\x135\x137\aN\x2\x2\x136\x129\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2\x137\x1F"+
		"\x3\x2\x2\x2\x138\x13A\x5.\x18\x2\x139\x138\x3\x2\x2\x2\x13A\x13D\x3\x2"+
		"\x2\x2\x13B\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13E\x3\x2\x2"+
		"\x2\x13D\x13B\x3\x2\x2\x2\x13E\x13F\x5\x1A\xE\x2\x13F!\x3\x2\x2\x2\x140"+
		"\x144\a>\x2\x2\x141\x144\a@\x2\x2\x142\x144\x5\x6\x4\x2\x143\x140\x3\x2"+
		"\x2\x2\x143\x141\x3\x2\x2\x2\x143\x142\x3\x2\x2\x2\x144#\x3\x2\x2\x2\x145"+
		"\x146\a\x15\x2\x2\x146\x147\x5\x14\v\x2\x147\x148\a\x42\x2\x2\x148\x14D"+
		"\x5&\x14\x2\x149\x14A\a\x44\x2\x2\x14A\x14C\x5&\x14\x2\x14B\x149\x3\x2"+
		"\x2\x2\x14C\x14F\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2\x2"+
		"\x2\x14E\x156\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x150\x151\a\x15\x2\x2"+
		"\x151\x152\x5\x14\v\x2\x152\x153\t\x4\x2\x2\x153\x154\a>\x2\x2\x154\x156"+
		"\x3\x2\x2\x2\x155\x145\x3\x2\x2\x2\x155\x150\x3\x2\x2\x2\x156%\x3\x2\x2"+
		"\x2\x157\x158\a\xF\x2\x2\x158\x159\aM\x2\x2\x159\x15D\aN\x2\x2\x15A\x15D"+
		"\x5\x16\f\x2\x15B\x15D\x5\x14\v\x2\x15C\x157\x3\x2\x2\x2\x15C\x15A\x3"+
		"\x2\x2\x2\x15C\x15B\x3\x2\x2\x2\x15D\'\x3\x2\x2\x2\x15E\x160\x5\f\a\x2"+
		"\x15F\x15E\x3\x2\x2\x2\x160\x163\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x161"+
		"\x162\x3\x2\x2\x2\x162\x167\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x164\x166"+
		"\x5\x10\t\x2\x165\x164\x3\x2\x2\x2\x166\x169\x3\x2\x2\x2\x167\x165\x3"+
		"\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x16A\x3\x2\x2\x2\x169\x167\x3\x2"+
		"\x2\x2\x16A\x16C\a\xF\x2\x2\x16B\x16D\x5\x6\x4\x2\x16C\x16B\x3\x2\x2\x2"+
		"\x16C\x16D\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x170\x5*\x16\x2\x16F"+
		"\x171\x5\x30\x19\x2\x170\x16F\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x172"+
		"\x3\x2\x2\x2\x172\x173\x5\x34\x1B\x2\x173\x202\x3\x2\x2\x2\x174\x176\x5"+
		"\f\a\x2\x175\x174\x3\x2\x2\x2\x176\x179\x3\x2\x2\x2\x177\x175\x3\x2\x2"+
		"\x2\x177\x178\x3\x2\x2\x2\x178\x17D\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2"+
		"\x17A\x17C\x5\x10\t\x2\x17B\x17A\x3\x2\x2\x2\x17C\x17F\x3\x2\x2\x2\x17D"+
		"\x17B\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\x180\x3\x2\x2\x2\x17F\x17D"+
		"\x3\x2\x2\x2\x180\x181\a\x10\x2\x2\x181\x182\x5*\x16\x2\x182\x183\x5\x34"+
		"\x1B\x2\x183\x202\x3\x2\x2\x2\x184\x186\x5\f\a\x2\x185\x184\x3\x2\x2\x2"+
		"\x186\x189\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188"+
		"\x18D\x3\x2\x2\x2\x189\x187\x3\x2\x2\x2\x18A\x18C\x5\x10\t\x2\x18B\x18A"+
		"\x3\x2\x2\x2\x18C\x18F\x3\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18D\x18E\x3"+
		"\x2\x2\x2\x18E\x190\x3\x2\x2\x2\x18F\x18D\x3\x2\x2\x2\x190\x192\a\x33"+
		"\x2\x2\x191\x193\x5\x18\r\x2\x192\x191\x3\x2\x2\x2\x192\x193\x3\x2\x2"+
		"\x2\x193\x194\x3\x2\x2\x2\x194\x195\x5*\x16\x2\x195\x196\a\x46\x2\x2\x196"+
		"\x19A\x5\x1A\xE\x2\x197\x199\x5$\x13\x2\x198\x197\x3\x2\x2\x2\x199\x19C"+
		"\x3\x2\x2\x2\x19A\x198\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\x19D\x3"+
		"\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19D\x19E\x5\x34\x1B\x2\x19E\x202\x3\x2"+
		"\x2\x2\x19F\x1A1\x5\f\a\x2\x1A0\x19F\x3\x2\x2\x2\x1A1\x1A4\x3\x2\x2\x2"+
		"\x1A2\x1A0\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A8\x3\x2\x2\x2\x1A4"+
		"\x1A2\x3\x2\x2\x2\x1A5\x1A7\x5\x10\t\x2\x1A6\x1A5\x3\x2\x2\x2\x1A7\x1AA"+
		"\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AB\x3"+
		"\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AB\x1AC\a\x11\x2\x2\x1AC\x1AD\x5\x36"+
		"\x1C\x2\x1AD\x1AE\x5*\x16\x2\x1AE\x1AF\a\x46\x2\x2\x1AF\x1B0\x5\x1A\xE"+
		"\x2\x1B0\x1B1\x5\x34\x1B\x2\x1B1\x202\x3\x2\x2\x2\x1B2\x1B4\x5\f\a\x2"+
		"\x1B3\x1B2\x3\x2\x2\x2\x1B4\x1B7\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5"+
		"\x1B6\x3\x2\x2\x2\x1B6\x1BB\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8\x1BA"+
		"\x5\x10\t\x2\x1B9\x1B8\x3\x2\x2\x2\x1BA\x1BD\x3\x2\x2\x2\x1BB\x1B9\x3"+
		"\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BE\x3\x2\x2\x2\x1BD\x1BB\x3\x2"+
		"\x2\x2\x1BE\x1BF\t\x3\x2\x2\x1BF\x1C2\x5\x6\x4\x2\x1C0\x1C1\a\x42\x2\x2"+
		"\x1C1\x1C3\x5\x1A\xE\x2\x1C2\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3"+
		"\x1C6\x3\x2\x2\x2\x1C4\x1C5\a\x62\x2\x2\x1C5\x1C7\x5<\x1F\x2\x1C6\x1C4"+
		"\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8\x1C9\a\x41"+
		"\x2\x2\x1C9\x202\x3\x2\x2\x2\x1CA\x1CC\x5\f\a\x2\x1CB\x1CA\x3\x2\x2\x2"+
		"\x1CC\x1CF\x3\x2\x2\x2\x1CD\x1CB\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE"+
		"\x1D3\x3\x2\x2\x2\x1CF\x1CD\x3\x2\x2\x2\x1D0\x1D2\x5\x10\t\x2\x1D1\x1D0"+
		"\x3\x2\x2\x2\x1D2\x1D5\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3"+
		"\x2\x2\x2\x1D4\x1D6\x3\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D6\x1D7\t\x5\x2"+
		"\x2\x1D7\x1D9\x5\x6\x4\x2\x1D8\x1DA\x5\x18\r\x2\x1D9\x1D8\x3\x2\x2\x2"+
		"\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\x5*\x16\x2\x1DC"+
		"\x1DD\a\x46\x2\x2\x1DD\x1E1\x5\x1A\xE\x2\x1DE\x1E0\x5$\x13\x2\x1DF\x1DE"+
		"\x3\x2\x2\x2\x1E0\x1E3\x3\x2\x2\x2\x1E1\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3"+
		"\x2\x2\x2\x1E2\x1E4\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2\x1E4\x1E5\x5\x34"+
		"\x1B\x2\x1E5\x202\x3\x2\x2\x2\x1E6\x1E8\x5\f\a\x2\x1E7\x1E6\x3\x2\x2\x2"+
		"\x1E8\x1EB\x3\x2\x2\x2\x1E9\x1E7\x3\x2\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA"+
		"\x1EF\x3\x2\x2\x2\x1EB\x1E9\x3\x2\x2\x2\x1EC\x1EE\x5\x10\t\x2\x1ED\x1EC"+
		"\x3\x2\x2\x2\x1EE\x1F1\x3\x2\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1EF\x1F0\x3"+
		"\x2\x2\x2\x1F0\x1F2\x3\x2\x2\x2\x1F1\x1EF\x3\x2\x2\x2\x1F2\x1F4\x5\x6"+
		"\x4\x2\x1F3\x1F5\x5\x18\r\x2\x1F4\x1F3\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2"+
		"\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6\x1F7\x5*\x16\x2\x1F7\x1F8\a\x46\x2\x2\x1F8"+
		"\x1FC\x5\x1A\xE\x2\x1F9\x1FB\x5$\x13\x2\x1FA\x1F9\x3\x2\x2\x2\x1FB\x1FE"+
		"\x3\x2\x2\x2\x1FC\x1FA\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FF\x3"+
		"\x2\x2\x2\x1FE\x1FC\x3\x2\x2\x2\x1FF\x200\x5\x34\x1B\x2\x200\x202\x3\x2"+
		"\x2\x2\x201\x161\x3\x2\x2\x2\x201\x177\x3\x2\x2\x2\x201\x187\x3\x2\x2"+
		"\x2\x201\x1A2\x3\x2\x2\x2\x201\x1B5\x3\x2\x2\x2\x201\x1CD\x3\x2\x2\x2"+
		"\x201\x1E9\x3\x2\x2\x2\x202)\x3\x2\x2\x2\x203\x204\aM\x2\x2\x204\x209"+
		"\x5,\x17\x2\x205\x206\a\x44\x2\x2\x206\x208\x5,\x17\x2\x207\x205\x3\x2"+
		"\x2\x2\x208\x20B\x3\x2\x2\x2\x209\x207\x3\x2\x2\x2\x209\x20A\x3\x2\x2"+
		"\x2\x20A\x20C\x3\x2\x2\x2\x20B\x209\x3\x2\x2\x2\x20C\x20D\aN\x2\x2\x20D"+
		"\x211\x3\x2\x2\x2\x20E\x20F\aM\x2\x2\x20F\x211\aN\x2\x2\x210\x203\x3\x2"+
		"\x2\x2\x210\x20E\x3\x2\x2\x2\x211+\x3\x2\x2\x2\x212\x214\x5.\x18\x2\x213"+
		"\x212\x3\x2\x2\x2\x214\x217\x3\x2\x2\x2\x215\x213\x3\x2\x2\x2\x215\x216"+
		"\x3\x2\x2\x2\x216\x219\x3\x2\x2\x2\x217\x215\x3\x2\x2\x2\x218\x21A\x5"+
		"\x6\x4\x2\x219\x218\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A\x21B\x3\x2"+
		"\x2\x2\x21B\x21C\a\x42\x2\x2\x21C\x229\x5\x1A\xE\x2\x21D\x21F\x5.\x18"+
		"\x2\x21E\x21D\x3\x2\x2\x2\x21F\x222\x3\x2\x2\x2\x220\x21E\x3\x2\x2\x2"+
		"\x220\x221\x3\x2\x2\x2\x221\x223\x3\x2\x2\x2\x222\x220\x3\x2\x2\x2\x223"+
		"\x226\a\x12\x2\x2\x224\x225\a\x42\x2\x2\x225\x227\a;\x2\x2\x226\x224\x3"+
		"\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x229\x3\x2\x2\x2\x228\x215\x3\x2"+
		"\x2\x2\x228\x220\x3\x2\x2\x2\x229-\x3\x2\x2\x2\x22A\x22B\a\x1F\x2\x2\x22B"+
		"/\x3\x2\x2\x2\x22C\x22D\a\x42\x2\x2\x22D\x22E\a$\x2\x2\x22E\x22F\aM\x2"+
		"\x2\x22F\x230\x5\x32\x1A\x2\x230\x231\aN\x2\x2\x231\x239\x3\x2\x2\x2\x232"+
		"\x233\a\x42\x2\x2\x233\x234\a\x12\x2\x2\x234\x235\aM\x2\x2\x235\x236\x5"+
		"\x32\x1A\x2\x236\x237\aN\x2\x2\x237\x239\x3\x2\x2\x2\x238\x22C\x3\x2\x2"+
		"\x2\x238\x232\x3\x2\x2\x2\x239\x31\x3\x2\x2\x2\x23A\x23F\x5<\x1F\x2\x23B"+
		"\x23C\a\x44\x2\x2\x23C\x23E\x5<\x1F\x2\x23D\x23B\x3\x2\x2\x2\x23E\x241"+
		"\x3\x2\x2\x2\x23F\x23D\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x244\x3"+
		"\x2\x2\x2\x241\x23F\x3\x2\x2\x2\x242\x244\x3\x2\x2\x2\x243\x23A\x3\x2"+
		"\x2\x2\x243\x242\x3\x2\x2\x2\x244\x33\x3\x2\x2\x2\x245\x249\aG\x2\x2\x246"+
		"\x248\x5\x38\x1D\x2\x247\x246\x3\x2\x2\x2\x248\x24B\x3\x2\x2\x2\x249\x247"+
		"\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\x24C\x3\x2\x2\x2\x24B\x249\x3"+
		"\x2\x2\x2\x24C\x24F\aH\x2\x2\x24D\x24F\a\x41\x2\x2\x24E\x245\x3\x2\x2"+
		"\x2\x24E\x24D\x3\x2\x2\x2\x24F\x35\x3\x2\x2\x2\x250\x25B\aO\x2\x2\x251"+
		"\x25B\aQ\x2\x2\x252\x25B\a^\x2\x2\x253\x25B\a\\\x2\x2\x254\x25B\a]\x2"+
		"\x2\x255\x25B\aS\x2\x2\x256\x25B\aR\x2\x2\x257\x25B\a\x43\x2\x2\x258\x259"+
		"\aK\x2\x2\x259\x25B\aL\x2\x2\x25A\x250\x3\x2\x2\x2\x25A\x251\x3\x2\x2"+
		"\x2\x25A\x252\x3\x2\x2\x2\x25A\x253\x3\x2\x2\x2\x25A\x254\x3\x2\x2\x2"+
		"\x25A\x255\x3\x2\x2\x2\x25A\x256\x3\x2\x2\x2\x25A\x257\x3\x2\x2\x2\x25A"+
		"\x258\x3\x2\x2\x2\x25B\x37\x3\x2\x2\x2\x25C\x25D\x5:\x1E\x2\x25D\x25E"+
		"\a\x41\x2\x2\x25E\x2A1\x3\x2\x2\x2\x25F\x260\a\x39\x2\x2\x260\x264\aG"+
		"\x2\x2\x261\x263\x5\x38\x1D\x2\x262\x261\x3\x2\x2\x2\x263\x266\x3\x2\x2"+
		"\x2\x264\x262\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x267\x3\x2\x2\x2"+
		"\x266\x264\x3\x2\x2\x2\x267\x2A1\aH\x2\x2\x268\x26C\aG\x2\x2\x269\x26B"+
		"\x5\x38\x1D\x2\x26A\x269\x3\x2\x2\x2\x26B\x26E\x3\x2\x2\x2\x26C\x26A\x3"+
		"\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x26F\x3\x2\x2\x2\x26E\x26C\x3\x2"+
		"\x2\x2\x26F\x2A1\aH\x2\x2\x270\x2A1\a\x41\x2\x2\x271\x272\x5<\x1F\x2\x272"+
		"\x273\a\x41\x2\x2\x273\x2A1\x3\x2\x2\x2\x274\x275\a\x13\x2\x2\x275\x276"+
		"\x5<\x1F\x2\x276\x277\a\x41\x2\x2\x277\x2A1\x3\x2\x2\x2\x278\x279\a\x30"+
		"\x2\x2\x279\x27A\x5<\x1F\x2\x27A\x27B\a\x41\x2\x2\x27B\x2A1\x3\x2\x2\x2"+
		"\x27C\x27D\a\x1C\x2\x2\x27D\x27E\aM\x2\x2\x27E\x27F\x5<\x1F\x2\x27F\x280"+
		"\aN\x2\x2\x280\x283\x5\x38\x1D\x2\x281\x282\a\x1D\x2\x2\x282\x284\x5\x38"+
		"\x1D\x2\x283\x281\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x2A1\x3\x2\x2"+
		"\x2\x285\x286\a \x2\x2\x286\x288\aM\x2\x2\x287\x289\x5:\x1E\x2\x288\x287"+
		"\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x28C\a\x41"+
		"\x2\x2\x28B\x28D\x5<\x1F\x2\x28C\x28B\x3\x2\x2\x2\x28C\x28D\x3\x2\x2\x2"+
		"\x28D\x28E\x3\x2\x2\x2\x28E\x290\a\x41\x2\x2\x28F\x291\x5<\x1F\x2\x290"+
		"\x28F\x3\x2\x2\x2\x290\x291\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2\x292\x293"+
		"\aN\x2\x2\x293\x2A1\x5\x38\x1D\x2\x294\x295\a!\x2\x2\x295\x296\aM\x2\x2"+
		"\x296\x297\x5:\x1E\x2\x297\x298\a\"\x2\x2\x298\x299\x5<\x1F\x2\x299\x29A"+
		"\aN\x2\x2\x29A\x29B\x5\x38\x1D\x2\x29B\x2A1\x3\x2\x2\x2\x29C\x29D\a\x10"+
		"\x2\x2\x29D\x29E\x5<\x1F\x2\x29E\x29F\a\x41\x2\x2\x29F\x2A1\x3\x2\x2\x2"+
		"\x2A0\x25C\x3\x2\x2\x2\x2A0\x25F\x3\x2\x2\x2\x2A0\x268\x3\x2\x2\x2\x2A0"+
		"\x270\x3\x2\x2\x2\x2A0\x271\x3\x2\x2\x2\x2A0\x274\x3\x2\x2\x2\x2A0\x278"+
		"\x3\x2\x2\x2\x2A0\x27C\x3\x2\x2\x2\x2A0\x285\x3\x2\x2\x2\x2A0\x294\x3"+
		"\x2\x2\x2\x2A0\x29C\x3\x2\x2\x2\x2A1\x39\x3\x2\x2\x2\x2A2\x2A3\t\x3\x2"+
		"\x2\x2A3\x2A6\x5\x6\x4\x2\x2A4\x2A5\a\x42\x2\x2\x2A5\x2A7\x5\x1A\xE\x2"+
		"\x2A6\x2A4\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2AA\x3\x2\x2\x2\x2A8"+
		"\x2A9\a\x62\x2\x2\x2A9\x2AB\x5<\x1F\x2\x2AA\x2A8\x3\x2\x2\x2\x2AA\x2AB"+
		"\x3\x2\x2\x2\x2AB;\x3\x2\x2\x2\x2AC\x2AD\b\x1F\x1\x2\x2AD\x2AE\t\x6\x2"+
		"\x2\x2AE\x2D1\x5<\x1F\x17\x2AF\x2D1\x5\x6\x4\x2\x2B0\x2B1\a\xF\x2\x2\x2B1"+
		"\x2B4\x5\x16\f\x2\x2B2\x2B3\a\x43\x2\x2\x2B3\x2B5\x5\x6\x4\x2\x2B4\x2B2"+
		"\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2B7\aM"+
		"\x2\x2\x2B7\x2B8\x5\x32\x1A\x2\x2B8\x2B9\aN\x2\x2\x2B9\x2D1\x3\x2\x2\x2"+
		"\x2BA\x2BC\a\xF\x2\x2\x2BB\x2BD\x5\xE\b\x2\x2BC\x2BB\x3\x2\x2\x2\x2BC"+
		"\x2BD\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2BF\aM\x2\x2\x2BF\x2C0\x5"+
		"\x32\x1A\x2\x2C0\x2C1\aN\x2\x2\x2C1\x2C5\aG\x2\x2\x2C2\x2C4\x5(\x15\x2"+
		"\x2C3\x2C2\x3\x2\x2\x2\x2C4\x2C7\x3\x2\x2\x2\x2C5\x2C3\x3\x2\x2\x2\x2C5"+
		"\x2C6\x3\x2\x2\x2\x2C6\x2C8\x3\x2\x2\x2\x2C7\x2C5\x3\x2\x2\x2\x2C8\x2C9"+
		"\aH\x2\x2\x2C9\x2D1\x3\x2\x2\x2\x2CA\x2D1\a?\x2\x2\x2CB\x2D1\a\x12\x2"+
		"\x2\x2CC\x2D1\a=\x2\x2\x2CD\x2D1\a>\x2\x2\x2CE\x2D1\a\x14\x2\x2\x2CF\x2D1"+
		"\a@\x2\x2\x2D0\x2AC\x3\x2\x2\x2\x2D0\x2AF\x3\x2\x2\x2\x2D0\x2B0\x3\x2"+
		"\x2\x2\x2D0\x2BA\x3\x2\x2\x2\x2D0\x2CA\x3\x2\x2\x2\x2D0\x2CB\x3\x2\x2"+
		"\x2\x2D0\x2CC\x3\x2\x2\x2\x2D0\x2CD\x3\x2\x2\x2\x2D0\x2CE\x3\x2\x2\x2"+
		"\x2D0\x2CF\x3\x2\x2\x2\x2D1\x30F\x3\x2\x2\x2\x2D2\x2D3\f\x16\x2\x2\x2D3"+
		"\x2D4\t\a\x2\x2\x2D4\x30E\x5<\x1F\x17\x2D5\x2D6\f\x15\x2\x2\x2D6\x2D7"+
		"\t\b\x2\x2\x2D7\x30E\x5<\x1F\x16\x2D8\x2DD\f\x14\x2\x2\x2D9\x2DA\aI\x2"+
		"\x2\x2DA\x2DE\aI\x2\x2\x2DB\x2DC\aJ\x2\x2\x2DC\x2DE\aJ\x2\x2\x2DD\x2D9"+
		"\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DE\x2DF\x3\x2\x2\x2\x2DF\x30E\x5"+
		"<\x1F\x15\x2E0\x2E1\f\x13\x2\x2\x2E1\x2E2\t\x4\x2\x2\x2E2\x30E\x5<\x1F"+
		"\x14\x2E3\x2E4\f\x12\x2\x2\x2E4\x2E5\t\t\x2\x2\x2E5\x30E\x5<\x1F\x13\x2E6"+
		"\x2E7\f\x11\x2\x2\x2E7\x2E8\a\\\x2\x2\x2E8\x30E\x5<\x1F\x12\x2E9\x2EA"+
		"\f\x10\x2\x2\x2EA\x2EB\a]\x2\x2\x2EB\x30E\x5<\x1F\x11\x2EC\x2ED\f\xF\x2"+
		"\x2\x2ED\x2EE\a^\x2\x2\x2EE\x30E\x5<\x1F\x10\x2EF\x2F0\f\xE\x2\x2\x2F0"+
		"\x2F1\aR\x2\x2\x2F1\x30E\x5<\x1F\xF\x2F2\x2F3\f\r\x2\x2\x2F3\x2F4\aS\x2"+
		"\x2\x2F4\x2F5\x5<\x1F\x2\x2F5\x2F6\a\x42\x2\x2\x2F6\x2F7\x5<\x1F\r\x2F7"+
		"\x30E\x3\x2\x2\x2\x2F8\x2F9\f\f\x2\x2\x2F9\x2FA\t\n\x2\x2\x2FA\x30E\x5"+
		"<\x1F\f\x2FB\x2FC\f\x1C\x2\x2\x2FC\x2FD\a\x43\x2\x2\x2FD\x30E\x5\x6\x4"+
		"\x2\x2FE\x2FF\f\x1B\x2\x2\x2FF\x300\a\x45\x2\x2\x300\x30E\x5\x6\x4\x2"+
		"\x301\x302\f\x1A\x2\x2\x302\x303\aM\x2\x2\x303\x304\x5\x32\x1A\x2\x304"+
		"\x305\aN\x2\x2\x305\x30E\x3\x2\x2\x2\x306\x307\f\x19\x2\x2\x307\x308\a"+
		"K\x2\x2\x308\x309\x5\x32\x1A\x2\x309\x30A\aL\x2\x2\x30A\x30E\x3\x2\x2"+
		"\x2\x30B\x30C\f\x18\x2\x2\x30C\x30E\aS\x2\x2\x30D\x2D2\x3\x2\x2\x2\x30D"+
		"\x2D5\x3\x2\x2\x2\x30D\x2D8\x3\x2\x2\x2\x30D\x2E0\x3\x2\x2\x2\x30D\x2E3"+
		"\x3\x2\x2\x2\x30D\x2E6\x3\x2\x2\x2\x30D\x2E9\x3\x2\x2\x2\x30D\x2EC\x3"+
		"\x2\x2\x2\x30D\x2EF\x3\x2\x2\x2\x30D\x2F2\x3\x2\x2\x2\x30D\x2F8\x3\x2"+
		"\x2\x2\x30D\x2FB\x3\x2\x2\x2\x30D\x2FE\x3\x2\x2\x2\x30D\x301\x3\x2\x2"+
		"\x2\x30D\x306\x3\x2\x2\x2\x30D\x30B\x3\x2\x2\x2\x30E\x311\x3\x2\x2\x2"+
		"\x30F\x30D\x3\x2\x2\x2\x30F\x310\x3\x2\x2\x2\x310=\x3\x2\x2\x2\x311\x30F"+
		"\x3\x2\x2\x2\x64\x41GW`\x66ntz}\x82\x89\x91\x97\x9E\xA2\xA6\xAB\xAF\xB7"+
		"\xBA\xC9\xD1\xD8\xDC\xE1\xE7\xEB\xF4\xFA\xFF\x104\x109\x10C\x114\x11F"+
		"\x124\x126\x12F\x136\x13B\x143\x14D\x155\x15C\x161\x167\x16C\x170\x177"+
		"\x17D\x187\x18D\x192\x19A\x1A2\x1A8\x1B5\x1BB\x1C2\x1C6\x1CD\x1D3\x1D9"+
		"\x1E1\x1E9\x1EF\x1F4\x1FC\x201\x209\x210\x215\x219\x220\x226\x228\x238"+
		"\x23F\x243\x249\x24E\x25A\x264\x26C\x283\x288\x28C\x290\x2A0\x2A6\x2AA"+
		"\x2B4\x2BC\x2C5\x2D0\x2DD\x30D\x30F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Compiler.Antlr
