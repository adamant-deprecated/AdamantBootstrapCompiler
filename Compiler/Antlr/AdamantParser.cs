//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AdamantParser : Parser {
	public const int
		SingleLineDocComment=1, BlockDocComment=2, SingleLineComment=3, BlockComment=4, 
		PreprocessorLine=5, Whitespace=6, Newline=7, PreprocessorSkippedSection=8, 
		Using=9, Namespace=10, Class=11, Enum=12, New=13, Delete=14, Operator=15, 
		This=16, Return=17, Uninitialized=18, Where=19, Var=20, Let=21, Static=22, 
		Get=23, Set=24, Do=25, While=26, If=27, Else=28, Abstract=29, Params=30, 
		For=31, Foreach=32, In=33, Ref=34, Base=35, Const=36, Sealed=37, Override=38, 
		Partial=39, Yield=40, Switch=41, Break=42, Continue=43, Try=44, Catch=45, 
		Finally=46, Throw=47, Implicit=48, Explicit=49, Conversion=50, Public=51, 
		Private=52, Protected=53, Package=54, Safe=55, Unsafe=56, Own=57, Mutable=58, 
		BooleanLiteral=59, IntLiteral=60, NullLiteral=61, StringLiteral=62, Semicolon=63, 
		Colon=64, Dot=65, Comma=66, Arrow=67, Lambda=68, LeftBrace=69, RightBrace=70, 
		LeftAngle=71, RightAngle=72, LeftBracket=73, RightBracket=74, LeftParen=75, 
		RightParen=76, Asterisk=77, AtSign=78, AddressOf=79, Coalesce=80, IsNull=81, 
		Equal=82, NotEqual=83, LessThanOrEqual=84, GreaterThanOrEqual=85, TypeList=86, 
		Plus=87, Minus=88, Divide=89, And=90, Xor=91, Or=92, Not=93, Increment=94, 
		Decrement=95, Assign=96, AddAssign=97, SubtractAssign=98, MultiplyAssign=99, 
		DivideAssign=100, LeftShiftAssign=101, RightShiftAssign=102, AndAssign=103, 
		XorAssign=104, OrAssign=105, Identifier=106, EscapedIdentifier=107, Unknown=108;
	public const int
		RULE_compilationUnit = 0, RULE_usingStatement = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_attribute = 5, RULE_modifier = 6, 
		RULE_typeParameterList = 7, RULE_typeParameter = 8, RULE_typeBase = 9, 
		RULE_typeName = 10, RULE_typeArguments = 11, RULE_type = 12, RULE_funcTypeParameterList = 13, 
		RULE_funcTypeParameter = 14, RULE_constExpression = 15, RULE_typeParameterConstraintClause = 16, 
		RULE_typeParameterConstraint = 17, RULE_typeMember = 18, RULE_parameterList = 19, 
		RULE_parameter = 20, RULE_parameterModifier = 21, RULE_constructor = 22, 
		RULE_constructorInitializer = 23, RULE_argumentList = 24, RULE_destructor = 25, 
		RULE_method = 26, RULE_operatorOverload = 27, RULE_conversionMethod = 28, 
		RULE_property = 29, RULE_methodBody = 30, RULE_overloadableOperator = 31, 
		RULE_field = 32, RULE_statement = 33, RULE_variableDeclaration = 34, RULE_letDeclaration = 35, 
		RULE_expression = 36;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingStatement", "identifier", "namespaceName", "declaration", 
		"attribute", "modifier", "typeParameterList", "typeParameter", "typeBase", 
		"typeName", "typeArguments", "type", "funcTypeParameterList", "funcTypeParameter", 
		"constExpression", "typeParameterConstraintClause", "typeParameterConstraint", 
		"typeMember", "parameterList", "parameter", "parameterModifier", "constructor", 
		"constructorInitializer", "argumentList", "destructor", "method", "operatorOverload", 
		"conversionMethod", "property", "methodBody", "overloadableOperator", 
		"field", "statement", "variableDeclaration", "letDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'operator'", "'this'", "'return'", 
		"'uninitialized'", "'where'", "'var'", "'let'", "'static'", "'get'", "'set'", 
		"'do'", "'while'", "'if'", "'else'", "'abstract'", "'params'", "'for'", 
		"'foreach'", "'in'", "'ref'", "'base'", "'const'", "'sealed'", "'override'", 
		"'partial'", "'yeild'", "'switch'", "'break'", "'continue'", "'try'", 
		"'catch'", "'finally'", "'throw'", "'implicit'", "'explicit'", "'conversion'", 
		"'public'", "'private'", "'protected'", "'package'", "'safe'", "'unsafe'", 
		"'own'", "'mut'", null, null, "'null'", null, "';'", "':'", "'.'", "','", 
		"'->'", "'=>'", "'{'", "'}'", "'<'", "'>'", "'['", "']'", "'('", "')'", 
		"'*'", "'@'", "'&'", "'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", "'...'", 
		"'+'", "'-'", "'/'", "'and'", "'xor'", "'or'", "'not'", "'++'", "'--'", 
		"'='", "'+='", "'-='", "'*='", "'/='", "'<<='", "'>>='", "'and='", "'xor='", 
		"'or='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "BlockDocComment", "SingleLineComment", 
		"BlockComment", "PreprocessorLine", "Whitespace", "Newline", "PreprocessorSkippedSection", 
		"Using", "Namespace", "Class", "Enum", "New", "Delete", "Operator", "This", 
		"Return", "Uninitialized", "Where", "Var", "Let", "Static", "Get", "Set", 
		"Do", "While", "If", "Else", "Abstract", "Params", "For", "Foreach", "In", 
		"Ref", "Base", "Const", "Sealed", "Override", "Partial", "Yield", "Switch", 
		"Break", "Continue", "Try", "Catch", "Finally", "Throw", "Implicit", "Explicit", 
		"Conversion", "Public", "Private", "Protected", "Package", "Safe", "Unsafe", 
		"Own", "Mutable", "BooleanLiteral", "IntLiteral", "NullLiteral", "StringLiteral", 
		"Semicolon", "Colon", "Dot", "Comma", "Arrow", "Lambda", "LeftBrace", 
		"RightBrace", "LeftAngle", "RightAngle", "LeftBracket", "RightBracket", 
		"LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", "Coalesce", 
		"IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "And", "Xor", "Or", "Not", "Increment", 
		"Decrement", "Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", 
		"DivideAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Identifier", "EscapedIdentifier", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AdamantParser.Eof, 0); }
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 74; usingStatement();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
				{
				{
				State = 80; declaration();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 86; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStatementContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingStatementContext usingStatement() {
		UsingStatementContext _localctx = new UsingStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(Using);
			State = 89; namespaceName();
			State = 90; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(AdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_la = TokenStream.La(1);
			if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; identifier();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 95; Match(Dot);
				State = 96; identifier();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeBaseContext typeBase() {
			return GetRuleContext<TypeBaseContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public TypeMemberContext[] typeMember() {
			return GetRuleContexts<TypeMemberContext>();
		}
		public TypeMemberContext typeMember(int i) {
			return GetRuleContext<TypeMemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			State = 178;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; Match(Namespace);
				State = 103; namespaceName();
				State = 104; Match(LeftBrace);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 105; usingStatement();
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 111; declaration();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 117; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 119; attribute();
					}
					}
					State = 124;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 125; modifier();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 131; Match(Class);
				State = 132; identifier();
				State = 134;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 133; typeParameterList();
					}
				}

				State = 137;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 136; typeBase();
					}
				}

				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 139; typeParameterConstraintClause();
					}
					}
					State = 144;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 145; Match(LeftBrace);
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Static) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 146; typeMember();
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 152; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new GlobalDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 154; attribute();
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 160; modifier();
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 166;
				((GlobalDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((GlobalDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 167; identifier();
				State = 170;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 168; Match(Colon);
					State = 169; type(0);
					}
				}

				State = 174;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 172; Match(Assign);
					State = 173; expression(0);
					}
				}

				State = 176; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(EscapedIdentifier);
			State = 183;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 181; Match(LeftParen);
				State = 182; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken Symbol;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_modifier);
		try {
			State = 199;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; _localctx.Symbol = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; _localctx.Symbol = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187; _localctx.Symbol = Match(Protected);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 4);
				{
				State = 188; _localctx.Symbol = Match(Package);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 189; _localctx.Symbol = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 190; _localctx.Symbol = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 191; _localctx.Symbol = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 192; _localctx.Symbol = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 193; _localctx.Symbol = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 194; _localctx.Symbol = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 195; _localctx.Symbol = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 196; _localctx.Symbol = Match(Override);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 13);
				{
				State = 197; _localctx.Symbol = Match(Static);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 14);
				{
				State = 198; _localctx.Symbol = Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(LeftAngle);
			State = 202; typeParameter();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 203; Match(Comma);
				State = 204; typeParameter();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 210; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; identifier();
			State = 214;
			_la = TokenStream.La(1);
			if (_la==TypeList) {
				{
				State = 213; Match(TypeList);
				}
			}

			State = 218;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 216; Match(Colon);
				State = 217; typeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBaseContext : ParserRuleContext {
		public TypeNameContext baseType;
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _interfaces = new List<TypeNameContext>();
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public TypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBaseContext typeBase() {
		TypeBaseContext _localctx = new TypeBaseContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(Colon);
			State = 222;
			_la = TokenStream.La(1);
			if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) {
				{
				State = 221; _localctx.baseType = typeName();
				}
			}

			State = 233;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 224; Match(Colon);
				State = 225; _localctx._typeName = typeName();
				_localctx._interfaces.Add(_localctx._typeName);
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 226; Match(Comma);
					State = 227; _localctx._typeName = typeName();
					_localctx._interfaces.Add(_localctx._typeName);
					}
					}
					State = 232;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; identifier();
			State = 237;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 236; typeArguments();
				}
				break;
			}
			State = 246;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 239; Match(Dot);
					State = 240; identifier();
					State = 242;
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 241; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 248;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(LeftAngle);
			State = 250; type(0);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 251; Match(Comma);
				State = 252; type(0);
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 258; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ConstExpressionContext[] constExpression() {
			return GetRuleContexts<ConstExpressionContext>();
		}
		public ConstExpressionContext constExpression(int i) {
			return GetRuleContext<ConstExpressionContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			switch (TokenStream.La(1)) {
			case Mutable:
				{
				State = 261; Match(Mutable);
				State = 262; type(4);
				}
				break;
			case Own:
				{
				State = 263; Match(Own);
				State = 264; type(3);
				}
				break;
			case Ref:
				{
				State = 265; Match(Ref);
				State = 266; type(2);
				}
				break;
			case LeftParen:
				{
				State = 267; funcTypeParameterList();
				State = 268; Match(Lambda);
				State = 269; type(1);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				{
				State = 271; typeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 288;
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 274;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 275; Match(Asterisk);
						}
						break;
					case 2:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 276;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 277; Match(LeftBracket);
						State = 278; constExpression();
						State = 283;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 279; Match(Comma);
							State = 280; constExpression();
							}
							}
							State = 285;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 286; Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 26, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 306;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293; Match(LeftParen);
				State = 294; funcTypeParameter();
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 295; Match(Comma);
					State = 296; funcTypeParameter();
					}
					}
					State = 301;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 302; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304; Match(LeftParen);
				State = 305; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_funcTypeParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 308; parameterModifier();
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 314; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_constExpression);
		try {
			State = 319;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317; Match(StringLiteral);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 337;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321; Match(Where);
				State = 322; typeParameter();
				State = 323; Match(Colon);
				State = 324; typeParameterConstraint();
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 325; Match(Comma);
					State = 326; typeParameterConstraint();
					}
					}
					State = 331;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332; Match(Where);
				State = 333; typeParameter();
				State = 334;
				_la = TokenStream.La(1);
				if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (LeftAngle - 71)) | (1L << (RightAngle - 71)) | (1L << (LessThanOrEqual - 71)) | (1L << (GreaterThanOrEqual - 71)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 335; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameterConstraint);
		try {
			State = 344;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 339; Match(New);
				State = 340; Match(LeftParen);
				State = 341; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 342; typeName();
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 343; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberContext : ParserRuleContext {
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public ConversionMethodContext conversionMethod() {
			return GetRuleContext<ConversionMethodContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public OperatorOverloadContext operatorOverload() {
			return GetRuleContext<OperatorOverloadContext>(0);
		}
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public TypeMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberContext typeMember() {
		TypeMemberContext _localctx = new TypeMemberContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeMember);
		try {
			State = 353;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346; constructor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; destructor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 348; conversionMethod();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 349; method();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 350; operatorOverload();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 351; field();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 352; property();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameterList);
		int _la;
		try {
			State = 368;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355; Match(LeftParen);
				State = 356; parameter();
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 357; Match(Comma);
					State = 358; parameter();
					}
					}
					State = 363;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 364; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 366; Match(LeftParen);
				State = 367; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameter);
		int _la;
		try {
			State = 388;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) {
					{
					{
					State = 370; parameterModifier();
					}
					}
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 377;
				_la = TokenStream.La(1);
				if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) {
					{
					State = 376; identifier();
					}
				}

				State = 379; Match(Colon);
				State = 380; type(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) {
					{
					{
					State = 381; parameterModifier();
					}
					}
					State = 386;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 387; Match(This);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameterModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 44, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 392; attribute();
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 398; modifier();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 404; Match(New);
			State = 406;
			_la = TokenStream.La(1);
			if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) {
				{
				State = 405; identifier();
				}
			}

			State = 408; parameterList();
			State = 410;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 409; constructorInitializer();
				}
			}

			State = 412; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 46, RULE_constructorInitializer);
		try {
			State = 426;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 414; Match(Colon);
				State = 415; Match(Base);
				State = 416; Match(LeftParen);
				State = 417; argumentList();
				State = 418; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420; Match(Colon);
				State = 421; Match(This);
				State = 422; Match(LeftParen);
				State = 423; argumentList();
				State = 424; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 48, RULE_argumentList);
		int _la;
		try {
			State = 437;
			switch (TokenStream.La(1)) {
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428; expression(0);
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 429; Match(Comma);
					State = 430; expression(0);
					}
					}
					State = 435;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(Context, State);
		EnterRule(_localctx, 50, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 439; attribute();
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 445; modifier();
				}
				}
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 451; Match(Delete);
			State = 452; parameterList();
			State = 453; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 52, RULE_method);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 455; attribute();
					}
					} 
				}
				State = 460;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 461; modifier();
				}
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 467; identifier();
			State = 469;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 468; typeArguments();
				}
			}

			State = 471; parameterList();
			State = 472; Match(Lambda);
			State = 473; type(0);
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 474; typeParameterConstraintClause();
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 480; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOverloadContext : ParserRuleContext {
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OperatorOverloadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOverload; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOverloadContext operatorOverload() {
		OperatorOverloadContext _localctx = new OperatorOverloadContext(Context, State);
		EnterRule(_localctx, 54, RULE_operatorOverload);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 482; attribute();
				}
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 488; modifier();
				}
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 494; Match(Operator);
			State = 495; overloadableOperator();
			State = 496; parameterList();
			State = 497; Match(Lambda);
			State = 498; type(0);
			State = 499; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionMethodContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ConversionMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionMethodContext conversionMethod() {
		ConversionMethodContext _localctx = new ConversionMethodContext(Context, State);
		EnterRule(_localctx, 56, RULE_conversionMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 501; attribute();
				}
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 507; modifier();
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 513; Match(Conversion);
			State = 515;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 514; typeArguments();
				}
			}

			State = 517; parameterList();
			State = 518; Match(Lambda);
			State = 519; type(0);
			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 520; typeParameterConstraintClause();
				}
				}
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 526; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 58, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 528; attribute();
				}
				}
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 534; modifier();
				}
				}
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 540;
			_la = TokenStream.La(1);
			if ( !(_la==Get || _la==Set) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 541; identifier();
			State = 543;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 542; typeArguments();
				}
			}

			State = 545; parameterList();
			State = 546; Match(Lambda);
			State = 547; type(0);
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 548; typeParameterConstraintClause();
				}
				}
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 554; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 60, RULE_methodBody);
		int _la;
		try {
			State = 565;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 556; Match(LeftBrace);
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 557; statement();
					}
					}
					State = 562;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 563; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 564; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_overloadableOperator);
		try {
			State = 577;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 568; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 569; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 570; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 571; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 572; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 573; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 574; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 575; Match(LeftBracket);
				State = 576; Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 64, RULE_field);
		int _la;
		try {
			State = 625;
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 579; attribute();
					}
					}
					State = 584;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 585; modifier();
					}
					}
					State = 590;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 591; Match(Var);
				State = 592; identifier();
				State = 595;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 593; Match(Colon);
					State = 594; type(0);
					}
				}

				State = 599;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 597; Match(Assign);
					State = 598; expression(0);
					}
				}

				State = 601; Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 603; attribute();
					}
					}
					State = 608;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 609; modifier();
					}
					}
					State = 614;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 615; Match(Let);
				State = 616; identifier();
				State = 619;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 617; Match(Colon);
					State = 618; type(0);
					}
				}

				State = 621; Match(Assign);
				State = 622; expression(0);
				State = 623; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetDeclarationStatementContext : StatementContext {
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public LetDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_statement);
		int _la;
		try {
			State = 702;
			switch (TokenStream.La(1)) {
			case Var:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 627; variableDeclaration();
				State = 628; Match(Semicolon);
				}
				break;
			case Let:
				_localctx = new LetDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 630; letDeclaration();
				State = 631; Match(Semicolon);
				}
				break;
			case Unsafe:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 633; Match(Unsafe);
				State = 634; Match(LeftBrace);
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 635; statement();
					}
					}
					State = 640;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 641; Match(RightBrace);
				}
				break;
			case LeftBrace:
				_localctx = new BlockContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 642; Match(LeftBrace);
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 643; statement();
					}
					}
					State = 648;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 649; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 650; Match(Semicolon);
				}
				break;
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 651; expression(0);
				State = 652; Match(Semicolon);
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 654; Match(Return);
				State = 655; expression(0);
				State = 656; Match(Semicolon);
				}
				break;
			case Throw:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 658; Match(Throw);
				State = 659; expression(0);
				State = 660; Match(Semicolon);
				}
				break;
			case If:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 662; Match(If);
				State = 663; Match(LeftParen);
				State = 664; expression(0);
				State = 665; Match(RightParen);
				State = 666; statement();
				State = 669;
				switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
				case 1:
					{
					State = 667; Match(Else);
					State = 668; statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 671; Match(For);
				State = 672; Match(LeftParen);
				State = 675;
				switch (TokenStream.La(1)) {
				case Var:
					{
					State = 673; variableDeclaration();
					}
					break;
				case Let:
					{
					State = 674; letDeclaration();
					}
					break;
				case Semicolon:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 677; Match(Semicolon);
				State = 679;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					State = 678; expression(0);
					}
				}

				State = 681; Match(Semicolon);
				State = 683;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					State = 682; expression(0);
					}
				}

				State = 685; Match(RightParen);
				State = 686; statement();
				}
				break;
			case Foreach:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 687; Match(Foreach);
				State = 688; Match(LeftParen);
				State = 691;
				switch (TokenStream.La(1)) {
				case Var:
					{
					State = 689; variableDeclaration();
					}
					break;
				case Let:
					{
					State = 690; letDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 693; Match(In);
				State = 694; expression(0);
				State = 695; Match(RightParen);
				State = 696; statement();
				}
				break;
			case Delete:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 698; Match(Delete);
				State = 699; expression(0);
				State = 700; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704; Match(Var);
			State = 705; identifier();
			State = 708;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 706; Match(Colon);
				State = 707; type(0);
				}
			}

			State = 712;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 710; Match(Assign);
				State = 711; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public LetDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetDeclarationContext letDeclaration() {
		LetDeclarationContext _localctx = new LetDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_letDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714; Match(Let);
			State = 715; identifier();
			State = 718;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 716; Match(Colon);
				State = 717; type(0);
				}
			}

			State = 720; Match(Assign);
			State = 721; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(AdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public IToken s71;
		public IList<IToken> _ops = new List<IToken>();
		public IToken s72;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			switch (TokenStream.La(1)) {
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 724;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 725; expression(20);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 726; identifier();
				}
				break;
			case New:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 727; Match(New);
				State = 728; typeName();
				State = 731;
				_la = TokenStream.La(1);
				if (_la==Dot) {
					{
					State = 729; Match(Dot);
					State = 730; identifier();
					}
				}

				State = 733; Match(LeftParen);
				State = 734; argumentList();
				State = 735; Match(RightParen);
				}
				break;
			case NullLiteral:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 737; Match(NullLiteral);
				}
				break;
			case This:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 738; Match(This);
				}
				break;
			case BooleanLiteral:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 739; Match(BooleanLiteral);
				}
				break;
			case IntLiteral:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 740; Match(IntLiteral);
				}
				break;
			case Uninitialized:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 741; Match(Uninitialized);
				}
				break;
			case StringLiteral:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 742; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 806;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 804;
					switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 745;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 746;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 747; expression(20);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 748;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 749;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 750; expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 751;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 756;
						switch (TokenStream.La(1)) {
						case LeftAngle:
							{
							State = 752; ((ShiftExpressionContext)_localctx).s71 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							State = 753; ((ShiftExpressionContext)_localctx).s71 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							}
							break;
						case RightAngle:
							{
							State = 754; ((ShiftExpressionContext)_localctx).s72 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s72);
							State = 755; ((ShiftExpressionContext)_localctx).s72 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s72);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 758; expression(18);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 759;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 760;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (LeftAngle - 71)) | (1L << (RightAngle - 71)) | (1L << (LessThanOrEqual - 71)) | (1L << (GreaterThanOrEqual - 71)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 761; expression(17);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 762;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 763;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 764; expression(16);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 765;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 766; Match(And);
						State = 767; expression(15);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 768;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 769; Match(Xor);
						State = 770; expression(14);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 771;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 772; Match(Or);
						State = 773; expression(13);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 774;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 775; Match(Coalesce);
						State = 776; expression(12);
						}
						break;
					case 10:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 777;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 778; Match(IsNull);
						State = 779; expression(0);
						State = 780; Match(Colon);
						State = 781; expression(10);
						}
						break;
					case 11:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 783;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 784;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (Assign - 96)) | (1L << (AddAssign - 96)) | (1L << (SubtractAssign - 96)) | (1L << (MultiplyAssign - 96)) | (1L << (DivideAssign - 96)) | (1L << (LeftShiftAssign - 96)) | (1L << (RightShiftAssign - 96)) | (1L << (AndAssign - 96)) | (1L << (XorAssign - 96)) | (1L << (OrAssign - 96)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 785; expression(9);
						}
						break;
					case 12:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 786;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 787; Match(Dot);
						State = 788; identifier();
						}
						break;
					case 13:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 789;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 790; Match(Arrow);
						State = 791; identifier();
						}
						break;
					case 14:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 792;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 793; Match(LeftParen);
						State = 794; argumentList();
						State = 795; Match(RightParen);
						}
						break;
					case 15:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 797;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 798; Match(LeftBracket);
						State = 799; argumentList();
						State = 800; Match(RightBracket);
						}
						break;
					case 16:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 802;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 803; Match(IsNull);
						}
						break;
					}
					} 
				}
				State = 808;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return type_sempred((TypeContext)_localctx, predIndex);
		case 36: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 19);
		case 3: return Precpred(Context, 18);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 16);
		case 6: return Precpred(Context, 15);
		case 7: return Precpred(Context, 14);
		case 8: return Precpred(Context, 13);
		case 9: return Precpred(Context, 12);
		case 10: return Precpred(Context, 11);
		case 11: return Precpred(Context, 10);
		case 12: return Precpred(Context, 9);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 24);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3n\x32C\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x3\x2\a\x2N\n\x2\f\x2\xE\x2Q"+
		"\v\x2\x3\x2\a\x2T\n\x2\f\x2\xE\x2W\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5\x64\n\x5\f\x5\xE\x5g\v\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\a\x6m\n\x6\f\x6\xE\x6p\v\x6\x3\x6\a\x6s\n\x6\f\x6"+
		"\xE\x6v\v\x6\x3\x6\x3\x6\x3\x6\a\x6{\n\x6\f\x6\xE\x6~\v\x6\x3\x6\a\x6"+
		"\x81\n\x6\f\x6\xE\x6\x84\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x89\n\x6\x3\x6\x5"+
		"\x6\x8C\n\x6\x3\x6\a\x6\x8F\n\x6\f\x6\xE\x6\x92\v\x6\x3\x6\x3\x6\a\x6"+
		"\x96\n\x6\f\x6\xE\x6\x99\v\x6\x3\x6\x3\x6\x3\x6\a\x6\x9E\n\x6\f\x6\xE"+
		"\x6\xA1\v\x6\x3\x6\a\x6\xA4\n\x6\f\x6\xE\x6\xA7\v\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6\xAD\n\x6\x3\x6\x3\x6\x5\x6\xB1\n\x6\x3\x6\x3\x6\x5\x6\xB5"+
		"\n\x6\x3\a\x3\a\x3\a\x5\a\xBA\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xCA\n\b\x3\t\x3\t\x3\t\x3\t\a\t"+
		"\xD0\n\t\f\t\xE\t\xD3\v\t\x3\t\x3\t\x3\n\x3\n\x5\n\xD9\n\n\x3\n\x3\n\x5"+
		"\n\xDD\n\n\x3\v\x3\v\x5\v\xE1\n\v\x3\v\x3\v\x3\v\x3\v\a\v\xE7\n\v\f\v"+
		"\xE\v\xEA\v\v\x5\v\xEC\n\v\x3\f\x3\f\x5\f\xF0\n\f\x3\f\x3\f\x3\f\x5\f"+
		"\xF5\n\f\a\f\xF7\n\f\f\f\xE\f\xFA\v\f\x3\r\x3\r\x3\r\x3\r\a\r\x100\n\r"+
		"\f\r\xE\r\x103\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x113\n\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\a\xE\x11C\n\xE\f\xE\xE\xE\x11F\v\xE\x3\xE\x3\xE\a\xE"+
		"\x123\n\xE\f\xE\xE\xE\x126\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x12C\n\xF"+
		"\f\xF\xE\xF\x12F\v\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x135\n\xF\x3\x10\a"+
		"\x10\x138\n\x10\f\x10\xE\x10\x13B\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x11\x5\x11\x142\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12"+
		"\x14A\n\x12\f\x12\xE\x12\x14D\v\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x5\x12\x154\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x15B\n\x13"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x164\n\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\a\x15\x16A\n\x15\f\x15\xE\x15\x16D\v\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x5\x15\x173\n\x15\x3\x16\a\x16\x176\n\x16\f"+
		"\x16\xE\x16\x179\v\x16\x3\x16\x5\x16\x17C\n\x16\x3\x16\x3\x16\x3\x16\a"+
		"\x16\x181\n\x16\f\x16\xE\x16\x184\v\x16\x3\x16\x5\x16\x187\n\x16\x3\x17"+
		"\x3\x17\x3\x18\a\x18\x18C\n\x18\f\x18\xE\x18\x18F\v\x18\x3\x18\a\x18\x192"+
		"\n\x18\f\x18\xE\x18\x195\v\x18\x3\x18\x3\x18\x5\x18\x199\n\x18\x3\x18"+
		"\x3\x18\x5\x18\x19D\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x1AD\n\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\a\x1A\x1B2\n\x1A\f\x1A\xE\x1A\x1B5\v\x1A\x3\x1A"+
		"\x5\x1A\x1B8\n\x1A\x3\x1B\a\x1B\x1BB\n\x1B\f\x1B\xE\x1B\x1BE\v\x1B\x3"+
		"\x1B\a\x1B\x1C1\n\x1B\f\x1B\xE\x1B\x1C4\v\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1C\a\x1C\x1CB\n\x1C\f\x1C\xE\x1C\x1CE\v\x1C\x3\x1C\a\x1C\x1D1"+
		"\n\x1C\f\x1C\xE\x1C\x1D4\v\x1C\x3\x1C\x3\x1C\x5\x1C\x1D8\n\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\a\x1C\x1DE\n\x1C\f\x1C\xE\x1C\x1E1\v\x1C\x3\x1C"+
		"\x3\x1C\x3\x1D\a\x1D\x1E6\n\x1D\f\x1D\xE\x1D\x1E9\v\x1D\x3\x1D\a\x1D\x1EC"+
		"\n\x1D\f\x1D\xE\x1D\x1EF\v\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1E\a\x1E\x1F9\n\x1E\f\x1E\xE\x1E\x1FC\v\x1E\x3\x1E\a\x1E\x1FF"+
		"\n\x1E\f\x1E\xE\x1E\x202\v\x1E\x3\x1E\x3\x1E\x5\x1E\x206\n\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\a\x1E\x20C\n\x1E\f\x1E\xE\x1E\x20F\v\x1E\x3\x1E"+
		"\x3\x1E\x3\x1F\a\x1F\x214\n\x1F\f\x1F\xE\x1F\x217\v\x1F\x3\x1F\a\x1F\x21A"+
		"\n\x1F\f\x1F\xE\x1F\x21D\v\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x222\n\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x228\n\x1F\f\x1F\xE\x1F\x22B\v\x1F"+
		"\x3\x1F\x3\x1F\x3 \x3 \a \x231\n \f \xE \x234\v \x3 \x3 \x5 \x238\n \x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x244\n!\x3\"\a\"\x247\n\"\f"+
		"\"\xE\"\x24A\v\"\x3\"\a\"\x24D\n\"\f\"\xE\"\x250\v\"\x3\"\x3\"\x3\"\x3"+
		"\"\x5\"\x256\n\"\x3\"\x3\"\x5\"\x25A\n\"\x3\"\x3\"\x3\"\a\"\x25F\n\"\f"+
		"\"\xE\"\x262\v\"\x3\"\a\"\x265\n\"\f\"\xE\"\x268\v\"\x3\"\x3\"\x3\"\x3"+
		"\"\x5\"\x26E\n\"\x3\"\x3\"\x3\"\x3\"\x5\"\x274\n\"\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\a#\x27F\n#\f#\xE#\x282\v#\x3#\x3#\x3#\a#\x287\n#\f#"+
		"\xE#\x28A\v#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x5#\x2A0\n#\x3#\x3#\x3#\x3#\x5#\x2A6\n#\x3#\x3#"+
		"\x5#\x2AA\n#\x3#\x3#\x5#\x2AE\n#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x2B6\n#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x2C1\n#\x3$\x3$\x3$\x3$\x5$\x2C7"+
		"\n$\x3$\x3$\x5$\x2CB\n$\x3%\x3%\x3%\x3%\x5%\x2D1\n%\x3%\x3%\x3%\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x2DE\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&"+
		"\x3&\x3&\x5&\x2EA\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x2F7"+
		"\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\a&\x327\n&\f&\xE&\x32A"+
		"\v&\x3&\x2\x4\x1AJ\'\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E"+
		" \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJ\x2\f\x4\x2\x34\x34lm\x3"+
		"\x2\x16\x17\x4\x2IJVW\x4\x2  ;<\x3\x2\x19\x1A\x6\x2OOQQYZ_\x61\x4\x2O"+
		"O[[\x3\x2YZ\x3\x2TU\x3\x2\x62k\x3A4\x2O\x3\x2\x2\x2\x4Z\x3\x2\x2\x2\x6"+
		"^\x3\x2\x2\x2\b`\x3\x2\x2\x2\n\xB4\x3\x2\x2\x2\f\xB6\x3\x2\x2\x2\xE\xC9"+
		"\x3\x2\x2\x2\x10\xCB\x3\x2\x2\x2\x12\xD6\x3\x2\x2\x2\x14\xDE\x3\x2\x2"+
		"\x2\x16\xED\x3\x2\x2\x2\x18\xFB\x3\x2\x2\x2\x1A\x112\x3\x2\x2\x2\x1C\x134"+
		"\x3\x2\x2\x2\x1E\x139\x3\x2\x2\x2 \x141\x3\x2\x2\x2\"\x153\x3\x2\x2\x2"+
		"$\x15A\x3\x2\x2\x2&\x163\x3\x2\x2\x2(\x172\x3\x2\x2\x2*\x186\x3\x2\x2"+
		"\x2,\x188\x3\x2\x2\x2.\x18D\x3\x2\x2\x2\x30\x1AC\x3\x2\x2\x2\x32\x1B7"+
		"\x3\x2\x2\x2\x34\x1BC\x3\x2\x2\x2\x36\x1CC\x3\x2\x2\x2\x38\x1E7\x3\x2"+
		"\x2\x2:\x1FA\x3\x2\x2\x2<\x215\x3\x2\x2\x2>\x237\x3\x2\x2\x2@\x243\x3"+
		"\x2\x2\x2\x42\x273\x3\x2\x2\x2\x44\x2C0\x3\x2\x2\x2\x46\x2C2\x3\x2\x2"+
		"\x2H\x2CC\x3\x2\x2\x2J\x2E9\x3\x2\x2\x2LN\x5\x4\x3\x2ML\x3\x2\x2\x2NQ"+
		"\x3\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2\x2PU\x3\x2\x2\x2QO\x3\x2\x2\x2R"+
		"T\x5\n\x6\x2SR\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2V"+
		"X\x3\x2\x2\x2WU\x3\x2\x2\x2XY\a\x2\x2\x3Y\x3\x3\x2\x2\x2Z[\a\v\x2\x2["+
		"\\\x5\b\x5\x2\\]\a\x41\x2\x2]\x5\x3\x2\x2\x2^_\t\x2\x2\x2_\a\x3\x2\x2"+
		"\x2`\x65\x5\x6\x4\x2\x61\x62\a\x43\x2\x2\x62\x64\x5\x6\x4\x2\x63\x61\x3"+
		"\x2\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66"+
		"\t\x3\x2\x2\x2g\x65\x3\x2\x2\x2hi\a\f\x2\x2ij\x5\b\x5\x2jn\aG\x2\x2km"+
		"\x5\x4\x3\x2lk\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2o"+
		"t\x3\x2\x2\x2pn\x3\x2\x2\x2qs\x5\n\x6\x2rq\x3\x2\x2\x2sv\x3\x2\x2\x2t"+
		"r\x3\x2\x2\x2tu\x3\x2\x2\x2uw\x3\x2\x2\x2vt\x3\x2\x2\x2wx\aH\x2\x2x\xB5"+
		"\x3\x2\x2\x2y{\x5\f\a\x2zy\x3\x2\x2\x2{~\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3"+
		"\x2\x2\x2}\x82\x3\x2\x2\x2~|\x3\x2\x2\x2\x7F\x81\x5\xE\b\x2\x80\x7F\x3"+
		"\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2"+
		"\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x86\a\r\x2\x2\x86\x88\x5"+
		"\x6\x4\x2\x87\x89\x5\x10\t\x2\x88\x87\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2"+
		"\x89\x8B\x3\x2\x2\x2\x8A\x8C\x5\x14\v\x2\x8B\x8A\x3\x2\x2\x2\x8B\x8C\x3"+
		"\x2\x2\x2\x8C\x90\x3\x2\x2\x2\x8D\x8F\x5\"\x12\x2\x8E\x8D\x3\x2\x2\x2"+
		"\x8F\x92\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x93\x3"+
		"\x2\x2\x2\x92\x90\x3\x2\x2\x2\x93\x97\aG\x2\x2\x94\x96\x5&\x14\x2\x95"+
		"\x94\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2"+
		"\x2\x2\x98\x9A\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x9A\x9B\aH\x2\x2\x9B\xB5"+
		"\x3\x2\x2\x2\x9C\x9E\x5\f\a\x2\x9D\x9C\x3\x2\x2\x2\x9E\xA1\x3\x2\x2\x2"+
		"\x9F\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA5\x3\x2\x2\x2\xA1\x9F\x3"+
		"\x2\x2\x2\xA2\xA4\x5\xE\b\x2\xA3\xA2\x3\x2\x2\x2\xA4\xA7\x3\x2\x2\x2\xA5"+
		"\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA8\x3\x2\x2\x2\xA7\xA5\x3\x2"+
		"\x2\x2\xA8\xA9\t\x3\x2\x2\xA9\xAC\x5\x6\x4\x2\xAA\xAB\a\x42\x2\x2\xAB"+
		"\xAD\x5\x1A\xE\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xB0\x3\x2"+
		"\x2\x2\xAE\xAF\a\x62\x2\x2\xAF\xB1\x5J&\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1"+
		"\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\a\x41\x2\x2\xB3\xB5\x3\x2\x2"+
		"\x2\xB4h\x3\x2\x2\x2\xB4|\x3\x2\x2\x2\xB4\x9F\x3\x2\x2\x2\xB5\v\x3\x2"+
		"\x2\x2\xB6\xB9\am\x2\x2\xB7\xB8\aM\x2\x2\xB8\xBA\aN\x2\x2\xB9\xB7\x3\x2"+
		"\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\r\x3\x2\x2\x2\xBB\xCA\a\x35\x2\x2\xBC\xCA"+
		"\a\x36\x2\x2\xBD\xCA\a\x37\x2\x2\xBE\xCA\a\x38\x2\x2\xBF\xCA\a\x39\x2"+
		"\x2\xC0\xCA\a:\x2\x2\xC1\xCA\a\x1F\x2\x2\xC2\xCA\a)\x2\x2\xC3\xCA\a\x32"+
		"\x2\x2\xC4\xCA\a\x33\x2\x2\xC5\xCA\a\'\x2\x2\xC6\xCA\a(\x2\x2\xC7\xCA"+
		"\a\x18\x2\x2\xC8\xCA\a&\x2\x2\xC9\xBB\x3\x2\x2\x2\xC9\xBC\x3\x2\x2\x2"+
		"\xC9\xBD\x3\x2\x2\x2\xC9\xBE\x3\x2\x2\x2\xC9\xBF\x3\x2\x2\x2\xC9\xC0\x3"+
		"\x2\x2\x2\xC9\xC1\x3\x2\x2\x2\xC9\xC2\x3\x2\x2\x2\xC9\xC3\x3\x2\x2\x2"+
		"\xC9\xC4\x3\x2\x2\x2\xC9\xC5\x3\x2\x2\x2\xC9\xC6\x3\x2\x2\x2\xC9\xC7\x3"+
		"\x2\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA\xF\x3\x2\x2\x2\xCB\xCC\aI\x2\x2\xCC"+
		"\xD1\x5\x12\n\x2\xCD\xCE\a\x44\x2\x2\xCE\xD0\x5\x12\n\x2\xCF\xCD\x3\x2"+
		"\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2"+
		"\xD4\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD5\aJ\x2\x2\xD5\x11\x3\x2\x2"+
		"\x2\xD6\xD8\x5\x6\x4\x2\xD7\xD9\aX\x2\x2\xD8\xD7\x3\x2\x2\x2\xD8\xD9\x3"+
		"\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xDB\a\x42\x2\x2\xDB\xDD\x5\x16\f\x2"+
		"\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\x13\x3\x2\x2\x2\xDE\xE0\a"+
		"\x42\x2\x2\xDF\xE1\x5\x16\f\x2\xE0\xDF\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2"+
		"\xE1\xEB\x3\x2\x2\x2\xE2\xE3\a\x42\x2\x2\xE3\xE8\x5\x16\f\x2\xE4\xE5\a"+
		"\x44\x2\x2\xE5\xE7\x5\x16\f\x2\xE6\xE4\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2"+
		"\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEC\x3\x2\x2\x2\xEA\xE8\x3"+
		"\x2\x2\x2\xEB\xE2\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\x15\x3\x2\x2\x2"+
		"\xED\xEF\x5\x6\x4\x2\xEE\xF0\x5\x18\r\x2\xEF\xEE\x3\x2\x2\x2\xEF\xF0\x3"+
		"\x2\x2\x2\xF0\xF8\x3\x2\x2\x2\xF1\xF2\a\x43\x2\x2\xF2\xF4\x5\x6\x4\x2"+
		"\xF3\xF5\x5\x18\r\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF7\x3"+
		"\x2\x2\x2\xF6\xF1\x3\x2\x2\x2\xF7\xFA\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2"+
		"\xF8\xF9\x3\x2\x2\x2\xF9\x17\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFB\xFC\a"+
		"I\x2\x2\xFC\x101\x5\x1A\xE\x2\xFD\xFE\a\x44\x2\x2\xFE\x100\x5\x1A\xE\x2"+
		"\xFF\xFD\x3\x2\x2\x2\x100\x103\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102"+
		"\x3\x2\x2\x2\x102\x104\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x105\aJ"+
		"\x2\x2\x105\x19\x3\x2\x2\x2\x106\x107\b\xE\x1\x2\x107\x108\a<\x2\x2\x108"+
		"\x113\x5\x1A\xE\x6\x109\x10A\a;\x2\x2\x10A\x113\x5\x1A\xE\x5\x10B\x10C"+
		"\a$\x2\x2\x10C\x113\x5\x1A\xE\x4\x10D\x10E\x5\x1C\xF\x2\x10E\x10F\a\x46"+
		"\x2\x2\x10F\x110\x5\x1A\xE\x3\x110\x113\x3\x2\x2\x2\x111\x113\x5\x16\f"+
		"\x2\x112\x106\x3\x2\x2\x2\x112\x109\x3\x2\x2\x2\x112\x10B\x3\x2\x2\x2"+
		"\x112\x10D\x3\x2\x2\x2\x112\x111\x3\x2\x2\x2\x113\x124\x3\x2\x2\x2\x114"+
		"\x115\f\b\x2\x2\x115\x123\aO\x2\x2\x116\x117\f\a\x2\x2\x117\x118\aK\x2"+
		"\x2\x118\x11D\x5 \x11\x2\x119\x11A\a\x44\x2\x2\x11A\x11C\x5 \x11\x2\x11B"+
		"\x119\x3\x2\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11E"+
		"\x3\x2\x2\x2\x11E\x120\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x120\x121\aL"+
		"\x2\x2\x121\x123\x3\x2\x2\x2\x122\x114\x3\x2\x2\x2\x122\x116\x3\x2\x2"+
		"\x2\x123\x126\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2"+
		"\x125\x1B\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x127\x128\aM\x2\x2\x128\x12D"+
		"\x5\x1E\x10\x2\x129\x12A\a\x44\x2\x2\x12A\x12C\x5\x1E\x10\x2\x12B\x129"+
		"\x3\x2\x2\x2\x12C\x12F\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12D\x12E\x3"+
		"\x2\x2\x2\x12E\x130\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x130\x131\aN\x2"+
		"\x2\x131\x135\x3\x2\x2\x2\x132\x133\aM\x2\x2\x133\x135\aN\x2\x2\x134\x127"+
		"\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2\x135\x1D\x3\x2\x2\x2\x136\x138\x5,"+
		"\x17\x2\x137\x136\x3\x2\x2\x2\x138\x13B\x3\x2\x2\x2\x139\x137\x3\x2\x2"+
		"\x2\x139\x13A\x3\x2\x2\x2\x13A\x13C\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2"+
		"\x13C\x13D\x5\x1A\xE\x2\x13D\x1F\x3\x2\x2\x2\x13E\x142\a>\x2\x2\x13F\x142"+
		"\a@\x2\x2\x140\x142\x5\x6\x4\x2\x141\x13E\x3\x2\x2\x2\x141\x13F\x3\x2"+
		"\x2\x2\x141\x140\x3\x2\x2\x2\x142!\x3\x2\x2\x2\x143\x144\a\x15\x2\x2\x144"+
		"\x145\x5\x12\n\x2\x145\x146\a\x42\x2\x2\x146\x14B\x5$\x13\x2\x147\x148"+
		"\a\x44\x2\x2\x148\x14A\x5$\x13\x2\x149\x147\x3\x2\x2\x2\x14A\x14D\x3\x2"+
		"\x2\x2\x14B\x149\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x154\x3\x2\x2"+
		"\x2\x14D\x14B\x3\x2\x2\x2\x14E\x14F\a\x15\x2\x2\x14F\x150\x5\x12\n\x2"+
		"\x150\x151\t\x4\x2\x2\x151\x152\a>\x2\x2\x152\x154\x3\x2\x2\x2\x153\x143"+
		"\x3\x2\x2\x2\x153\x14E\x3\x2\x2\x2\x154#\x3\x2\x2\x2\x155\x156\a\xF\x2"+
		"\x2\x156\x157\aM\x2\x2\x157\x15B\aN\x2\x2\x158\x15B\x5\x16\f\x2\x159\x15B"+
		"\x5\x12\n\x2\x15A\x155\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15A\x159\x3"+
		"\x2\x2\x2\x15B%\x3\x2\x2\x2\x15C\x164\x5.\x18\x2\x15D\x164\x5\x34\x1B"+
		"\x2\x15E\x164\x5:\x1E\x2\x15F\x164\x5\x36\x1C\x2\x160\x164\x5\x38\x1D"+
		"\x2\x161\x164\x5\x42\"\x2\x162\x164\x5<\x1F\x2\x163\x15C\x3\x2\x2\x2\x163"+
		"\x15D\x3\x2\x2\x2\x163\x15E\x3\x2\x2\x2\x163\x15F\x3\x2\x2\x2\x163\x160"+
		"\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x163\x162\x3\x2\x2\x2\x164\'\x3\x2"+
		"\x2\x2\x165\x166\aM\x2\x2\x166\x16B\x5*\x16\x2\x167\x168\a\x44\x2\x2\x168"+
		"\x16A\x5*\x16\x2\x169\x167\x3\x2\x2\x2\x16A\x16D\x3\x2\x2\x2\x16B\x169"+
		"\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16C\x16E\x3\x2\x2\x2\x16D\x16B\x3"+
		"\x2\x2\x2\x16E\x16F\aN\x2\x2\x16F\x173\x3\x2\x2\x2\x170\x171\aM\x2\x2"+
		"\x171\x173\aN\x2\x2\x172\x165\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173)"+
		"\x3\x2\x2\x2\x174\x176\x5,\x17\x2\x175\x174\x3\x2\x2\x2\x176\x179\x3\x2"+
		"\x2\x2\x177\x175\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x17B\x3\x2\x2"+
		"\x2\x179\x177\x3\x2\x2\x2\x17A\x17C\x5\x6\x4\x2\x17B\x17A\x3\x2\x2\x2"+
		"\x17B\x17C\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17E\a\x42\x2\x2\x17E"+
		"\x187\x5\x1A\xE\x2\x17F\x181\x5,\x17\x2\x180\x17F\x3\x2\x2\x2\x181\x184"+
		"\x3\x2\x2\x2\x182\x180\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183\x185\x3"+
		"\x2\x2\x2\x184\x182\x3\x2\x2\x2\x185\x187\a\x12\x2\x2\x186\x177\x3\x2"+
		"\x2\x2\x186\x182\x3\x2\x2\x2\x187+\x3\x2\x2\x2\x188\x189\t\x5\x2\x2\x189"+
		"-\x3\x2\x2\x2\x18A\x18C\x5\f\a\x2\x18B\x18A\x3\x2\x2\x2\x18C\x18F\x3\x2"+
		"\x2\x2\x18D\x18B\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E\x193\x3\x2\x2"+
		"\x2\x18F\x18D\x3\x2\x2\x2\x190\x192\x5\xE\b\x2\x191\x190\x3\x2\x2\x2\x192"+
		"\x195\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x196"+
		"\x3\x2\x2\x2\x195\x193\x3\x2\x2\x2\x196\x198\a\xF\x2\x2\x197\x199\x5\x6"+
		"\x4\x2\x198\x197\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199\x19A\x3\x2\x2"+
		"\x2\x19A\x19C\x5(\x15\x2\x19B\x19D\x5\x30\x19\x2\x19C\x19B\x3\x2\x2\x2"+
		"\x19C\x19D\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E\x19F\x5> \x2\x19F/\x3"+
		"\x2\x2\x2\x1A0\x1A1\a\x42\x2\x2\x1A1\x1A2\a%\x2\x2\x1A2\x1A3\aM\x2\x2"+
		"\x1A3\x1A4\x5\x32\x1A\x2\x1A4\x1A5\aN\x2\x2\x1A5\x1AD\x3\x2\x2\x2\x1A6"+
		"\x1A7\a\x42\x2\x2\x1A7\x1A8\a\x12\x2\x2\x1A8\x1A9\aM\x2\x2\x1A9\x1AA\x5"+
		"\x32\x1A\x2\x1AA\x1AB\aN\x2\x2\x1AB\x1AD\x3\x2\x2\x2\x1AC\x1A0\x3\x2\x2"+
		"\x2\x1AC\x1A6\x3\x2\x2\x2\x1AD\x31\x3\x2\x2\x2\x1AE\x1B3\x5J&\x2\x1AF"+
		"\x1B0\a\x44\x2\x2\x1B0\x1B2\x5J&\x2\x1B1\x1AF\x3\x2\x2\x2\x1B2\x1B5\x3"+
		"\x2\x2\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4\x1B8\x3\x2"+
		"\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B6\x1B8\x3\x2\x2\x2\x1B7\x1AE\x3\x2\x2"+
		"\x2\x1B7\x1B6\x3\x2\x2\x2\x1B8\x33\x3\x2\x2\x2\x1B9\x1BB\x5\f\a\x2\x1BA"+
		"\x1B9\x3\x2\x2\x2\x1BB\x1BE\x3\x2\x2\x2\x1BC\x1BA\x3\x2\x2\x2\x1BC\x1BD"+
		"\x3\x2\x2\x2\x1BD\x1C2\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BF\x1C1\x5"+
		"\xE\b\x2\x1C0\x1BF\x3\x2\x2\x2\x1C1\x1C4\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2"+
		"\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C5\x3\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2"+
		"\x1C5\x1C6\a\x10\x2\x2\x1C6\x1C7\x5(\x15\x2\x1C7\x1C8\x5> \x2\x1C8\x35"+
		"\x3\x2\x2\x2\x1C9\x1CB\x5\f\a\x2\x1CA\x1C9\x3\x2\x2\x2\x1CB\x1CE\x3\x2"+
		"\x2\x2\x1CC\x1CA\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1D2\x3\x2\x2"+
		"\x2\x1CE\x1CC\x3\x2\x2\x2\x1CF\x1D1\x5\xE\b\x2\x1D0\x1CF\x3\x2\x2\x2\x1D1"+
		"\x1D4\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D5"+
		"\x3\x2\x2\x2\x1D4\x1D2\x3\x2\x2\x2\x1D5\x1D7\x5\x6\x4\x2\x1D6\x1D8\x5"+
		"\x18\r\x2\x1D7\x1D6\x3\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8\x1D9\x3\x2"+
		"\x2\x2\x1D9\x1DA\x5(\x15\x2\x1DA\x1DB\a\x46\x2\x2\x1DB\x1DF\x5\x1A\xE"+
		"\x2\x1DC\x1DE\x5\"\x12\x2\x1DD\x1DC\x3\x2\x2\x2\x1DE\x1E1\x3\x2\x2\x2"+
		"\x1DF\x1DD\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1"+
		"\x1DF\x3\x2\x2\x2\x1E2\x1E3\x5> \x2\x1E3\x37\x3\x2\x2\x2\x1E4\x1E6\x5"+
		"\f\a\x2\x1E5\x1E4\x3\x2\x2\x2\x1E6\x1E9\x3\x2\x2\x2\x1E7\x1E5\x3\x2\x2"+
		"\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1ED\x3\x2\x2\x2\x1E9\x1E7\x3\x2\x2\x2"+
		"\x1EA\x1EC\x5\xE\b\x2\x1EB\x1EA\x3\x2\x2\x2\x1EC\x1EF\x3\x2\x2\x2\x1ED"+
		"\x1EB\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2\x2\x1EE\x1F0\x3\x2\x2\x2\x1EF\x1ED"+
		"\x3\x2\x2\x2\x1F0\x1F1\a\x11\x2\x2\x1F1\x1F2\x5@!\x2\x1F2\x1F3\x5(\x15"+
		"\x2\x1F3\x1F4\a\x46\x2\x2\x1F4\x1F5\x5\x1A\xE\x2\x1F5\x1F6\x5> \x2\x1F6"+
		"\x39\x3\x2\x2\x2\x1F7\x1F9\x5\f\a\x2\x1F8\x1F7\x3\x2\x2\x2\x1F9\x1FC\x3"+
		"\x2\x2\x2\x1FA\x1F8\x3\x2\x2\x2\x1FA\x1FB\x3\x2\x2\x2\x1FB\x200\x3\x2"+
		"\x2\x2\x1FC\x1FA\x3\x2\x2\x2\x1FD\x1FF\x5\xE\b\x2\x1FE\x1FD\x3\x2\x2\x2"+
		"\x1FF\x202\x3\x2\x2\x2\x200\x1FE\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2\x201"+
		"\x203\x3\x2\x2\x2\x202\x200\x3\x2\x2\x2\x203\x205\a\x34\x2\x2\x204\x206"+
		"\x5\x18\r\x2\x205\x204\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206\x207\x3"+
		"\x2\x2\x2\x207\x208\x5(\x15\x2\x208\x209\a\x46\x2\x2\x209\x20D\x5\x1A"+
		"\xE\x2\x20A\x20C\x5\"\x12\x2\x20B\x20A\x3\x2\x2\x2\x20C\x20F\x3\x2\x2"+
		"\x2\x20D\x20B\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x210\x3\x2\x2\x2"+
		"\x20F\x20D\x3\x2\x2\x2\x210\x211\x5> \x2\x211;\x3\x2\x2\x2\x212\x214\x5"+
		"\f\a\x2\x213\x212\x3\x2\x2\x2\x214\x217\x3\x2\x2\x2\x215\x213\x3\x2\x2"+
		"\x2\x215\x216\x3\x2\x2\x2\x216\x21B\x3\x2\x2\x2\x217\x215\x3\x2\x2\x2"+
		"\x218\x21A\x5\xE\b\x2\x219\x218\x3\x2\x2\x2\x21A\x21D\x3\x2\x2\x2\x21B"+
		"\x219\x3\x2\x2\x2\x21B\x21C\x3\x2\x2\x2\x21C\x21E\x3\x2\x2\x2\x21D\x21B"+
		"\x3\x2\x2\x2\x21E\x21F\t\x6\x2\x2\x21F\x221\x5\x6\x4\x2\x220\x222\x5\x18"+
		"\r\x2\x221\x220\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2"+
		"\x223\x224\x5(\x15\x2\x224\x225\a\x46\x2\x2\x225\x229\x5\x1A\xE\x2\x226"+
		"\x228\x5\"\x12\x2\x227\x226\x3\x2\x2\x2\x228\x22B\x3\x2\x2\x2\x229\x227"+
		"\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22C\x3\x2\x2\x2\x22B\x229\x3"+
		"\x2\x2\x2\x22C\x22D\x5> \x2\x22D=\x3\x2\x2\x2\x22E\x232\aG\x2\x2\x22F"+
		"\x231\x5\x44#\x2\x230\x22F\x3\x2\x2\x2\x231\x234\x3\x2\x2\x2\x232\x230"+
		"\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x235\x3\x2\x2\x2\x234\x232\x3"+
		"\x2\x2\x2\x235\x238\aH\x2\x2\x236\x238\a\x41\x2\x2\x237\x22E\x3\x2\x2"+
		"\x2\x237\x236\x3\x2\x2\x2\x238?\x3\x2\x2\x2\x239\x244\aO\x2\x2\x23A\x244"+
		"\aQ\x2\x2\x23B\x244\a^\x2\x2\x23C\x244\a\\\x2\x2\x23D\x244\a]\x2\x2\x23E"+
		"\x244\aS\x2\x2\x23F\x244\aR\x2\x2\x240\x244\a\x43\x2\x2\x241\x242\aK\x2"+
		"\x2\x242\x244\aL\x2\x2\x243\x239\x3\x2\x2\x2\x243\x23A\x3\x2\x2\x2\x243"+
		"\x23B\x3\x2\x2\x2\x243\x23C\x3\x2\x2\x2\x243\x23D\x3\x2\x2\x2\x243\x23E"+
		"\x3\x2\x2\x2\x243\x23F\x3\x2\x2\x2\x243\x240\x3\x2\x2\x2\x243\x241\x3"+
		"\x2\x2\x2\x244\x41\x3\x2\x2\x2\x245\x247\x5\f\a\x2\x246\x245\x3\x2\x2"+
		"\x2\x247\x24A\x3\x2\x2\x2\x248\x246\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2"+
		"\x249\x24E\x3\x2\x2\x2\x24A\x248\x3\x2\x2\x2\x24B\x24D\x5\xE\b\x2\x24C"+
		"\x24B\x3\x2\x2\x2\x24D\x250\x3\x2\x2\x2\x24E\x24C\x3\x2\x2\x2\x24E\x24F"+
		"\x3\x2\x2\x2\x24F\x251\x3\x2\x2\x2\x250\x24E\x3\x2\x2\x2\x251\x252\a\x16"+
		"\x2\x2\x252\x255\x5\x6\x4\x2\x253\x254\a\x42\x2\x2\x254\x256\x5\x1A\xE"+
		"\x2\x255\x253\x3\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x259\x3\x2\x2\x2"+
		"\x257\x258\a\x62\x2\x2\x258\x25A\x5J&\x2\x259\x257\x3\x2\x2\x2\x259\x25A"+
		"\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x25C\a\x41\x2\x2\x25C\x274\x3"+
		"\x2\x2\x2\x25D\x25F\x5\f\a\x2\x25E\x25D\x3\x2\x2\x2\x25F\x262\x3\x2\x2"+
		"\x2\x260\x25E\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x266\x3\x2\x2\x2"+
		"\x262\x260\x3\x2\x2\x2\x263\x265\x5\xE\b\x2\x264\x263\x3\x2\x2\x2\x265"+
		"\x268\x3\x2\x2\x2\x266\x264\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267\x269"+
		"\x3\x2\x2\x2\x268\x266\x3\x2\x2\x2\x269\x26A\a\x17\x2\x2\x26A\x26D\x5"+
		"\x6\x4\x2\x26B\x26C\a\x42\x2\x2\x26C\x26E\x5\x1A\xE\x2\x26D\x26B\x3\x2"+
		"\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x270\a\x62\x2"+
		"\x2\x270\x271\x5J&\x2\x271\x272\a\x41\x2\x2\x272\x274\x3\x2\x2\x2\x273"+
		"\x248\x3\x2\x2\x2\x273\x260\x3\x2\x2\x2\x274\x43\x3\x2\x2\x2\x275\x276"+
		"\x5\x46$\x2\x276\x277\a\x41\x2\x2\x277\x2C1\x3\x2\x2\x2\x278\x279\x5H"+
		"%\x2\x279\x27A\a\x41\x2\x2\x27A\x2C1\x3\x2\x2\x2\x27B\x27C\a:\x2\x2\x27C"+
		"\x280\aG\x2\x2\x27D\x27F\x5\x44#\x2\x27E\x27D\x3\x2\x2\x2\x27F\x282\x3"+
		"\x2\x2\x2\x280\x27E\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x283\x3\x2"+
		"\x2\x2\x282\x280\x3\x2\x2\x2\x283\x2C1\aH\x2\x2\x284\x288\aG\x2\x2\x285"+
		"\x287\x5\x44#\x2\x286\x285\x3\x2\x2\x2\x287\x28A\x3\x2\x2\x2\x288\x286"+
		"\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289\x28B\x3\x2\x2\x2\x28A\x288\x3"+
		"\x2\x2\x2\x28B\x2C1\aH\x2\x2\x28C\x2C1\a\x41\x2\x2\x28D\x28E\x5J&\x2\x28E"+
		"\x28F\a\x41\x2\x2\x28F\x2C1\x3\x2\x2\x2\x290\x291\a\x13\x2\x2\x291\x292"+
		"\x5J&\x2\x292\x293\a\x41\x2\x2\x293\x2C1\x3\x2\x2\x2\x294\x295\a\x31\x2"+
		"\x2\x295\x296\x5J&\x2\x296\x297\a\x41\x2\x2\x297\x2C1\x3\x2\x2\x2\x298"+
		"\x299\a\x1D\x2\x2\x299\x29A\aM\x2\x2\x29A\x29B\x5J&\x2\x29B\x29C\aN\x2"+
		"\x2\x29C\x29F\x5\x44#\x2\x29D\x29E\a\x1E\x2\x2\x29E\x2A0\x5\x44#\x2\x29F"+
		"\x29D\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0\x2C1\x3\x2\x2\x2\x2A1\x2A2"+
		"\a!\x2\x2\x2A2\x2A5\aM\x2\x2\x2A3\x2A6\x5\x46$\x2\x2A4\x2A6\x5H%\x2\x2A5"+
		"\x2A3\x3\x2\x2\x2\x2A5\x2A4\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A7"+
		"\x3\x2\x2\x2\x2A7\x2A9\a\x41\x2\x2\x2A8\x2AA\x5J&\x2\x2A9\x2A8\x3\x2\x2"+
		"\x2\x2A9\x2AA\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2\x2\x2AB\x2AD\a\x41\x2\x2"+
		"\x2AC\x2AE\x5J&\x2\x2AD\x2AC\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2AF"+
		"\x3\x2\x2\x2\x2AF\x2B0\aN\x2\x2\x2B0\x2C1\x5\x44#\x2\x2B1\x2B2\a\"\x2"+
		"\x2\x2B2\x2B5\aM\x2\x2\x2B3\x2B6\x5\x46$\x2\x2B4\x2B6\x5H%\x2\x2B5\x2B3"+
		"\x3\x2\x2\x2\x2B5\x2B4\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8\a#"+
		"\x2\x2\x2B8\x2B9\x5J&\x2\x2B9\x2BA\aN\x2\x2\x2BA\x2BB\x5\x44#\x2\x2BB"+
		"\x2C1\x3\x2\x2\x2\x2BC\x2BD\a\x10\x2\x2\x2BD\x2BE\x5J&\x2\x2BE\x2BF\a"+
		"\x41\x2\x2\x2BF\x2C1\x3\x2\x2\x2\x2C0\x275\x3\x2\x2\x2\x2C0\x278\x3\x2"+
		"\x2\x2\x2C0\x27B\x3\x2\x2\x2\x2C0\x284\x3\x2\x2\x2\x2C0\x28C\x3\x2\x2"+
		"\x2\x2C0\x28D\x3\x2\x2\x2\x2C0\x290\x3\x2\x2\x2\x2C0\x294\x3\x2\x2\x2"+
		"\x2C0\x298\x3\x2\x2\x2\x2C0\x2A1\x3\x2\x2\x2\x2C0\x2B1\x3\x2\x2\x2\x2C0"+
		"\x2BC\x3\x2\x2\x2\x2C1\x45\x3\x2\x2\x2\x2C2\x2C3\a\x16\x2\x2\x2C3\x2C6"+
		"\x5\x6\x4\x2\x2C4\x2C5\a\x42\x2\x2\x2C5\x2C7\x5\x1A\xE\x2\x2C6\x2C4\x3"+
		"\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2CA\x3\x2\x2\x2\x2C8\x2C9\a\x62"+
		"\x2\x2\x2C9\x2CB\x5J&\x2\x2CA\x2C8\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB"+
		"G\x3\x2\x2\x2\x2CC\x2CD\a\x17\x2\x2\x2CD\x2D0\x5\x6\x4\x2\x2CE\x2CF\a"+
		"\x42\x2\x2\x2CF\x2D1\x5\x1A\xE\x2\x2D0\x2CE\x3\x2\x2\x2\x2D0\x2D1\x3\x2"+
		"\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x2D3\a\x62\x2\x2\x2D3\x2D4\x5J&\x2\x2D4"+
		"I\x3\x2\x2\x2\x2D5\x2D6\b&\x1\x2\x2D6\x2D7\t\a\x2\x2\x2D7\x2EA\x5J&\x16"+
		"\x2D8\x2EA\x5\x6\x4\x2\x2D9\x2DA\a\xF\x2\x2\x2DA\x2DD\x5\x16\f\x2\x2DB"+
		"\x2DC\a\x43\x2\x2\x2DC\x2DE\x5\x6\x4\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DE"+
		"\x3\x2\x2\x2\x2DE\x2DF\x3\x2\x2\x2\x2DF\x2E0\aM\x2\x2\x2E0\x2E1\x5\x32"+
		"\x1A\x2\x2E1\x2E2\aN\x2\x2\x2E2\x2EA\x3\x2\x2\x2\x2E3\x2EA\a?\x2\x2\x2E4"+
		"\x2EA\a\x12\x2\x2\x2E5\x2EA\a=\x2\x2\x2E6\x2EA\a>\x2\x2\x2E7\x2EA\a\x14"+
		"\x2\x2\x2E8\x2EA\a@\x2\x2\x2E9\x2D5\x3\x2\x2\x2\x2E9\x2D8\x3\x2\x2\x2"+
		"\x2E9\x2D9\x3\x2\x2\x2\x2E9\x2E3\x3\x2\x2\x2\x2E9\x2E4\x3\x2\x2\x2\x2E9"+
		"\x2E5\x3\x2\x2\x2\x2E9\x2E6\x3\x2\x2\x2\x2E9\x2E7\x3\x2\x2\x2\x2E9\x2E8"+
		"\x3\x2\x2\x2\x2EA\x328\x3\x2\x2\x2\x2EB\x2EC\f\x15\x2\x2\x2EC\x2ED\t\b"+
		"\x2\x2\x2ED\x327\x5J&\x16\x2EE\x2EF\f\x14\x2\x2\x2EF\x2F0\t\t\x2\x2\x2F0"+
		"\x327\x5J&\x15\x2F1\x2F6\f\x13\x2\x2\x2F2\x2F3\aI\x2\x2\x2F3\x2F7\aI\x2"+
		"\x2\x2F4\x2F5\aJ\x2\x2\x2F5\x2F7\aJ\x2\x2\x2F6\x2F2\x3\x2\x2\x2\x2F6\x2F4"+
		"\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x327\x5J&\x14\x2F9\x2FA\f\x12"+
		"\x2\x2\x2FA\x2FB\t\x4\x2\x2\x2FB\x327\x5J&\x13\x2FC\x2FD\f\x11\x2\x2\x2FD"+
		"\x2FE\t\n\x2\x2\x2FE\x327\x5J&\x12\x2FF\x300\f\x10\x2\x2\x300\x301\a\\"+
		"\x2\x2\x301\x327\x5J&\x11\x302\x303\f\xF\x2\x2\x303\x304\a]\x2\x2\x304"+
		"\x327\x5J&\x10\x305\x306\f\xE\x2\x2\x306\x307\a^\x2\x2\x307\x327\x5J&"+
		"\xF\x308\x309\f\r\x2\x2\x309\x30A\aR\x2\x2\x30A\x327\x5J&\xE\x30B\x30C"+
		"\f\f\x2\x2\x30C\x30D\aS\x2\x2\x30D\x30E\x5J&\x2\x30E\x30F\a\x42\x2\x2"+
		"\x30F\x310\x5J&\f\x310\x327\x3\x2\x2\x2\x311\x312\f\v\x2\x2\x312\x313"+
		"\t\v\x2\x2\x313\x327\x5J&\v\x314\x315\f\x1B\x2\x2\x315\x316\a\x43\x2\x2"+
		"\x316\x327\x5\x6\x4\x2\x317\x318\f\x1A\x2\x2\x318\x319\a\x45\x2\x2\x319"+
		"\x327\x5\x6\x4\x2\x31A\x31B\f\x19\x2\x2\x31B\x31C\aM\x2\x2\x31C\x31D\x5"+
		"\x32\x1A\x2\x31D\x31E\aN\x2\x2\x31E\x327\x3\x2\x2\x2\x31F\x320\f\x18\x2"+
		"\x2\x320\x321\aK\x2\x2\x321\x322\x5\x32\x1A\x2\x322\x323\aL\x2\x2\x323"+
		"\x327\x3\x2\x2\x2\x324\x325\f\x17\x2\x2\x325\x327\aS\x2\x2\x326\x2EB\x3"+
		"\x2\x2\x2\x326\x2EE\x3\x2\x2\x2\x326\x2F1\x3\x2\x2\x2\x326\x2F9\x3\x2"+
		"\x2\x2\x326\x2FC\x3\x2\x2\x2\x326\x2FF\x3\x2\x2\x2\x326\x302\x3\x2\x2"+
		"\x2\x326\x305\x3\x2\x2\x2\x326\x308\x3\x2\x2\x2\x326\x30B\x3\x2\x2\x2"+
		"\x326\x311\x3\x2\x2\x2\x326\x314\x3\x2\x2\x2\x326\x317\x3\x2\x2\x2\x326"+
		"\x31A\x3\x2\x2\x2\x326\x31F\x3\x2\x2\x2\x326\x324\x3\x2\x2\x2\x327\x32A"+
		"\x3\x2\x2\x2\x328\x326\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329K\x3\x2\x2"+
		"\x2\x32A\x328\x3\x2\x2\x2\x62OU\x65nt|\x82\x88\x8B\x90\x97\x9F\xA5\xAC"+
		"\xB0\xB4\xB9\xC9\xD1\xD8\xDC\xE0\xE8\xEB\xEF\xF4\xF8\x101\x112\x11D\x122"+
		"\x124\x12D\x134\x139\x141\x14B\x153\x15A\x163\x16B\x172\x177\x17B\x182"+
		"\x186\x18D\x193\x198\x19C\x1AC\x1B3\x1B7\x1BC\x1C2\x1CC\x1D2\x1D7\x1DF"+
		"\x1E7\x1ED\x1FA\x200\x205\x20D\x215\x21B\x221\x229\x232\x237\x243\x248"+
		"\x24E\x255\x259\x260\x266\x26D\x273\x280\x288\x29F\x2A5\x2A9\x2AD\x2B5"+
		"\x2C0\x2C6\x2CA\x2D0\x2DD\x2E9\x2F6\x326\x328";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Compiler.Antlr
