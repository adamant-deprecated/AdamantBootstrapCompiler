//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AdamantParser : Parser {
	public const int
		SingleLineDocComment=1, BlockDocComment=2, SingleLineComment=3, BlockComment=4, 
		PreprocessorLine=5, Whitespace=6, Newline=7, PreprocessorSkippedSection=8, 
		Using=9, Namespace=10, Class=11, Enum=12, New=13, Delete=14, Operator=15, 
		This=16, Return=17, Uninitialized=18, Where=19, Var=20, Let=21, Static=22, 
		Get=23, Set=24, Do=25, While=26, If=27, Else=28, Abstract=29, Params=30, 
		For=31, Foreach=32, In=33, Ref=34, Base=35, Const=36, Sealed=37, Override=38, 
		Partial=39, Yield=40, Switch=41, Break=42, Continue=43, Try=44, Catch=45, 
		Finally=46, Throw=47, Implicit=48, Explicit=49, Conversion=50, Public=51, 
		Private=52, Protected=53, Package=54, Safe=55, Unsafe=56, Own=57, Mutable=58, 
		BooleanLiteral=59, IntLiteral=60, NullLiteral=61, StringLiteral=62, Semicolon=63, 
		Colon=64, Dot=65, Comma=66, Arrow=67, Lambda=68, LeftBrace=69, RightBrace=70, 
		LeftAngle=71, RightAngle=72, LeftBracket=73, RightBracket=74, LeftParen=75, 
		RightParen=76, Asterisk=77, AtSign=78, AddressOf=79, Coalesce=80, IsNull=81, 
		Equal=82, NotEqual=83, LessThanOrEqual=84, GreaterThanOrEqual=85, TypeList=86, 
		Plus=87, Minus=88, Divide=89, And=90, Xor=91, Or=92, Not=93, Increment=94, 
		Decrement=95, Assign=96, AddAssign=97, SubtractAssign=98, MultiplyAssign=99, 
		DivideAssign=100, LeftShiftAssign=101, RightShiftAssign=102, AndAssign=103, 
		XorAssign=104, OrAssign=105, Identifier=106, EscapedIdentifier=107, Unknown=108;
	public const int
		RULE_compilationUnit = 0, RULE_usingStatement = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_namespaceMemberDeclaration = 4, RULE_namespaceDeclaration = 5, 
		RULE_typeDeclaration = 6, RULE_globalDeclaration = 7, RULE_attribute = 8, 
		RULE_modifier = 9, RULE_typeParameterList = 10, RULE_typeParameter = 11, 
		RULE_typeBase = 12, RULE_typeName = 13, RULE_typeArguments = 14, RULE_type = 15, 
		RULE_funcTypeParameterList = 16, RULE_funcTypeParameter = 17, RULE_constExpression = 18, 
		RULE_typeParameterConstraintClause = 19, RULE_typeParameterConstraint = 20, 
		RULE_typeMember = 21, RULE_parameterList = 22, RULE_parameter = 23, RULE_parameterModifier = 24, 
		RULE_constructor = 25, RULE_constructorInitializer = 26, RULE_argumentList = 27, 
		RULE_destructor = 28, RULE_method = 29, RULE_operatorOverload = 30, RULE_conversionMethod = 31, 
		RULE_property = 32, RULE_methodBody = 33, RULE_overloadableOperator = 34, 
		RULE_field = 35, RULE_statement = 36, RULE_variableDeclaration = 37, RULE_letDeclaration = 38, 
		RULE_expression = 39;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingStatement", "identifier", "namespaceName", "namespaceMemberDeclaration", 
		"namespaceDeclaration", "typeDeclaration", "globalDeclaration", "attribute", 
		"modifier", "typeParameterList", "typeParameter", "typeBase", "typeName", 
		"typeArguments", "type", "funcTypeParameterList", "funcTypeParameter", 
		"constExpression", "typeParameterConstraintClause", "typeParameterConstraint", 
		"typeMember", "parameterList", "parameter", "parameterModifier", "constructor", 
		"constructorInitializer", "argumentList", "destructor", "method", "operatorOverload", 
		"conversionMethod", "property", "methodBody", "overloadableOperator", 
		"field", "statement", "variableDeclaration", "letDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'operator'", "'this'", "'return'", 
		"'uninitialized'", "'where'", "'var'", "'let'", "'static'", "'get'", "'set'", 
		"'do'", "'while'", "'if'", "'else'", "'abstract'", "'params'", "'for'", 
		"'foreach'", "'in'", "'ref'", "'base'", "'const'", "'sealed'", "'override'", 
		"'partial'", "'yeild'", "'switch'", "'break'", "'continue'", "'try'", 
		"'catch'", "'finally'", "'throw'", "'implicit'", "'explicit'", "'conversion'", 
		"'public'", "'private'", "'protected'", "'package'", "'safe'", "'unsafe'", 
		"'own'", "'mut'", null, null, "'null'", null, "';'", "':'", "'.'", "','", 
		"'->'", "'=>'", "'{'", "'}'", "'<'", "'>'", "'['", "']'", "'('", "')'", 
		"'*'", "'@'", "'&'", "'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", "'...'", 
		"'+'", "'-'", "'/'", "'and'", "'xor'", "'or'", "'not'", "'++'", "'--'", 
		"'='", "'+='", "'-='", "'*='", "'/='", "'<<='", "'>>='", "'and='", "'xor='", 
		"'or='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "BlockDocComment", "SingleLineComment", 
		"BlockComment", "PreprocessorLine", "Whitespace", "Newline", "PreprocessorSkippedSection", 
		"Using", "Namespace", "Class", "Enum", "New", "Delete", "Operator", "This", 
		"Return", "Uninitialized", "Where", "Var", "Let", "Static", "Get", "Set", 
		"Do", "While", "If", "Else", "Abstract", "Params", "For", "Foreach", "In", 
		"Ref", "Base", "Const", "Sealed", "Override", "Partial", "Yield", "Switch", 
		"Break", "Continue", "Try", "Catch", "Finally", "Throw", "Implicit", "Explicit", 
		"Conversion", "Public", "Private", "Protected", "Package", "Safe", "Unsafe", 
		"Own", "Mutable", "BooleanLiteral", "IntLiteral", "NullLiteral", "StringLiteral", 
		"Semicolon", "Colon", "Dot", "Comma", "Arrow", "Lambda", "LeftBrace", 
		"RightBrace", "LeftAngle", "RightAngle", "LeftBracket", "RightBracket", 
		"LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", "Coalesce", 
		"IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "And", "Xor", "Or", "Not", "Increment", 
		"Decrement", "Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", 
		"DivideAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Identifier", "EscapedIdentifier", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AdamantParser.Eof, 0); }
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public NamespaceMemberDeclarationContext[] namespaceMemberDeclaration() {
			return GetRuleContexts<NamespaceMemberDeclarationContext>();
		}
		public NamespaceMemberDeclarationContext namespaceMemberDeclaration(int i) {
			return GetRuleContext<NamespaceMemberDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 80; usingStatement();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
				{
				{
				State = 86; namespaceMemberDeclaration();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 92; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStatementContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingStatementContext usingStatement() {
		UsingStatementContext _localctx = new UsingStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(Using);
			State = 95; namespaceName();
			State = 96; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(AdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_la = TokenStream.La(1);
			if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; identifier();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 101; Match(Dot);
				State = 102; identifier();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceMemberDeclarationContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public GlobalDeclarationContext globalDeclaration() {
			return GetRuleContext<GlobalDeclarationContext>(0);
		}
		public NamespaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceMemberDeclarationContext namespaceMemberDeclaration() {
		NamespaceMemberDeclarationContext _localctx = new NamespaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceMemberDeclaration);
		try {
			State = 111;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; namespaceDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; typeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110; globalDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public NamespaceMemberDeclarationContext[] namespaceMemberDeclaration() {
			return GetRuleContexts<NamespaceMemberDeclarationContext>();
		}
		public NamespaceMemberDeclarationContext namespaceMemberDeclaration(int i) {
			return GetRuleContext<NamespaceMemberDeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(Namespace);
			State = 114; namespaceName();
			State = 115; Match(LeftBrace);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 116; usingStatement();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
				{
				{
				State = 122; namespaceMemberDeclaration();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 128; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeBaseContext typeBase() {
			return GetRuleContext<TypeBaseContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public TypeMemberContext[] typeMember() {
			return GetRuleContexts<TypeMemberContext>();
		}
		public TypeMemberContext typeMember(int i) {
			return GetRuleContext<TypeMemberContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 130; attribute();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 136; modifier();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 142; Match(Class);
			State = 143; identifier();
			State = 145;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 144; typeParameterList();
				}
			}

			State = 148;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 147; typeBase();
				}
			}

			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 150; typeParameterConstraintClause();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 156; Match(LeftBrace);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Static) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
				{
				{
				State = 157; typeMember();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 163; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_globalDeclaration);
		int _la;
		try {
			State = 211;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 165; attribute();
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 171; modifier();
					}
					}
					State = 176;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 177; Match(Var);
				State = 178; identifier();
				State = 181;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 179; Match(Colon);
					State = 180; type(0);
					}
				}

				State = 185;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 183; Match(Assign);
					State = 184; expression(0);
					}
				}

				State = 187; Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 189; attribute();
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 195; modifier();
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 201; Match(Let);
				State = 202; identifier();
				State = 205;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 203; Match(Colon);
					State = 204; type(0);
					}
				}

				State = 207; Match(Assign);
				State = 208; expression(0);
				State = 209; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 16, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(EscapedIdentifier);
			State = 216;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 214; Match(LeftParen);
				State = 215; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken Symbol;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_modifier);
		try {
			State = 232;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; _localctx.Symbol = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; _localctx.Symbol = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220; _localctx.Symbol = Match(Protected);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 4);
				{
				State = 221; _localctx.Symbol = Match(Package);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 222; _localctx.Symbol = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 223; _localctx.Symbol = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 224; _localctx.Symbol = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 225; _localctx.Symbol = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 226; _localctx.Symbol = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 227; _localctx.Symbol = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 228; _localctx.Symbol = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 229; _localctx.Symbol = Match(Override);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 13);
				{
				State = 230; _localctx.Symbol = Match(Static);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 14);
				{
				State = 231; _localctx.Symbol = Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(LeftAngle);
			State = 235; typeParameter();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 236; Match(Comma);
				State = 237; typeParameter();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 243; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; identifier();
			State = 247;
			_la = TokenStream.La(1);
			if (_la==TypeList) {
				{
				State = 246; Match(TypeList);
				}
			}

			State = 251;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 249; Match(Colon);
				State = 250; typeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBaseContext : ParserRuleContext {
		public TypeNameContext baseType;
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _interfaces = new List<TypeNameContext>();
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public TypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBaseContext typeBase() {
		TypeBaseContext _localctx = new TypeBaseContext(Context, State);
		EnterRule(_localctx, 24, RULE_typeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(Colon);
			State = 255;
			_la = TokenStream.La(1);
			if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) {
				{
				State = 254; _localctx.baseType = typeName();
				}
			}

			State = 266;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 257; Match(Colon);
				State = 258; _localctx._typeName = typeName();
				_localctx._interfaces.Add(_localctx._typeName);
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 259; Match(Comma);
					State = 260; _localctx._typeName = typeName();
					_localctx._interfaces.Add(_localctx._typeName);
					}
					}
					State = 265;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; identifier();
			State = 270;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 269; typeArguments();
				}
				break;
			}
			State = 279;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 272; Match(Dot);
					State = 273; identifier();
					State = 275;
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						State = 274; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 281;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(LeftAngle);
			State = 283; type(0);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 284; Match(Comma);
				State = 285; type(0);
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 291; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ConstExpressionContext[] constExpression() {
			return GetRuleContexts<ConstExpressionContext>();
		}
		public ConstExpressionContext constExpression(int i) {
			return GetRuleContext<ConstExpressionContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			switch (TokenStream.La(1)) {
			case Mutable:
				{
				State = 294; Match(Mutable);
				State = 295; type(4);
				}
				break;
			case Own:
				{
				State = 296; Match(Own);
				State = 297; type(3);
				}
				break;
			case Ref:
				{
				State = 298; Match(Ref);
				State = 299; type(2);
				}
				break;
			case LeftParen:
				{
				State = 300; funcTypeParameterList();
				State = 301; Match(Lambda);
				State = 302; type(1);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				{
				State = 304; typeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 323;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 321;
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 307;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 308; Match(Asterisk);
						}
						break;
					case 2:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 309;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 310; Match(LeftBracket);
						State = 311; constExpression();
						State = 316;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 312; Match(Comma);
							State = 313; constExpression();
							}
							}
							State = 318;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 319; Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 32, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 339;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326; Match(LeftParen);
				State = 327; funcTypeParameter();
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 328; Match(Comma);
					State = 329; funcTypeParameter();
					}
					}
					State = 334;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 335; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337; Match(LeftParen);
				State = 338; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 34, RULE_funcTypeParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 341; parameterModifier();
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			State = 347; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_constExpression);
		try {
			State = 352;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350; Match(StringLiteral);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 351; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 370;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354; Match(Where);
				State = 355; typeParameter();
				State = 356; Match(Colon);
				State = 357; typeParameterConstraint();
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 358; Match(Comma);
					State = 359; typeParameterConstraint();
					}
					}
					State = 364;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; Match(Where);
				State = 366; typeParameter();
				State = 367;
				_la = TokenStream.La(1);
				if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (LeftAngle - 71)) | (1L << (RightAngle - 71)) | (1L << (LessThanOrEqual - 71)) | (1L << (GreaterThanOrEqual - 71)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 368; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeParameterConstraint);
		try {
			State = 377;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 372; Match(New);
				State = 373; Match(LeftParen);
				State = 374; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 375; typeName();
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 376; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberContext : ParserRuleContext {
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public ConversionMethodContext conversionMethod() {
			return GetRuleContext<ConversionMethodContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public OperatorOverloadContext operatorOverload() {
			return GetRuleContext<OperatorOverloadContext>(0);
		}
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public TypeMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberContext typeMember() {
		TypeMemberContext _localctx = new TypeMemberContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeMember);
		try {
			State = 386;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; constructor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; destructor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381; conversionMethod();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 382; method();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 383; operatorOverload();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 384; field();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 385; property();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterList);
		int _la;
		try {
			State = 401;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 388; Match(LeftParen);
				State = 389; parameter();
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 390; Match(Comma);
					State = 391; parameter();
					}
					}
					State = 396;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 397; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399; Match(LeftParen);
				State = 400; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_parameter);
		int _la;
		try {
			State = 421;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) {
					{
					{
					State = 403; parameterModifier();
					}
					}
					State = 408;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 410;
				_la = TokenStream.La(1);
				if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) {
					{
					State = 409; identifier();
					}
				}

				State = 412; Match(Colon);
				State = 413; type(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) {
					{
					{
					State = 414; parameterModifier();
					}
					}
					State = 419;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 420; Match(This);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameterModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 50, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 425; attribute();
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 431; modifier();
				}
				}
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 437; Match(New);
			State = 439;
			_la = TokenStream.La(1);
			if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) {
				{
				State = 438; identifier();
				}
			}

			State = 441; parameterList();
			State = 443;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 442; constructorInitializer();
				}
			}

			State = 445; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 52, RULE_constructorInitializer);
		try {
			State = 459;
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447; Match(Colon);
				State = 448; Match(Base);
				State = 449; Match(LeftParen);
				State = 450; argumentList();
				State = 451; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 453; Match(Colon);
				State = 454; Match(This);
				State = 455; Match(LeftParen);
				State = 456; argumentList();
				State = 457; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 54, RULE_argumentList);
		int _la;
		try {
			State = 470;
			switch (TokenStream.La(1)) {
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 461; expression(0);
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 462; Match(Comma);
					State = 463; expression(0);
					}
					}
					State = 468;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(Context, State);
		EnterRule(_localctx, 56, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 472; attribute();
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 478; modifier();
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 484; Match(Delete);
			State = 485; parameterList();
			State = 486; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 58, RULE_method);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 488; attribute();
					}
					} 
				}
				State = 493;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 494; modifier();
				}
				}
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 500; identifier();
			State = 502;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 501; typeArguments();
				}
			}

			State = 504; parameterList();
			State = 505; Match(Lambda);
			State = 506; type(0);
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 507; typeParameterConstraintClause();
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 513; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOverloadContext : ParserRuleContext {
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OperatorOverloadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOverload; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOverloadContext operatorOverload() {
		OperatorOverloadContext _localctx = new OperatorOverloadContext(Context, State);
		EnterRule(_localctx, 60, RULE_operatorOverload);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 515; attribute();
				}
				}
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 521; modifier();
				}
				}
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 527; Match(Operator);
			State = 528; overloadableOperator();
			State = 529; parameterList();
			State = 530; Match(Lambda);
			State = 531; type(0);
			State = 532; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionMethodContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ConversionMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionMethodContext conversionMethod() {
		ConversionMethodContext _localctx = new ConversionMethodContext(Context, State);
		EnterRule(_localctx, 62, RULE_conversionMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 534; attribute();
				}
				}
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 540; modifier();
				}
				}
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 546; Match(Conversion);
			State = 548;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 547; typeArguments();
				}
			}

			State = 550; parameterList();
			State = 551; Match(Lambda);
			State = 552; type(0);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 553; typeParameterConstraintClause();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 559; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 64, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 561; attribute();
				}
				}
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 567; modifier();
				}
				}
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 573;
			_la = TokenStream.La(1);
			if ( !(_la==Get || _la==Set) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 574; identifier();
			State = 576;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 575; typeArguments();
				}
			}

			State = 578; parameterList();
			State = 579; Match(Lambda);
			State = 580; type(0);
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 581; typeParameterConstraintClause();
				}
				}
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 587; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 66, RULE_methodBody);
		int _la;
		try {
			State = 598;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 589; Match(LeftBrace);
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 590; statement();
					}
					}
					State = 595;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 596; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 597; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_overloadableOperator);
		try {
			State = 610;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 600; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 601; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 602; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 603; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 604; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 605; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 606; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 607; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 608; Match(LeftBracket);
				State = 609; Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 70, RULE_field);
		int _la;
		try {
			State = 658;
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 615;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 612; attribute();
					}
					}
					State = 617;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 618; modifier();
					}
					}
					State = 623;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 624; Match(Var);
				State = 625; identifier();
				State = 628;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 626; Match(Colon);
					State = 627; type(0);
					}
				}

				State = 632;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 630; Match(Assign);
					State = 631; expression(0);
					}
				}

				State = 634; Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 636; attribute();
					}
					}
					State = 641;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 642; modifier();
					}
					}
					State = 647;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 648; Match(Let);
				State = 649; identifier();
				State = 652;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 650; Match(Colon);
					State = 651; type(0);
					}
				}

				State = 654; Match(Assign);
				State = 655; expression(0);
				State = 656; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetDeclarationStatementContext : StatementContext {
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public LetDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_statement);
		int _la;
		try {
			State = 735;
			switch (TokenStream.La(1)) {
			case Var:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 660; variableDeclaration();
				State = 661; Match(Semicolon);
				}
				break;
			case Let:
				_localctx = new LetDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 663; letDeclaration();
				State = 664; Match(Semicolon);
				}
				break;
			case Unsafe:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 666; Match(Unsafe);
				State = 667; Match(LeftBrace);
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 668; statement();
					}
					}
					State = 673;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 674; Match(RightBrace);
				}
				break;
			case LeftBrace:
				_localctx = new BlockContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 675; Match(LeftBrace);
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 676; statement();
					}
					}
					State = 681;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 682; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 683; Match(Semicolon);
				}
				break;
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 684; expression(0);
				State = 685; Match(Semicolon);
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 687; Match(Return);
				State = 688; expression(0);
				State = 689; Match(Semicolon);
				}
				break;
			case Throw:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 691; Match(Throw);
				State = 692; expression(0);
				State = 693; Match(Semicolon);
				}
				break;
			case If:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 695; Match(If);
				State = 696; Match(LeftParen);
				State = 697; expression(0);
				State = 698; Match(RightParen);
				State = 699; statement();
				State = 702;
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 700; Match(Else);
					State = 701; statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 704; Match(For);
				State = 705; Match(LeftParen);
				State = 708;
				switch (TokenStream.La(1)) {
				case Var:
					{
					State = 706; variableDeclaration();
					}
					break;
				case Let:
					{
					State = 707; letDeclaration();
					}
					break;
				case Semicolon:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 710; Match(Semicolon);
				State = 712;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					State = 711; expression(0);
					}
				}

				State = 714; Match(Semicolon);
				State = 716;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					State = 715; expression(0);
					}
				}

				State = 718; Match(RightParen);
				State = 719; statement();
				}
				break;
			case Foreach:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 720; Match(Foreach);
				State = 721; Match(LeftParen);
				State = 724;
				switch (TokenStream.La(1)) {
				case Var:
					{
					State = 722; variableDeclaration();
					}
					break;
				case Let:
					{
					State = 723; letDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 726; Match(In);
				State = 727; expression(0);
				State = 728; Match(RightParen);
				State = 729; statement();
				}
				break;
			case Delete:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 731; Match(Delete);
				State = 732; expression(0);
				State = 733; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737; Match(Var);
			State = 738; identifier();
			State = 741;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 739; Match(Colon);
				State = 740; type(0);
				}
			}

			State = 745;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 743; Match(Assign);
				State = 744; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public LetDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetDeclarationContext letDeclaration() {
		LetDeclarationContext _localctx = new LetDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_letDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747; Match(Let);
			State = 748; identifier();
			State = 751;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 749; Match(Colon);
				State = 750; type(0);
				}
			}

			State = 753; Match(Assign);
			State = 754; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(AdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public IToken s71;
		public IList<IToken> _ops = new List<IToken>();
		public IToken s72;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			switch (TokenStream.La(1)) {
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 757;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 758; expression(20);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 759; identifier();
				}
				break;
			case New:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 760; Match(New);
				State = 761; typeName();
				State = 764;
				_la = TokenStream.La(1);
				if (_la==Dot) {
					{
					State = 762; Match(Dot);
					State = 763; identifier();
					}
				}

				State = 766; Match(LeftParen);
				State = 767; argumentList();
				State = 768; Match(RightParen);
				}
				break;
			case NullLiteral:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 770; Match(NullLiteral);
				}
				break;
			case This:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 771; Match(This);
				}
				break;
			case BooleanLiteral:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 772; Match(BooleanLiteral);
				}
				break;
			case IntLiteral:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 773; Match(IntLiteral);
				}
				break;
			case Uninitialized:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 774; Match(Uninitialized);
				}
				break;
			case StringLiteral:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 775; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 839;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 837;
					switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 778;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 779;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 780; expression(20);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 781;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 782;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 783; expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 784;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 789;
						switch (TokenStream.La(1)) {
						case LeftAngle:
							{
							State = 785; ((ShiftExpressionContext)_localctx).s71 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							State = 786; ((ShiftExpressionContext)_localctx).s71 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							}
							break;
						case RightAngle:
							{
							State = 787; ((ShiftExpressionContext)_localctx).s72 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s72);
							State = 788; ((ShiftExpressionContext)_localctx).s72 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s72);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 791; expression(18);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 792;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 793;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (LeftAngle - 71)) | (1L << (RightAngle - 71)) | (1L << (LessThanOrEqual - 71)) | (1L << (GreaterThanOrEqual - 71)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 794; expression(17);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 795;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 796;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 797; expression(16);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 798;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 799; Match(And);
						State = 800; expression(15);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 801;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 802; Match(Xor);
						State = 803; expression(14);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 804;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 805; Match(Or);
						State = 806; expression(13);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 807;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 808; Match(Coalesce);
						State = 809; expression(12);
						}
						break;
					case 10:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 810;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 811; Match(IsNull);
						State = 812; expression(0);
						State = 813; Match(Colon);
						State = 814; expression(10);
						}
						break;
					case 11:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 816;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 817;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (Assign - 96)) | (1L << (AddAssign - 96)) | (1L << (SubtractAssign - 96)) | (1L << (MultiplyAssign - 96)) | (1L << (DivideAssign - 96)) | (1L << (LeftShiftAssign - 96)) | (1L << (RightShiftAssign - 96)) | (1L << (AndAssign - 96)) | (1L << (XorAssign - 96)) | (1L << (OrAssign - 96)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 818; expression(9);
						}
						break;
					case 12:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 819;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 820; Match(Dot);
						State = 821; identifier();
						}
						break;
					case 13:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 822;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 823; Match(Arrow);
						State = 824; identifier();
						}
						break;
					case 14:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 825;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 826; Match(LeftParen);
						State = 827; argumentList();
						State = 828; Match(RightParen);
						}
						break;
					case 15:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 830;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 831; Match(LeftBracket);
						State = 832; argumentList();
						State = 833; Match(RightBracket);
						}
						break;
					case 16:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 835;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 836; Match(IsNull);
						}
						break;
					}
					} 
				}
				State = 841;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return type_sempred((TypeContext)_localctx, predIndex);
		case 39: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 19);
		case 3: return Precpred(Context, 18);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 16);
		case 6: return Precpred(Context, 15);
		case 7: return Precpred(Context, 14);
		case 8: return Precpred(Context, 13);
		case 9: return Precpred(Context, 12);
		case 10: return Precpred(Context, 11);
		case 11: return Precpred(Context, 10);
		case 12: return Precpred(Context, 9);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 24);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3n\x34D\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\a\x2T\n\x2\f\x2\xE\x2W\v\x2\x3\x2\a\x2Z\n\x2\f\x2\xE\x2]\v\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5j\n\x5\f"+
		"\x5\xE\x5m\v\x5\x3\x6\x3\x6\x3\x6\x5\x6r\n\x6\x3\a\x3\a\x3\a\x3\a\a\a"+
		"x\n\a\f\a\xE\a{\v\a\x3\a\a\a~\n\a\f\a\xE\a\x81\v\a\x3\a\x3\a\x3\b\a\b"+
		"\x86\n\b\f\b\xE\b\x89\v\b\x3\b\a\b\x8C\n\b\f\b\xE\b\x8F\v\b\x3\b\x3\b"+
		"\x3\b\x5\b\x94\n\b\x3\b\x5\b\x97\n\b\x3\b\a\b\x9A\n\b\f\b\xE\b\x9D\v\b"+
		"\x3\b\x3\b\a\b\xA1\n\b\f\b\xE\b\xA4\v\b\x3\b\x3\b\x3\t\a\t\xA9\n\t\f\t"+
		"\xE\t\xAC\v\t\x3\t\a\t\xAF\n\t\f\t\xE\t\xB2\v\t\x3\t\x3\t\x3\t\x3\t\x5"+
		"\t\xB8\n\t\x3\t\x3\t\x5\t\xBC\n\t\x3\t\x3\t\x3\t\a\t\xC1\n\t\f\t\xE\t"+
		"\xC4\v\t\x3\t\a\t\xC7\n\t\f\t\xE\t\xCA\v\t\x3\t\x3\t\x3\t\x3\t\x5\t\xD0"+
		"\n\t\x3\t\x3\t\x3\t\x3\t\x5\t\xD6\n\t\x3\n\x3\n\x3\n\x5\n\xDB\n\n\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v"+
		"\xEB\n\v\x3\f\x3\f\x3\f\x3\f\a\f\xF1\n\f\f\f\xE\f\xF4\v\f\x3\f\x3\f\x3"+
		"\r\x3\r\x5\r\xFA\n\r\x3\r\x3\r\x5\r\xFE\n\r\x3\xE\x3\xE\x5\xE\x102\n\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x108\n\xE\f\xE\xE\xE\x10B\v\xE\x5\xE\x10D"+
		"\n\xE\x3\xF\x3\xF\x5\xF\x111\n\xF\x3\xF\x3\xF\x3\xF\x5\xF\x116\n\xF\a"+
		"\xF\x118\n\xF\f\xF\xE\xF\x11B\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x121"+
		"\n\x10\f\x10\xE\x10\x124\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x134\n"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x13D\n\x11"+
		"\f\x11\xE\x11\x140\v\x11\x3\x11\x3\x11\a\x11\x144\n\x11\f\x11\xE\x11\x147"+
		"\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x14D\n\x12\f\x12\xE\x12\x150"+
		"\v\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x156\n\x12\x3\x13\a\x13\x159"+
		"\n\x13\f\x13\xE\x13\x15C\v\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x5\x14"+
		"\x163\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x16B\n\x15"+
		"\f\x15\xE\x15\x16E\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x175"+
		"\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x17C\n\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x185\n\x17\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\a\x18\x18B\n\x18\f\x18\xE\x18\x18E\v\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x5\x18\x194\n\x18\x3\x19\a\x19\x197\n\x19\f\x19\xE\x19"+
		"\x19A\v\x19\x3\x19\x5\x19\x19D\n\x19\x3\x19\x3\x19\x3\x19\a\x19\x1A2\n"+
		"\x19\f\x19\xE\x19\x1A5\v\x19\x3\x19\x5\x19\x1A8\n\x19\x3\x1A\x3\x1A\x3"+
		"\x1B\a\x1B\x1AD\n\x1B\f\x1B\xE\x1B\x1B0\v\x1B\x3\x1B\a\x1B\x1B3\n\x1B"+
		"\f\x1B\xE\x1B\x1B6\v\x1B\x3\x1B\x3\x1B\x5\x1B\x1BA\n\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x1BE\n\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x1CE\n\x1C\x3\x1D"+
		"\x3\x1D\x3\x1D\a\x1D\x1D3\n\x1D\f\x1D\xE\x1D\x1D6\v\x1D\x3\x1D\x5\x1D"+
		"\x1D9\n\x1D\x3\x1E\a\x1E\x1DC\n\x1E\f\x1E\xE\x1E\x1DF\v\x1E\x3\x1E\a\x1E"+
		"\x1E2\n\x1E\f\x1E\xE\x1E\x1E5\v\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\a\x1F\x1EC\n\x1F\f\x1F\xE\x1F\x1EF\v\x1F\x3\x1F\a\x1F\x1F2\n\x1F\f\x1F"+
		"\xE\x1F\x1F5\v\x1F\x3\x1F\x3\x1F\x5\x1F\x1F9\n\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\a\x1F\x1FF\n\x1F\f\x1F\xE\x1F\x202\v\x1F\x3\x1F\x3\x1F\x3 \a "+
		"\x207\n \f \xE \x20A\v \x3 \a \x20D\n \f \xE \x210\v \x3 \x3 \x3 \x3 "+
		"\x3 \x3 \x3 \x3!\a!\x21A\n!\f!\xE!\x21D\v!\x3!\a!\x220\n!\f!\xE!\x223"+
		"\v!\x3!\x3!\x5!\x227\n!\x3!\x3!\x3!\x3!\a!\x22D\n!\f!\xE!\x230\v!\x3!"+
		"\x3!\x3\"\a\"\x235\n\"\f\"\xE\"\x238\v\"\x3\"\a\"\x23B\n\"\f\"\xE\"\x23E"+
		"\v\"\x3\"\x3\"\x3\"\x5\"\x243\n\"\x3\"\x3\"\x3\"\x3\"\a\"\x249\n\"\f\""+
		"\xE\"\x24C\v\"\x3\"\x3\"\x3#\x3#\a#\x252\n#\f#\xE#\x255\v#\x3#\x3#\x5"+
		"#\x259\n#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x265\n$\x3%\a%\x268"+
		"\n%\f%\xE%\x26B\v%\x3%\a%\x26E\n%\f%\xE%\x271\v%\x3%\x3%\x3%\x3%\x5%\x277"+
		"\n%\x3%\x3%\x5%\x27B\n%\x3%\x3%\x3%\a%\x280\n%\f%\xE%\x283\v%\x3%\a%\x286"+
		"\n%\f%\xE%\x289\v%\x3%\x3%\x3%\x3%\x5%\x28F\n%\x3%\x3%\x3%\x3%\x5%\x295"+
		"\n%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\a&\x2A0\n&\f&\xE&\x2A3\v&\x3&"+
		"\x3&\x3&\a&\x2A8\n&\f&\xE&\x2AB\v&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x2C1\n&\x3&\x3&\x3&"+
		"\x3&\x5&\x2C7\n&\x3&\x3&\x5&\x2CB\n&\x3&\x3&\x5&\x2CF\n&\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\x5&\x2D7\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x2E2\n&"+
		"\x3\'\x3\'\x3\'\x3\'\x5\'\x2E8\n\'\x3\'\x3\'\x5\'\x2EC\n\'\x3(\x3(\x3"+
		"(\x3(\x5(\x2F2\n(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x2FF"+
		"\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x30B\n)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x318\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3)\x3)\x3)\a)\x348\n)\f)\xE)\x34B\v)\x3)\x2\x4 P*\x2\x4\x6\b\n\f"+
		"\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLNP\x2\v\x4\x2\x34\x34lm\x4\x2IJVW\x4\x2  ;<\x3\x2\x19\x1A\x6"+
		"\x2OOQQYZ_\x61\x4\x2OO[[\x3\x2YZ\x3\x2TU\x3\x2\x62k\x3C6\x2U\x3\x2\x2"+
		"\x2\x4`\x3\x2\x2\x2\x6\x64\x3\x2\x2\x2\b\x66\x3\x2\x2\x2\nq\x3\x2\x2\x2"+
		"\fs\x3\x2\x2\x2\xE\x87\x3\x2\x2\x2\x10\xD5\x3\x2\x2\x2\x12\xD7\x3\x2\x2"+
		"\x2\x14\xEA\x3\x2\x2\x2\x16\xEC\x3\x2\x2\x2\x18\xF7\x3\x2\x2\x2\x1A\xFF"+
		"\x3\x2\x2\x2\x1C\x10E\x3\x2\x2\x2\x1E\x11C\x3\x2\x2\x2 \x133\x3\x2\x2"+
		"\x2\"\x155\x3\x2\x2\x2$\x15A\x3\x2\x2\x2&\x162\x3\x2\x2\x2(\x174\x3\x2"+
		"\x2\x2*\x17B\x3\x2\x2\x2,\x184\x3\x2\x2\x2.\x193\x3\x2\x2\x2\x30\x1A7"+
		"\x3\x2\x2\x2\x32\x1A9\x3\x2\x2\x2\x34\x1AE\x3\x2\x2\x2\x36\x1CD\x3\x2"+
		"\x2\x2\x38\x1D8\x3\x2\x2\x2:\x1DD\x3\x2\x2\x2<\x1ED\x3\x2\x2\x2>\x208"+
		"\x3\x2\x2\x2@\x21B\x3\x2\x2\x2\x42\x236\x3\x2\x2\x2\x44\x258\x3\x2\x2"+
		"\x2\x46\x264\x3\x2\x2\x2H\x294\x3\x2\x2\x2J\x2E1\x3\x2\x2\x2L\x2E3\x3"+
		"\x2\x2\x2N\x2ED\x3\x2\x2\x2P\x30A\x3\x2\x2\x2RT\x5\x4\x3\x2SR\x3\x2\x2"+
		"\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2V[\x3\x2\x2\x2WU\x3\x2\x2"+
		"\x2XZ\x5\n\x6\x2YX\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2"+
		"\x2\\^\x3\x2\x2\x2][\x3\x2\x2\x2^_\a\x2\x2\x3_\x3\x3\x2\x2\x2`\x61\a\v"+
		"\x2\x2\x61\x62\x5\b\x5\x2\x62\x63\a\x41\x2\x2\x63\x5\x3\x2\x2\x2\x64\x65"+
		"\t\x2\x2\x2\x65\a\x3\x2\x2\x2\x66k\x5\x6\x4\x2gh\a\x43\x2\x2hj\x5\x6\x4"+
		"\x2ig\x3\x2\x2\x2jm\x3\x2\x2\x2ki\x3\x2\x2\x2kl\x3\x2\x2\x2l\t\x3\x2\x2"+
		"\x2mk\x3\x2\x2\x2nr\x5\f\a\x2or\x5\xE\b\x2pr\x5\x10\t\x2qn\x3\x2\x2\x2"+
		"qo\x3\x2\x2\x2qp\x3\x2\x2\x2r\v\x3\x2\x2\x2st\a\f\x2\x2tu\x5\b\x5\x2u"+
		"y\aG\x2\x2vx\x5\x4\x3\x2wv\x3\x2\x2\x2x{\x3\x2\x2\x2yw\x3\x2\x2\x2yz\x3"+
		"\x2\x2\x2z\x7F\x3\x2\x2\x2{y\x3\x2\x2\x2|~\x5\n\x6\x2}|\x3\x2\x2\x2~\x81"+
		"\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x82\x3\x2\x2\x2"+
		"\x81\x7F\x3\x2\x2\x2\x82\x83\aH\x2\x2\x83\r\x3\x2\x2\x2\x84\x86\x5\x12"+
		"\n\x2\x85\x84\x3\x2\x2\x2\x86\x89\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87"+
		"\x88\x3\x2\x2\x2\x88\x8D\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x8A\x8C\x5\x14"+
		"\v\x2\x8B\x8A\x3\x2\x2\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D"+
		"\x8E\x3\x2\x2\x2\x8E\x90\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\x91\a\r\x2"+
		"\x2\x91\x93\x5\x6\x4\x2\x92\x94\x5\x16\f\x2\x93\x92\x3\x2\x2\x2\x93\x94"+
		"\x3\x2\x2\x2\x94\x96\x3\x2\x2\x2\x95\x97\x5\x1A\xE\x2\x96\x95\x3\x2\x2"+
		"\x2\x96\x97\x3\x2\x2\x2\x97\x9B\x3\x2\x2\x2\x98\x9A\x5(\x15\x2\x99\x98"+
		"\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2"+
		"\x2\x9C\x9E\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9E\xA2\aG\x2\x2\x9F\xA1\x5"+
		",\x17\x2\xA0\x9F\x3\x2\x2\x2\xA1\xA4\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA2"+
		"\xA3\x3\x2\x2\x2\xA3\xA5\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA5\xA6\aH\x2"+
		"\x2\xA6\xF\x3\x2\x2\x2\xA7\xA9\x5\x12\n\x2\xA8\xA7\x3\x2\x2\x2\xA9\xAC"+
		"\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xB0\x3\x2\x2"+
		"\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAF\x5\x14\v\x2\xAE\xAD\x3\x2\x2\x2\xAF\xB2"+
		"\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB3\x3\x2\x2"+
		"\x2\xB2\xB0\x3\x2\x2\x2\xB3\xB4\a\x16\x2\x2\xB4\xB7\x5\x6\x4\x2\xB5\xB6"+
		"\a\x42\x2\x2\xB6\xB8\x5 \x11\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2"+
		"\xB8\xBB\x3\x2\x2\x2\xB9\xBA\a\x62\x2\x2\xBA\xBC\x5P)\x2\xBB\xB9\x3\x2"+
		"\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\a\x41\x2\x2\xBE"+
		"\xD6\x3\x2\x2\x2\xBF\xC1\x5\x12\n\x2\xC0\xBF\x3\x2\x2\x2\xC1\xC4\x3\x2"+
		"\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC8\x3\x2\x2\x2\xC4"+
		"\xC2\x3\x2\x2\x2\xC5\xC7\x5\x14\v\x2\xC6\xC5\x3\x2\x2\x2\xC7\xCA\x3\x2"+
		"\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA"+
		"\xC8\x3\x2\x2\x2\xCB\xCC\a\x17\x2\x2\xCC\xCF\x5\x6\x4\x2\xCD\xCE\a\x42"+
		"\x2\x2\xCE\xD0\x5 \x11\x2\xCF\xCD\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0"+
		"\xD1\x3\x2\x2\x2\xD1\xD2\a\x62\x2\x2\xD2\xD3\x5P)\x2\xD3\xD4\a\x41\x2"+
		"\x2\xD4\xD6\x3\x2\x2\x2\xD5\xAA\x3\x2\x2\x2\xD5\xC2\x3\x2\x2\x2\xD6\x11"+
		"\x3\x2\x2\x2\xD7\xDA\am\x2\x2\xD8\xD9\aM\x2\x2\xD9\xDB\aN\x2\x2\xDA\xD8"+
		"\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\x13\x3\x2\x2\x2\xDC\xEB\a\x35\x2"+
		"\x2\xDD\xEB\a\x36\x2\x2\xDE\xEB\a\x37\x2\x2\xDF\xEB\a\x38\x2\x2\xE0\xEB"+
		"\a\x39\x2\x2\xE1\xEB\a:\x2\x2\xE2\xEB\a\x1F\x2\x2\xE3\xEB\a)\x2\x2\xE4"+
		"\xEB\a\x32\x2\x2\xE5\xEB\a\x33\x2\x2\xE6\xEB\a\'\x2\x2\xE7\xEB\a(\x2\x2"+
		"\xE8\xEB\a\x18\x2\x2\xE9\xEB\a&\x2\x2\xEA\xDC\x3\x2\x2\x2\xEA\xDD\x3\x2"+
		"\x2\x2\xEA\xDE\x3\x2\x2\x2\xEA\xDF\x3\x2\x2\x2\xEA\xE0\x3\x2\x2\x2\xEA"+
		"\xE1\x3\x2\x2\x2\xEA\xE2\x3\x2\x2\x2\xEA\xE3\x3\x2\x2\x2\xEA\xE4\x3\x2"+
		"\x2\x2\xEA\xE5\x3\x2\x2\x2\xEA\xE6\x3\x2\x2\x2\xEA\xE7\x3\x2\x2\x2\xEA"+
		"\xE8\x3\x2\x2\x2\xEA\xE9\x3\x2\x2\x2\xEB\x15\x3\x2\x2\x2\xEC\xED\aI\x2"+
		"\x2\xED\xF2\x5\x18\r\x2\xEE\xEF\a\x44\x2\x2\xEF\xF1\x5\x18\r\x2\xF0\xEE"+
		"\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2\x2"+
		"\x2\xF3\xF5\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF6\aJ\x2\x2\xF6\x17\x3"+
		"\x2\x2\x2\xF7\xF9\x5\x6\x4\x2\xF8\xFA\aX\x2\x2\xF9\xF8\x3\x2\x2\x2\xF9"+
		"\xFA\x3\x2\x2\x2\xFA\xFD\x3\x2\x2\x2\xFB\xFC\a\x42\x2\x2\xFC\xFE\x5\x1C"+
		"\xF\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x19\x3\x2\x2\x2\xFF"+
		"\x101\a\x42\x2\x2\x100\x102\x5\x1C\xF\x2\x101\x100\x3\x2\x2\x2\x101\x102"+
		"\x3\x2\x2\x2\x102\x10C\x3\x2\x2\x2\x103\x104\a\x42\x2\x2\x104\x109\x5"+
		"\x1C\xF\x2\x105\x106\a\x44\x2\x2\x106\x108\x5\x1C\xF\x2\x107\x105\x3\x2"+
		"\x2\x2\x108\x10B\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x10A\x3\x2\x2"+
		"\x2\x10A\x10D\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\x103\x3\x2\x2\x2"+
		"\x10C\x10D\x3\x2\x2\x2\x10D\x1B\x3\x2\x2\x2\x10E\x110\x5\x6\x4\x2\x10F"+
		"\x111\x5\x1E\x10\x2\x110\x10F\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111\x119"+
		"\x3\x2\x2\x2\x112\x113\a\x43\x2\x2\x113\x115\x5\x6\x4\x2\x114\x116\x5"+
		"\x1E\x10\x2\x115\x114\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x118\x3\x2"+
		"\x2\x2\x117\x112\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119\x117\x3\x2\x2"+
		"\x2\x119\x11A\x3\x2\x2\x2\x11A\x1D\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11C"+
		"\x11D\aI\x2\x2\x11D\x122\x5 \x11\x2\x11E\x11F\a\x44\x2\x2\x11F\x121\x5"+
		" \x11\x2\x120\x11E\x3\x2\x2\x2\x121\x124\x3\x2\x2\x2\x122\x120\x3\x2\x2"+
		"\x2\x122\x123\x3\x2\x2\x2\x123\x125\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2"+
		"\x125\x126\aJ\x2\x2\x126\x1F\x3\x2\x2\x2\x127\x128\b\x11\x1\x2\x128\x129"+
		"\a<\x2\x2\x129\x134\x5 \x11\x6\x12A\x12B\a;\x2\x2\x12B\x134\x5 \x11\x5"+
		"\x12C\x12D\a$\x2\x2\x12D\x134\x5 \x11\x4\x12E\x12F\x5\"\x12\x2\x12F\x130"+
		"\a\x46\x2\x2\x130\x131\x5 \x11\x3\x131\x134\x3\x2\x2\x2\x132\x134\x5\x1C"+
		"\xF\x2\x133\x127\x3\x2\x2\x2\x133\x12A\x3\x2\x2\x2\x133\x12C\x3\x2\x2"+
		"\x2\x133\x12E\x3\x2\x2\x2\x133\x132\x3\x2\x2\x2\x134\x145\x3\x2\x2\x2"+
		"\x135\x136\f\b\x2\x2\x136\x144\aO\x2\x2\x137\x138\f\a\x2\x2\x138\x139"+
		"\aK\x2\x2\x139\x13E\x5&\x14\x2\x13A\x13B\a\x44\x2\x2\x13B\x13D\x5&\x14"+
		"\x2\x13C\x13A\x3\x2\x2\x2\x13D\x140\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2"+
		"\x13E\x13F\x3\x2\x2\x2\x13F\x141\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x141"+
		"\x142\aL\x2\x2\x142\x144\x3\x2\x2\x2\x143\x135\x3\x2\x2\x2\x143\x137\x3"+
		"\x2\x2\x2\x144\x147\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x145\x146\x3\x2"+
		"\x2\x2\x146!\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x148\x149\aM\x2\x2\x149"+
		"\x14E\x5$\x13\x2\x14A\x14B\a\x44\x2\x2\x14B\x14D\x5$\x13\x2\x14C\x14A"+
		"\x3\x2\x2\x2\x14D\x150\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14E\x14F\x3"+
		"\x2\x2\x2\x14F\x151\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x151\x152\aN\x2"+
		"\x2\x152\x156\x3\x2\x2\x2\x153\x154\aM\x2\x2\x154\x156\aN\x2\x2\x155\x148"+
		"\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2\x156#\x3\x2\x2\x2\x157\x159\x5\x32"+
		"\x1A\x2\x158\x157\x3\x2\x2\x2\x159\x15C\x3\x2\x2\x2\x15A\x158\x3\x2\x2"+
		"\x2\x15A\x15B\x3\x2\x2\x2\x15B\x15D\x3\x2\x2\x2\x15C\x15A\x3\x2\x2\x2"+
		"\x15D\x15E\x5 \x11\x2\x15E%\x3\x2\x2\x2\x15F\x163\a>\x2\x2\x160\x163\a"+
		"@\x2\x2\x161\x163\x5\x6\x4\x2\x162\x15F\x3\x2\x2\x2\x162\x160\x3\x2\x2"+
		"\x2\x162\x161\x3\x2\x2\x2\x163\'\x3\x2\x2\x2\x164\x165\a\x15\x2\x2\x165"+
		"\x166\x5\x18\r\x2\x166\x167\a\x42\x2\x2\x167\x16C\x5*\x16\x2\x168\x169"+
		"\a\x44\x2\x2\x169\x16B\x5*\x16\x2\x16A\x168\x3\x2\x2\x2\x16B\x16E\x3\x2"+
		"\x2\x2\x16C\x16A\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x175\x3\x2\x2"+
		"\x2\x16E\x16C\x3\x2\x2\x2\x16F\x170\a\x15\x2\x2\x170\x171\x5\x18\r\x2"+
		"\x171\x172\t\x3\x2\x2\x172\x173\a>\x2\x2\x173\x175\x3\x2\x2\x2\x174\x164"+
		"\x3\x2\x2\x2\x174\x16F\x3\x2\x2\x2\x175)\x3\x2\x2\x2\x176\x177\a\xF\x2"+
		"\x2\x177\x178\aM\x2\x2\x178\x17C\aN\x2\x2\x179\x17C\x5\x1C\xF\x2\x17A"+
		"\x17C\x5\x18\r\x2\x17B\x176\x3\x2\x2\x2\x17B\x179\x3\x2\x2\x2\x17B\x17A"+
		"\x3\x2\x2\x2\x17C+\x3\x2\x2\x2\x17D\x185\x5\x34\x1B\x2\x17E\x185\x5:\x1E"+
		"\x2\x17F\x185\x5@!\x2\x180\x185\x5<\x1F\x2\x181\x185\x5> \x2\x182\x185"+
		"\x5H%\x2\x183\x185\x5\x42\"\x2\x184\x17D\x3\x2\x2\x2\x184\x17E\x3\x2\x2"+
		"\x2\x184\x17F\x3\x2\x2\x2\x184\x180\x3\x2\x2\x2\x184\x181\x3\x2\x2\x2"+
		"\x184\x182\x3\x2\x2\x2\x184\x183\x3\x2\x2\x2\x185-\x3\x2\x2\x2\x186\x187"+
		"\aM\x2\x2\x187\x18C\x5\x30\x19\x2\x188\x189\a\x44\x2\x2\x189\x18B\x5\x30"+
		"\x19\x2\x18A\x188\x3\x2\x2\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18A\x3\x2\x2"+
		"\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18F\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2"+
		"\x18F\x190\aN\x2\x2\x190\x194\x3\x2\x2\x2\x191\x192\aM\x2\x2\x192\x194"+
		"\aN\x2\x2\x193\x186\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x194/\x3\x2\x2\x2"+
		"\x195\x197\x5\x32\x1A\x2\x196\x195\x3\x2\x2\x2\x197\x19A\x3\x2\x2\x2\x198"+
		"\x196\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199\x19C\x3\x2\x2\x2\x19A\x198"+
		"\x3\x2\x2\x2\x19B\x19D\x5\x6\x4\x2\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3"+
		"\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E\x19F\a\x42\x2\x2\x19F\x1A8\x5 \x11"+
		"\x2\x1A0\x1A2\x5\x32\x1A\x2\x1A1\x1A0\x3\x2\x2\x2\x1A2\x1A5\x3\x2\x2\x2"+
		"\x1A3\x1A1\x3\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A6\x3\x2\x2\x2\x1A5"+
		"\x1A3\x3\x2\x2\x2\x1A6\x1A8\a\x12\x2\x2\x1A7\x198\x3\x2\x2\x2\x1A7\x1A3"+
		"\x3\x2\x2\x2\x1A8\x31\x3\x2\x2\x2\x1A9\x1AA\t\x4\x2\x2\x1AA\x33\x3\x2"+
		"\x2\x2\x1AB\x1AD\x5\x12\n\x2\x1AC\x1AB\x3\x2\x2\x2\x1AD\x1B0\x3\x2\x2"+
		"\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x1B4\x3\x2\x2\x2"+
		"\x1B0\x1AE\x3\x2\x2\x2\x1B1\x1B3\x5\x14\v\x2\x1B2\x1B1\x3\x2\x2\x2\x1B3"+
		"\x1B6\x3\x2\x2\x2\x1B4\x1B2\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B7"+
		"\x3\x2\x2\x2\x1B6\x1B4\x3\x2\x2\x2\x1B7\x1B9\a\xF\x2\x2\x1B8\x1BA\x5\x6"+
		"\x4\x2\x1B9\x1B8\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2"+
		"\x2\x1BB\x1BD\x5.\x18\x2\x1BC\x1BE\x5\x36\x1C\x2\x1BD\x1BC\x3\x2\x2\x2"+
		"\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C0\x5\x44#\x2\x1C0"+
		"\x35\x3\x2\x2\x2\x1C1\x1C2\a\x42\x2\x2\x1C2\x1C3\a%\x2\x2\x1C3\x1C4\a"+
		"M\x2\x2\x1C4\x1C5\x5\x38\x1D\x2\x1C5\x1C6\aN\x2\x2\x1C6\x1CE\x3\x2\x2"+
		"\x2\x1C7\x1C8\a\x42\x2\x2\x1C8\x1C9\a\x12\x2\x2\x1C9\x1CA\aM\x2\x2\x1CA"+
		"\x1CB\x5\x38\x1D\x2\x1CB\x1CC\aN\x2\x2\x1CC\x1CE\x3\x2\x2\x2\x1CD\x1C1"+
		"\x3\x2\x2\x2\x1CD\x1C7\x3\x2\x2\x2\x1CE\x37\x3\x2\x2\x2\x1CF\x1D4\x5P"+
		")\x2\x1D0\x1D1\a\x44\x2\x2\x1D1\x1D3\x5P)\x2\x1D2\x1D0\x3\x2\x2\x2\x1D3"+
		"\x1D6\x3\x2\x2\x2\x1D4\x1D2\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D9"+
		"\x3\x2\x2\x2\x1D6\x1D4\x3\x2\x2\x2\x1D7\x1D9\x3\x2\x2\x2\x1D8\x1CF\x3"+
		"\x2\x2\x2\x1D8\x1D7\x3\x2\x2\x2\x1D9\x39\x3\x2\x2\x2\x1DA\x1DC\x5\x12"+
		"\n\x2\x1DB\x1DA\x3\x2\x2\x2\x1DC\x1DF\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2"+
		"\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1E3\x3\x2\x2\x2\x1DF\x1DD\x3\x2\x2\x2\x1E0"+
		"\x1E2\x5\x14\v\x2\x1E1\x1E0\x3\x2\x2\x2\x1E2\x1E5\x3\x2\x2\x2\x1E3\x1E1"+
		"\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E6\x3\x2\x2\x2\x1E5\x1E3\x3"+
		"\x2\x2\x2\x1E6\x1E7\a\x10\x2\x2\x1E7\x1E8\x5.\x18\x2\x1E8\x1E9\x5\x44"+
		"#\x2\x1E9;\x3\x2\x2\x2\x1EA\x1EC\x5\x12\n\x2\x1EB\x1EA\x3\x2\x2\x2\x1EC"+
		"\x1EF\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2\x2\x1EE\x1F3"+
		"\x3\x2\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1F0\x1F2\x5\x14\v\x2\x1F1\x1F0\x3"+
		"\x2\x2\x2\x1F2\x1F5\x3\x2\x2\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F4\x3\x2"+
		"\x2\x2\x1F4\x1F6\x3\x2\x2\x2\x1F5\x1F3\x3\x2\x2\x2\x1F6\x1F8\x5\x6\x4"+
		"\x2\x1F7\x1F9\x5\x1E\x10\x2\x1F8\x1F7\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2"+
		"\x1F9\x1FA\x3\x2\x2\x2\x1FA\x1FB\x5.\x18\x2\x1FB\x1FC\a\x46\x2\x2\x1FC"+
		"\x200\x5 \x11\x2\x1FD\x1FF\x5(\x15\x2\x1FE\x1FD\x3\x2\x2\x2\x1FF\x202"+
		"\x3\x2\x2\x2\x200\x1FE\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2\x201\x203\x3"+
		"\x2\x2\x2\x202\x200\x3\x2\x2\x2\x203\x204\x5\x44#\x2\x204=\x3\x2\x2\x2"+
		"\x205\x207\x5\x12\n\x2\x206\x205\x3\x2\x2\x2\x207\x20A\x3\x2\x2\x2\x208"+
		"\x206\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20E\x3\x2\x2\x2\x20A\x208"+
		"\x3\x2\x2\x2\x20B\x20D\x5\x14\v\x2\x20C\x20B\x3\x2\x2\x2\x20D\x210\x3"+
		"\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F\x211\x3\x2"+
		"\x2\x2\x210\x20E\x3\x2\x2\x2\x211\x212\a\x11\x2\x2\x212\x213\x5\x46$\x2"+
		"\x213\x214\x5.\x18\x2\x214\x215\a\x46\x2\x2\x215\x216\x5 \x11\x2\x216"+
		"\x217\x5\x44#\x2\x217?\x3\x2\x2\x2\x218\x21A\x5\x12\n\x2\x219\x218\x3"+
		"\x2\x2\x2\x21A\x21D\x3\x2\x2\x2\x21B\x219\x3\x2\x2\x2\x21B\x21C\x3\x2"+
		"\x2\x2\x21C\x221\x3\x2\x2\x2\x21D\x21B\x3\x2\x2\x2\x21E\x220\x5\x14\v"+
		"\x2\x21F\x21E\x3\x2\x2\x2\x220\x223\x3\x2\x2\x2\x221\x21F\x3\x2\x2\x2"+
		"\x221\x222\x3\x2\x2\x2\x222\x224\x3\x2\x2\x2\x223\x221\x3\x2\x2\x2\x224"+
		"\x226\a\x34\x2\x2\x225\x227\x5\x1E\x10\x2\x226\x225\x3\x2\x2\x2\x226\x227"+
		"\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x229\x5.\x18\x2\x229\x22A\a\x46"+
		"\x2\x2\x22A\x22E\x5 \x11\x2\x22B\x22D\x5(\x15\x2\x22C\x22B\x3\x2\x2\x2"+
		"\x22D\x230\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F"+
		"\x231\x3\x2\x2\x2\x230\x22E\x3\x2\x2\x2\x231\x232\x5\x44#\x2\x232\x41"+
		"\x3\x2\x2\x2\x233\x235\x5\x12\n\x2\x234\x233\x3\x2\x2\x2\x235\x238\x3"+
		"\x2\x2\x2\x236\x234\x3\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237\x23C\x3\x2"+
		"\x2\x2\x238\x236\x3\x2\x2\x2\x239\x23B\x5\x14\v\x2\x23A\x239\x3\x2\x2"+
		"\x2\x23B\x23E\x3\x2\x2\x2\x23C\x23A\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2"+
		"\x23D\x23F\x3\x2\x2\x2\x23E\x23C\x3\x2\x2\x2\x23F\x240\t\x5\x2\x2\x240"+
		"\x242\x5\x6\x4\x2\x241\x243\x5\x1E\x10\x2\x242\x241\x3\x2\x2\x2\x242\x243"+
		"\x3\x2\x2\x2\x243\x244\x3\x2\x2\x2\x244\x245\x5.\x18\x2\x245\x246\a\x46"+
		"\x2\x2\x246\x24A\x5 \x11\x2\x247\x249\x5(\x15\x2\x248\x247\x3\x2\x2\x2"+
		"\x249\x24C\x3\x2\x2\x2\x24A\x248\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B"+
		"\x24D\x3\x2\x2\x2\x24C\x24A\x3\x2\x2\x2\x24D\x24E\x5\x44#\x2\x24E\x43"+
		"\x3\x2\x2\x2\x24F\x253\aG\x2\x2\x250\x252\x5J&\x2\x251\x250\x3\x2\x2\x2"+
		"\x252\x255\x3\x2\x2\x2\x253\x251\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254"+
		"\x256\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2\x256\x259\aH\x2\x2\x257\x259\a"+
		"\x41\x2\x2\x258\x24F\x3\x2\x2\x2\x258\x257\x3\x2\x2\x2\x259\x45\x3\x2"+
		"\x2\x2\x25A\x265\aO\x2\x2\x25B\x265\aQ\x2\x2\x25C\x265\a^\x2\x2\x25D\x265"+
		"\a\\\x2\x2\x25E\x265\a]\x2\x2\x25F\x265\aS\x2\x2\x260\x265\aR\x2\x2\x261"+
		"\x265\a\x43\x2\x2\x262\x263\aK\x2\x2\x263\x265\aL\x2\x2\x264\x25A\x3\x2"+
		"\x2\x2\x264\x25B\x3\x2\x2\x2\x264\x25C\x3\x2\x2\x2\x264\x25D\x3\x2\x2"+
		"\x2\x264\x25E\x3\x2\x2\x2\x264\x25F\x3\x2\x2\x2\x264\x260\x3\x2\x2\x2"+
		"\x264\x261\x3\x2\x2\x2\x264\x262\x3\x2\x2\x2\x265G\x3\x2\x2\x2\x266\x268"+
		"\x5\x12\n\x2\x267\x266\x3\x2\x2\x2\x268\x26B\x3\x2\x2\x2\x269\x267\x3"+
		"\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26F\x3\x2\x2\x2\x26B\x269\x3\x2"+
		"\x2\x2\x26C\x26E\x5\x14\v\x2\x26D\x26C\x3\x2\x2\x2\x26E\x271\x3\x2\x2"+
		"\x2\x26F\x26D\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x272\x3\x2\x2\x2"+
		"\x271\x26F\x3\x2\x2\x2\x272\x273\a\x16\x2\x2\x273\x276\x5\x6\x4\x2\x274"+
		"\x275\a\x42\x2\x2\x275\x277\x5 \x11\x2\x276\x274\x3\x2\x2\x2\x276\x277"+
		"\x3\x2\x2\x2\x277\x27A\x3\x2\x2\x2\x278\x279\a\x62\x2\x2\x279\x27B\x5"+
		"P)\x2\x27A\x278\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27C\x3\x2\x2\x2"+
		"\x27C\x27D\a\x41\x2\x2\x27D\x295\x3\x2\x2\x2\x27E\x280\x5\x12\n\x2\x27F"+
		"\x27E\x3\x2\x2\x2\x280\x283\x3\x2\x2\x2\x281\x27F\x3\x2\x2\x2\x281\x282"+
		"\x3\x2\x2\x2\x282\x287\x3\x2\x2\x2\x283\x281\x3\x2\x2\x2\x284\x286\x5"+
		"\x14\v\x2\x285\x284\x3\x2\x2\x2\x286\x289\x3\x2\x2\x2\x287\x285\x3\x2"+
		"\x2\x2\x287\x288\x3\x2\x2\x2\x288\x28A\x3\x2\x2\x2\x289\x287\x3\x2\x2"+
		"\x2\x28A\x28B\a\x17\x2\x2\x28B\x28E\x5\x6\x4\x2\x28C\x28D\a\x42\x2\x2"+
		"\x28D\x28F\x5 \x11\x2\x28E\x28C\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F"+
		"\x290\x3\x2\x2\x2\x290\x291\a\x62\x2\x2\x291\x292\x5P)\x2\x292\x293\a"+
		"\x41\x2\x2\x293\x295\x3\x2\x2\x2\x294\x269\x3\x2\x2\x2\x294\x281\x3\x2"+
		"\x2\x2\x295I\x3\x2\x2\x2\x296\x297\x5L\'\x2\x297\x298\a\x41\x2\x2\x298"+
		"\x2E2\x3\x2\x2\x2\x299\x29A\x5N(\x2\x29A\x29B\a\x41\x2\x2\x29B\x2E2\x3"+
		"\x2\x2\x2\x29C\x29D\a:\x2\x2\x29D\x2A1\aG\x2\x2\x29E\x2A0\x5J&\x2\x29F"+
		"\x29E\x3\x2\x2\x2\x2A0\x2A3\x3\x2\x2\x2\x2A1\x29F\x3\x2\x2\x2\x2A1\x2A2"+
		"\x3\x2\x2\x2\x2A2\x2A4\x3\x2\x2\x2\x2A3\x2A1\x3\x2\x2\x2\x2A4\x2E2\aH"+
		"\x2\x2\x2A5\x2A9\aG\x2\x2\x2A6\x2A8\x5J&\x2\x2A7\x2A6\x3\x2\x2\x2\x2A8"+
		"\x2AB\x3\x2\x2\x2\x2A9\x2A7\x3\x2\x2\x2\x2A9\x2AA\x3\x2\x2\x2\x2AA\x2AC"+
		"\x3\x2\x2\x2\x2AB\x2A9\x3\x2\x2\x2\x2AC\x2E2\aH\x2\x2\x2AD\x2E2\a\x41"+
		"\x2\x2\x2AE\x2AF\x5P)\x2\x2AF\x2B0\a\x41\x2\x2\x2B0\x2E2\x3\x2\x2\x2\x2B1"+
		"\x2B2\a\x13\x2\x2\x2B2\x2B3\x5P)\x2\x2B3\x2B4\a\x41\x2\x2\x2B4\x2E2\x3"+
		"\x2\x2\x2\x2B5\x2B6\a\x31\x2\x2\x2B6\x2B7\x5P)\x2\x2B7\x2B8\a\x41\x2\x2"+
		"\x2B8\x2E2\x3\x2\x2\x2\x2B9\x2BA\a\x1D\x2\x2\x2BA\x2BB\aM\x2\x2\x2BB\x2BC"+
		"\x5P)\x2\x2BC\x2BD\aN\x2\x2\x2BD\x2C0\x5J&\x2\x2BE\x2BF\a\x1E\x2\x2\x2BF"+
		"\x2C1\x5J&\x2\x2C0\x2BE\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2E2\x3"+
		"\x2\x2\x2\x2C2\x2C3\a!\x2\x2\x2C3\x2C6\aM\x2\x2\x2C4\x2C7\x5L\'\x2\x2C5"+
		"\x2C7\x5N(\x2\x2C6\x2C4\x3\x2\x2\x2\x2C6\x2C5\x3\x2\x2\x2\x2C6\x2C7\x3"+
		"\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2CA\a\x41\x2\x2\x2C9\x2CB\x5P)\x2"+
		"\x2CA\x2C9\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC"+
		"\x2CE\a\x41\x2\x2\x2CD\x2CF\x5P)\x2\x2CE\x2CD\x3\x2\x2\x2\x2CE\x2CF\x3"+
		"\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2D1\aN\x2\x2\x2D1\x2E2\x5J&\x2\x2D2"+
		"\x2D3\a\"\x2\x2\x2D3\x2D6\aM\x2\x2\x2D4\x2D7\x5L\'\x2\x2D5\x2D7\x5N(\x2"+
		"\x2D6\x2D4\x3\x2\x2\x2\x2D6\x2D5\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8"+
		"\x2D9\a#\x2\x2\x2D9\x2DA\x5P)\x2\x2DA\x2DB\aN\x2\x2\x2DB\x2DC\x5J&\x2"+
		"\x2DC\x2E2\x3\x2\x2\x2\x2DD\x2DE\a\x10\x2\x2\x2DE\x2DF\x5P)\x2\x2DF\x2E0"+
		"\a\x41\x2\x2\x2E0\x2E2\x3\x2\x2\x2\x2E1\x296\x3\x2\x2\x2\x2E1\x299\x3"+
		"\x2\x2\x2\x2E1\x29C\x3\x2\x2\x2\x2E1\x2A5\x3\x2\x2\x2\x2E1\x2AD\x3\x2"+
		"\x2\x2\x2E1\x2AE\x3\x2\x2\x2\x2E1\x2B1\x3\x2\x2\x2\x2E1\x2B5\x3\x2\x2"+
		"\x2\x2E1\x2B9\x3\x2\x2\x2\x2E1\x2C2\x3\x2\x2\x2\x2E1\x2D2\x3\x2\x2\x2"+
		"\x2E1\x2DD\x3\x2\x2\x2\x2E2K\x3\x2\x2\x2\x2E3\x2E4\a\x16\x2\x2\x2E4\x2E7"+
		"\x5\x6\x4\x2\x2E5\x2E6\a\x42\x2\x2\x2E6\x2E8\x5 \x11\x2\x2E7\x2E5\x3\x2"+
		"\x2\x2\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2EB\x3\x2\x2\x2\x2E9\x2EA\a\x62\x2"+
		"\x2\x2EA\x2EC\x5P)\x2\x2EB\x2E9\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC"+
		"M\x3\x2\x2\x2\x2ED\x2EE\a\x17\x2\x2\x2EE\x2F1\x5\x6\x4\x2\x2EF\x2F0\a"+
		"\x42\x2\x2\x2F0\x2F2\x5 \x11\x2\x2F1\x2EF\x3\x2\x2\x2\x2F1\x2F2\x3\x2"+
		"\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F4\a\x62\x2\x2\x2F4\x2F5\x5P)\x2\x2F5"+
		"O\x3\x2\x2\x2\x2F6\x2F7\b)\x1\x2\x2F7\x2F8\t\x6\x2\x2\x2F8\x30B\x5P)\x16"+
		"\x2F9\x30B\x5\x6\x4\x2\x2FA\x2FB\a\xF\x2\x2\x2FB\x2FE\x5\x1C\xF\x2\x2FC"+
		"\x2FD\a\x43\x2\x2\x2FD\x2FF\x5\x6\x4\x2\x2FE\x2FC\x3\x2\x2\x2\x2FE\x2FF"+
		"\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x301\aM\x2\x2\x301\x302\x5\x38"+
		"\x1D\x2\x302\x303\aN\x2\x2\x303\x30B\x3\x2\x2\x2\x304\x30B\a?\x2\x2\x305"+
		"\x30B\a\x12\x2\x2\x306\x30B\a=\x2\x2\x307\x30B\a>\x2\x2\x308\x30B\a\x14"+
		"\x2\x2\x309\x30B\a@\x2\x2\x30A\x2F6\x3\x2\x2\x2\x30A\x2F9\x3\x2\x2\x2"+
		"\x30A\x2FA\x3\x2\x2\x2\x30A\x304\x3\x2\x2\x2\x30A\x305\x3\x2\x2\x2\x30A"+
		"\x306\x3\x2\x2\x2\x30A\x307\x3\x2\x2\x2\x30A\x308\x3\x2\x2\x2\x30A\x309"+
		"\x3\x2\x2\x2\x30B\x349\x3\x2\x2\x2\x30C\x30D\f\x15\x2\x2\x30D\x30E\t\a"+
		"\x2\x2\x30E\x348\x5P)\x16\x30F\x310\f\x14\x2\x2\x310\x311\t\b\x2\x2\x311"+
		"\x348\x5P)\x15\x312\x317\f\x13\x2\x2\x313\x314\aI\x2\x2\x314\x318\aI\x2"+
		"\x2\x315\x316\aJ\x2\x2\x316\x318\aJ\x2\x2\x317\x313\x3\x2\x2\x2\x317\x315"+
		"\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319\x348\x5P)\x14\x31A\x31B\f\x12"+
		"\x2\x2\x31B\x31C\t\x3\x2\x2\x31C\x348\x5P)\x13\x31D\x31E\f\x11\x2\x2\x31E"+
		"\x31F\t\t\x2\x2\x31F\x348\x5P)\x12\x320\x321\f\x10\x2\x2\x321\x322\a\\"+
		"\x2\x2\x322\x348\x5P)\x11\x323\x324\f\xF\x2\x2\x324\x325\a]\x2\x2\x325"+
		"\x348\x5P)\x10\x326\x327\f\xE\x2\x2\x327\x328\a^\x2\x2\x328\x348\x5P)"+
		"\xF\x329\x32A\f\r\x2\x2\x32A\x32B\aR\x2\x2\x32B\x348\x5P)\xE\x32C\x32D"+
		"\f\f\x2\x2\x32D\x32E\aS\x2\x2\x32E\x32F\x5P)\x2\x32F\x330\a\x42\x2\x2"+
		"\x330\x331\x5P)\f\x331\x348\x3\x2\x2\x2\x332\x333\f\v\x2\x2\x333\x334"+
		"\t\n\x2\x2\x334\x348\x5P)\v\x335\x336\f\x1B\x2\x2\x336\x337\a\x43\x2\x2"+
		"\x337\x348\x5\x6\x4\x2\x338\x339\f\x1A\x2\x2\x339\x33A\a\x45\x2\x2\x33A"+
		"\x348\x5\x6\x4\x2\x33B\x33C\f\x19\x2\x2\x33C\x33D\aM\x2\x2\x33D\x33E\x5"+
		"\x38\x1D\x2\x33E\x33F\aN\x2\x2\x33F\x348\x3\x2\x2\x2\x340\x341\f\x18\x2"+
		"\x2\x341\x342\aK\x2\x2\x342\x343\x5\x38\x1D\x2\x343\x344\aL\x2\x2\x344"+
		"\x348\x3\x2\x2\x2\x345\x346\f\x17\x2\x2\x346\x348\aS\x2\x2\x347\x30C\x3"+
		"\x2\x2\x2\x347\x30F\x3\x2\x2\x2\x347\x312\x3\x2\x2\x2\x347\x31A\x3\x2"+
		"\x2\x2\x347\x31D\x3\x2\x2\x2\x347\x320\x3\x2\x2\x2\x347\x323\x3\x2\x2"+
		"\x2\x347\x326\x3\x2\x2\x2\x347\x329\x3\x2\x2\x2\x347\x32C\x3\x2\x2\x2"+
		"\x347\x332\x3\x2\x2\x2\x347\x335\x3\x2\x2\x2\x347\x338\x3\x2\x2\x2\x347"+
		"\x33B\x3\x2\x2\x2\x347\x340\x3\x2\x2\x2\x347\x345\x3\x2\x2\x2\x348\x34B"+
		"\x3\x2\x2\x2\x349\x347\x3\x2\x2\x2\x349\x34A\x3\x2\x2\x2\x34AQ\x3\x2\x2"+
		"\x2\x34B\x349\x3\x2\x2\x2\x66U[kqy\x7F\x87\x8D\x93\x96\x9B\xA2\xAA\xB0"+
		"\xB7\xBB\xC2\xC8\xCF\xD5\xDA\xEA\xF2\xF9\xFD\x101\x109\x10C\x110\x115"+
		"\x119\x122\x133\x13E\x143\x145\x14E\x155\x15A\x162\x16C\x174\x17B\x184"+
		"\x18C\x193\x198\x19C\x1A3\x1A7\x1AE\x1B4\x1B9\x1BD\x1CD\x1D4\x1D8\x1DD"+
		"\x1E3\x1ED\x1F3\x1F8\x200\x208\x20E\x21B\x221\x226\x22E\x236\x23C\x242"+
		"\x24A\x253\x258\x264\x269\x26F\x276\x27A\x281\x287\x28E\x294\x2A1\x2A9"+
		"\x2C0\x2C6\x2CA\x2CE\x2D6\x2E1\x2E7\x2EB\x2F1\x2FE\x30A\x317\x347\x349";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Compiler.Antlr
