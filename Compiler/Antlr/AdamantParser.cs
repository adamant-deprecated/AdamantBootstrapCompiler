//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AdamantParser : Parser {
	public const int
		SingleLineDocComment=1, BlockDocComment=2, SingleLineComment=3, BlockComment=4, 
		PreprocessorLine=5, Whitespace=6, Newline=7, PreprocessorSkippedSection=8, 
		Using=9, Namespace=10, Class=11, Enum=12, New=13, Delete=14, Operator=15, 
		This=16, Return=17, Uninitialized=18, Where=19, Var=20, Let=21, Static=22, 
		Get=23, Set=24, Do=25, While=26, If=27, Else=28, Abstract=29, Params=30, 
		For=31, Foreach=32, In=33, Ref=34, Base=35, Const=36, Sealed=37, Override=38, 
		Partial=39, Yield=40, Switch=41, Break=42, Continue=43, Try=44, Catch=45, 
		Finally=46, Throw=47, Implicit=48, Explicit=49, Conversion=50, Public=51, 
		Private=52, Protected=53, Package=54, Safe=55, Unsafe=56, Own=57, Mutable=58, 
		BooleanLiteral=59, IntLiteral=60, NullLiteral=61, StringLiteral=62, Semicolon=63, 
		Colon=64, Dot=65, Comma=66, Arrow=67, Lambda=68, LeftBrace=69, RightBrace=70, 
		LeftAngle=71, RightAngle=72, LeftBracket=73, RightBracket=74, LeftParen=75, 
		RightParen=76, Asterisk=77, AtSign=78, AddressOf=79, Coalesce=80, IsNull=81, 
		Equal=82, NotEqual=83, LessThanOrEqual=84, GreaterThanOrEqual=85, TypeList=86, 
		Plus=87, Minus=88, Divide=89, And=90, Xor=91, Or=92, Not=93, Increment=94, 
		Decrement=95, Assign=96, AddAssign=97, SubtractAssign=98, MultiplyAssign=99, 
		DivideAssign=100, LeftShiftAssign=101, RightShiftAssign=102, AndAssign=103, 
		XorAssign=104, OrAssign=105, Identifier=106, EscapedIdentifier=107, Unknown=108;
	public const int
		RULE_compilationUnit = 0, RULE_usingStatement = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_attribute = 5, RULE_modifier = 6, 
		RULE_typeParameterList = 7, RULE_typeParameter = 8, RULE_typeName = 9, 
		RULE_typeArguments = 10, RULE_type = 11, RULE_funcTypeParameterList = 12, 
		RULE_funcTypeParameter = 13, RULE_constExpression = 14, RULE_typeParameterConstraintClause = 15, 
		RULE_typeParameterConstraint = 16, RULE_member = 17, RULE_parameterList = 18, 
		RULE_parameter = 19, RULE_parameterModifier = 20, RULE_constructor = 21, 
		RULE_constructorInitializer = 22, RULE_argumentList = 23, RULE_destructor = 24, 
		RULE_method = 25, RULE_operatorOverload = 26, RULE_conversionMethod = 27, 
		RULE_property = 28, RULE_methodBody = 29, RULE_overloadableOperator = 30, 
		RULE_field = 31, RULE_statement = 32, RULE_variableDeclaration = 33, RULE_letDeclaration = 34, 
		RULE_expression = 35;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingStatement", "identifier", "namespaceName", "declaration", 
		"attribute", "modifier", "typeParameterList", "typeParameter", "typeName", 
		"typeArguments", "type", "funcTypeParameterList", "funcTypeParameter", 
		"constExpression", "typeParameterConstraintClause", "typeParameterConstraint", 
		"member", "parameterList", "parameter", "parameterModifier", "constructor", 
		"constructorInitializer", "argumentList", "destructor", "method", "operatorOverload", 
		"conversionMethod", "property", "methodBody", "overloadableOperator", 
		"field", "statement", "variableDeclaration", "letDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'operator'", "'this'", "'return'", 
		"'uninitialized'", "'where'", "'var'", "'let'", "'static'", "'get'", "'set'", 
		"'do'", "'while'", "'if'", "'else'", "'abstract'", "'params'", "'for'", 
		"'foreach'", "'in'", "'ref'", "'base'", "'const'", "'sealed'", "'override'", 
		"'partial'", "'yeild'", "'switch'", "'break'", "'continue'", "'try'", 
		"'catch'", "'finally'", "'throw'", "'implicit'", "'explicit'", "'conversion'", 
		"'public'", "'private'", "'protected'", "'package'", "'safe'", "'unsafe'", 
		"'own'", "'mut'", null, null, "'null'", null, "';'", "':'", "'.'", "','", 
		"'->'", "'=>'", "'{'", "'}'", "'<'", "'>'", "'['", "']'", "'('", "')'", 
		"'*'", "'@'", "'&'", "'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", "'...'", 
		"'+'", "'-'", "'/'", "'and'", "'xor'", "'or'", "'not'", "'++'", "'--'", 
		"'='", "'+='", "'-='", "'*='", "'/='", "'<<='", "'>>='", "'and='", "'xor='", 
		"'or='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "BlockDocComment", "SingleLineComment", 
		"BlockComment", "PreprocessorLine", "Whitespace", "Newline", "PreprocessorSkippedSection", 
		"Using", "Namespace", "Class", "Enum", "New", "Delete", "Operator", "This", 
		"Return", "Uninitialized", "Where", "Var", "Let", "Static", "Get", "Set", 
		"Do", "While", "If", "Else", "Abstract", "Params", "For", "Foreach", "In", 
		"Ref", "Base", "Const", "Sealed", "Override", "Partial", "Yield", "Switch", 
		"Break", "Continue", "Try", "Catch", "Finally", "Throw", "Implicit", "Explicit", 
		"Conversion", "Public", "Private", "Protected", "Package", "Safe", "Unsafe", 
		"Own", "Mutable", "BooleanLiteral", "IntLiteral", "NullLiteral", "StringLiteral", 
		"Semicolon", "Colon", "Dot", "Comma", "Arrow", "Lambda", "LeftBrace", 
		"RightBrace", "LeftAngle", "RightAngle", "LeftBracket", "RightBracket", 
		"LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", "Coalesce", 
		"IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "And", "Xor", "Or", "Not", "Increment", 
		"Decrement", "Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", 
		"DivideAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Identifier", "EscapedIdentifier", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AdamantParser.Eof, 0); }
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 72; usingStatement();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
				{
				{
				State = 78; declaration();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 84; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStatementContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingStatementContext usingStatement() {
		UsingStatementContext _localctx = new UsingStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(Using);
			State = 87; namespaceName();
			State = 88; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(AdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_la = TokenStream.La(1);
			if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; identifier();
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 93; Match(Dot);
				State = 94; identifier();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext name;
		public TypeNameContext baseType;
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _interfaces = new List<TypeNameContext>();
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			State = 190;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; Match(Namespace);
				State = 101; namespaceName();
				State = 102; Match(LeftBrace);
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 103; usingStatement();
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 109; declaration();
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 115; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 117; attribute();
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 123; modifier();
					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 129; Match(Class);
				State = 130; ((ClassDeclarationContext)_localctx).name = identifier();
				State = 132;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 131; typeParameterList();
					}
				}

				State = 149;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 134; Match(Colon);
					State = 136;
					_la = TokenStream.La(1);
					if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) {
						{
						State = 135; ((ClassDeclarationContext)_localctx).baseType = typeName();
						}
					}

					State = 147;
					_la = TokenStream.La(1);
					if (_la==Colon) {
						{
						State = 138; Match(Colon);
						State = 139; ((ClassDeclarationContext)_localctx)._typeName = typeName();
						((ClassDeclarationContext)_localctx)._interfaces.Add(((ClassDeclarationContext)_localctx)._typeName);
						State = 144;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 140; Match(Comma);
							State = 141; ((ClassDeclarationContext)_localctx)._typeName = typeName();
							((ClassDeclarationContext)_localctx)._interfaces.Add(((ClassDeclarationContext)_localctx)._typeName);
							}
							}
							State = 146;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						}
					}

					}
				}

				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 151; typeParameterConstraintClause();
					}
					}
					State = 156;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 157; Match(LeftBrace);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Static) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 158; member();
					}
					}
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 164; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new GlobalDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 166; attribute();
					}
					}
					State = 171;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
					{
					{
					State = 172; modifier();
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 178;
				((GlobalDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((GlobalDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 179; ((GlobalDeclarationContext)_localctx).name = identifier();
				State = 182;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 180; Match(Colon);
					State = 181; type(0);
					}
				}

				State = 186;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 184; Match(Assign);
					State = 185; expression(0);
					}
				}

				State = 188; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(EscapedIdentifier);
			State = 195;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 193; Match(LeftParen);
				State = 194; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken Symbol;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_modifier);
		try {
			State = 211;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; _localctx.Symbol = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198; _localctx.Symbol = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 199; _localctx.Symbol = Match(Protected);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 4);
				{
				State = 200; _localctx.Symbol = Match(Package);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 201; _localctx.Symbol = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 202; _localctx.Symbol = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 203; _localctx.Symbol = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 204; _localctx.Symbol = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 205; _localctx.Symbol = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 206; _localctx.Symbol = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 207; _localctx.Symbol = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 208; _localctx.Symbol = Match(Override);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 13);
				{
				State = 209; _localctx.Symbol = Match(Static);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 14);
				{
				State = 210; _localctx.Symbol = Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(LeftAngle);
			State = 214; typeParameter();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 215; Match(Comma);
				State = 216; typeParameter();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 222; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; identifier();
			State = 226;
			_la = TokenStream.La(1);
			if (_la==TypeList) {
				{
				State = 225; Match(TypeList);
				}
			}

			State = 230;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 228; Match(Colon);
				State = 229; typeName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; identifier();
			State = 234;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 233; typeArguments();
				}
				break;
			}
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 236; Match(Dot);
					State = 237; identifier();
					State = 239;
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 238; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(LeftAngle);
			State = 247; type(0);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 248; Match(Comma);
				State = 249; type(0);
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 255; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ConstExpressionContext[] constExpression() {
			return GetRuleContexts<ConstExpressionContext>();
		}
		public ConstExpressionContext constExpression(int i) {
			return GetRuleContext<ConstExpressionContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			switch (TokenStream.La(1)) {
			case Mutable:
				{
				State = 258; Match(Mutable);
				State = 259; type(4);
				}
				break;
			case Own:
				{
				State = 260; Match(Own);
				State = 261; type(3);
				}
				break;
			case Ref:
				{
				State = 262; Match(Ref);
				State = 263; type(2);
				}
				break;
			case LeftParen:
				{
				State = 264; funcTypeParameterList();
				State = 265; Match(Lambda);
				State = 266; type(1);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				{
				State = 268; typeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 287;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 285;
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 271;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 272; Match(Asterisk);
						}
						break;
					case 2:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 273;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 274; Match(LeftBracket);
						State = 275; constExpression();
						State = 280;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 276; Match(Comma);
							State = 277; constExpression();
							}
							}
							State = 282;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 283; Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 24, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 303;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290; Match(LeftParen);
				State = 291; funcTypeParameter();
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 292; Match(Comma);
					State = 293; funcTypeParameter();
					}
					}
					State = 298;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 299; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; Match(LeftParen);
				State = 302; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_funcTypeParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 305; parameterModifier();
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 311; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_constExpression);
		try {
			State = 316;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 314; Match(StringLiteral);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 315; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 334;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; Match(Where);
				State = 319; typeParameter();
				State = 320; Match(Colon);
				State = 321; typeParameterConstraint();
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 322; Match(Comma);
					State = 323; typeParameterConstraint();
					}
					}
					State = 328;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; Match(Where);
				State = 330; typeParameter();
				State = 331;
				_la = TokenStream.La(1);
				if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (LeftAngle - 71)) | (1L << (RightAngle - 71)) | (1L << (LessThanOrEqual - 71)) | (1L << (GreaterThanOrEqual - 71)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 332; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeParameterConstraint);
		try {
			State = 341;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 336; Match(New);
				State = 337; Match(LeftParen);
				State = 338; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 339; typeName();
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 340; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public ConversionMethodContext conversionMethod() {
			return GetRuleContext<ConversionMethodContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public OperatorOverloadContext operatorOverload() {
			return GetRuleContext<OperatorOverloadContext>(0);
		}
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 34, RULE_member);
		try {
			State = 350;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; constructor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344; destructor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; conversionMethod();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 346; method();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 347; operatorOverload();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 348; field();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 349; property();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameterList);
		int _la;
		try {
			State = 365;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352; Match(LeftParen);
				State = 353; parameter();
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 354; Match(Comma);
					State = 355; parameter();
					}
					}
					State = 360;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 361; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; Match(LeftParen);
				State = 364; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameter);
		int _la;
		try {
			State = 385;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) {
					{
					{
					State = 367; parameterModifier();
					}
					}
					State = 372;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 374;
				_la = TokenStream.La(1);
				if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) {
					{
					State = 373; identifier();
					}
				}

				State = 376; Match(Colon);
				State = 377; type(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) {
					{
					{
					State = 378; parameterModifier();
					}
					}
					State = 383;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 384; Match(This);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameterModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Params) | (1L << Own) | (1L << Mutable))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 42, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 389; attribute();
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 395; modifier();
				}
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 401; Match(New);
			State = 403;
			_la = TokenStream.La(1);
			if (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Conversion - 50)) | (1L << (Identifier - 50)) | (1L << (EscapedIdentifier - 50)))) != 0)) {
				{
				State = 402; identifier();
				}
			}

			State = 405; parameterList();
			State = 407;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 406; constructorInitializer();
				}
			}

			State = 409; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 44, RULE_constructorInitializer);
		try {
			State = 423;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411; Match(Colon);
				State = 412; Match(Base);
				State = 413; Match(LeftParen);
				State = 414; argumentList();
				State = 415; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417; Match(Colon);
				State = 418; Match(This);
				State = 419; Match(LeftParen);
				State = 420; argumentList();
				State = 421; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentList);
		int _la;
		try {
			State = 434;
			switch (TokenStream.La(1)) {
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 425; expression(0);
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 426; Match(Comma);
					State = 427; expression(0);
					}
					}
					State = 432;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(Context, State);
		EnterRule(_localctx, 48, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 436; attribute();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 442; modifier();
				}
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 448; Match(Delete);
			State = 449; parameterList();
			State = 450; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 50, RULE_method);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 452; attribute();
					}
					} 
				}
				State = 457;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 458; modifier();
				}
				}
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 464; identifier();
			State = 466;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 465; typeArguments();
				}
			}

			State = 468; parameterList();
			State = 469; Match(Lambda);
			State = 470; type(0);
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 471; typeParameterConstraintClause();
				}
				}
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 477; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOverloadContext : ParserRuleContext {
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OperatorOverloadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOverload; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOverloadContext operatorOverload() {
		OperatorOverloadContext _localctx = new OperatorOverloadContext(Context, State);
		EnterRule(_localctx, 52, RULE_operatorOverload);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 479; attribute();
				}
				}
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 485; modifier();
				}
				}
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 491; Match(Operator);
			State = 492; overloadableOperator();
			State = 493; parameterList();
			State = 494; Match(Lambda);
			State = 495; type(0);
			State = 496; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionMethodContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ConversionMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionMethodContext conversionMethod() {
		ConversionMethodContext _localctx = new ConversionMethodContext(Context, State);
		EnterRule(_localctx, 54, RULE_conversionMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 498; attribute();
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 504; modifier();
				}
				}
				State = 509;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 510; Match(Conversion);
			State = 512;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 511; typeArguments();
				}
			}

			State = 514; parameterList();
			State = 515; Match(Lambda);
			State = 516; type(0);
			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 517; typeParameterConstraintClause();
				}
				}
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 523; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 56, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 525; attribute();
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 531; modifier();
				}
				}
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 537;
			_la = TokenStream.La(1);
			if ( !(_la==Get || _la==Set) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 538; identifier();
			State = 540;
			_la = TokenStream.La(1);
			if (_la==LeftAngle) {
				{
				State = 539; typeArguments();
				}
			}

			State = 542; parameterList();
			State = 543; Match(Lambda);
			State = 544; type(0);
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Where) {
				{
				{
				State = 545; typeParameterConstraintClause();
				}
				}
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 551; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_methodBody);
		int _la;
		try {
			State = 562;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 553; Match(LeftBrace);
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 554; statement();
					}
					}
					State = 559;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 560; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 561; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_overloadableOperator);
		try {
			State = 574;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 564; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 565; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 566; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 567; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 568; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 569; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 570; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 571; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 572; Match(LeftBracket);
				State = 573; Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 62, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==EscapedIdentifier) {
				{
				{
				State = 576; attribute();
				}
				}
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Static) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe))) != 0)) {
				{
				{
				State = 582; modifier();
				}
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 588;
			_localctx.kind = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 589; identifier();
			State = 592;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 590; Match(Colon);
				State = 591; type(0);
				}
			}

			State = 596;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 594; Match(Assign);
				State = 595; expression(0);
				}
			}

			State = 598; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetDeclarationStatementContext : StatementContext {
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public LetDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public LetDeclarationContext letDeclaration() {
			return GetRuleContext<LetDeclarationContext>(0);
		}
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_statement);
		int _la;
		try {
			State = 675;
			switch (TokenStream.La(1)) {
			case Var:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 600; variableDeclaration();
				State = 601; Match(Semicolon);
				}
				break;
			case Let:
				_localctx = new LetDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 603; letDeclaration();
				State = 604; Match(Semicolon);
				}
				break;
			case Unsafe:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 606; Match(Unsafe);
				State = 607; Match(LeftBrace);
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 608; statement();
					}
					}
					State = 613;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 614; Match(RightBrace);
				}
				break;
			case LeftBrace:
				_localctx = new BlockContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 615; Match(LeftBrace);
				State = 619;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral) | (1L << Semicolon))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LeftBrace - 69)) | (1L << (Asterisk - 69)) | (1L << (AddressOf - 69)) | (1L << (Plus - 69)) | (1L << (Minus - 69)) | (1L << (Not - 69)) | (1L << (Increment - 69)) | (1L << (Decrement - 69)) | (1L << (Identifier - 69)) | (1L << (EscapedIdentifier - 69)))) != 0)) {
					{
					{
					State = 616; statement();
					}
					}
					State = 621;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 622; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 623; Match(Semicolon);
				}
				break;
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 624; expression(0);
				State = 625; Match(Semicolon);
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 627; Match(Return);
				State = 628; expression(0);
				State = 629; Match(Semicolon);
				}
				break;
			case Throw:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 631; Match(Throw);
				State = 632; expression(0);
				State = 633; Match(Semicolon);
				}
				break;
			case If:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 635; Match(If);
				State = 636; Match(LeftParen);
				State = 637; expression(0);
				State = 638; Match(RightParen);
				State = 639; statement();
				State = 642;
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 640; Match(Else);
					State = 641; statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 644; Match(For);
				State = 645; Match(LeftParen);
				State = 648;
				switch (TokenStream.La(1)) {
				case Var:
					{
					State = 646; variableDeclaration();
					}
					break;
				case Let:
					{
					State = 647; letDeclaration();
					}
					break;
				case Semicolon:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 650; Match(Semicolon);
				State = 652;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					State = 651; expression(0);
					}
				}

				State = 654; Match(Semicolon);
				State = 656;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral) | (1L << StringLiteral))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					State = 655; expression(0);
					}
				}

				State = 658; Match(RightParen);
				State = 659; statement();
				}
				break;
			case Foreach:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 660; Match(Foreach);
				State = 661; Match(LeftParen);
				State = 664;
				switch (TokenStream.La(1)) {
				case Var:
					{
					State = 662; variableDeclaration();
					}
					break;
				case Let:
					{
					State = 663; letDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 666; Match(In);
				State = 667; expression(0);
				State = 668; Match(RightParen);
				State = 669; statement();
				}
				break;
			case Delete:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 671; Match(Delete);
				State = 672; expression(0);
				State = 673; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677; Match(Var);
			State = 678; identifier();
			State = 681;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 679; Match(Colon);
				State = 680; type(0);
				}
			}

			State = 685;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 683; Match(Assign);
				State = 684; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public LetDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetDeclarationContext letDeclaration() {
		LetDeclarationContext _localctx = new LetDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_letDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; Match(Let);
			State = 688; identifier();
			State = 691;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 689; Match(Colon);
				State = 690; type(0);
				}
			}

			State = 693; Match(Assign);
			State = 694; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(AdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public IToken s71;
		public IList<IToken> _ops = new List<IToken>();
		public IToken s72;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			switch (TokenStream.La(1)) {
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 697;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Not - 77)) | (1L << (Increment - 77)) | (1L << (Decrement - 77)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 698; expression(20);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 699; identifier();
				}
				break;
			case New:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 700; Match(New);
				State = 701; typeName();
				State = 704;
				_la = TokenStream.La(1);
				if (_la==Dot) {
					{
					State = 702; Match(Dot);
					State = 703; identifier();
					}
				}

				State = 706; Match(LeftParen);
				State = 707; argumentList();
				State = 708; Match(RightParen);
				}
				break;
			case NullLiteral:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 710; Match(NullLiteral);
				}
				break;
			case This:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 711; Match(This);
				}
				break;
			case BooleanLiteral:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 712; Match(BooleanLiteral);
				}
				break;
			case IntLiteral:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 713; Match(IntLiteral);
				}
				break;
			case Uninitialized:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 714; Match(Uninitialized);
				}
				break;
			case StringLiteral:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 715; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 779;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 777;
					switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 718;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 719;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 720; expression(20);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 721;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 722;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 723; expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 724;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 729;
						switch (TokenStream.La(1)) {
						case LeftAngle:
							{
							State = 725; ((ShiftExpressionContext)_localctx).s71 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							State = 726; ((ShiftExpressionContext)_localctx).s71 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s71);
							}
							break;
						case RightAngle:
							{
							State = 727; ((ShiftExpressionContext)_localctx).s72 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s72);
							State = 728; ((ShiftExpressionContext)_localctx).s72 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s72);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 731; expression(18);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 732;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 733;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (LeftAngle - 71)) | (1L << (RightAngle - 71)) | (1L << (LessThanOrEqual - 71)) | (1L << (GreaterThanOrEqual - 71)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 734; expression(17);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 735;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 736;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 737; expression(16);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 738;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 739; Match(And);
						State = 740; expression(15);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 741;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 742; Match(Xor);
						State = 743; expression(14);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 744;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 745; Match(Or);
						State = 746; expression(13);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 747;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 748; Match(Coalesce);
						State = 749; expression(12);
						}
						break;
					case 10:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 750;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 751; Match(IsNull);
						State = 752; expression(0);
						State = 753; Match(Colon);
						State = 754; expression(10);
						}
						break;
					case 11:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 756;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 757;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (Assign - 96)) | (1L << (AddAssign - 96)) | (1L << (SubtractAssign - 96)) | (1L << (MultiplyAssign - 96)) | (1L << (DivideAssign - 96)) | (1L << (LeftShiftAssign - 96)) | (1L << (RightShiftAssign - 96)) | (1L << (AndAssign - 96)) | (1L << (XorAssign - 96)) | (1L << (OrAssign - 96)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 758; expression(9);
						}
						break;
					case 12:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 759;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 760; Match(Dot);
						State = 761; identifier();
						}
						break;
					case 13:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 762;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 763; Match(Arrow);
						State = 764; identifier();
						}
						break;
					case 14:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 765;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 766; Match(LeftParen);
						State = 767; argumentList();
						State = 768; Match(RightParen);
						}
						break;
					case 15:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 770;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 771; Match(LeftBracket);
						State = 772; argumentList();
						State = 773; Match(RightBracket);
						}
						break;
					case 16:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 775;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 776; Match(IsNull);
						}
						break;
					}
					} 
				}
				State = 781;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return type_sempred((TypeContext)_localctx, predIndex);
		case 35: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 19);
		case 3: return Precpred(Context, 18);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 16);
		case 6: return Precpred(Context, 15);
		case 7: return Precpred(Context, 14);
		case 8: return Precpred(Context, 13);
		case 9: return Precpred(Context, 12);
		case 10: return Precpred(Context, 11);
		case 11: return Precpred(Context, 10);
		case 12: return Precpred(Context, 9);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 24);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3n\x311\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x3\x2\a\x2L\n\x2\f\x2\xE\x2O\v\x2\x3"+
		"\x2\a\x2R\n\x2\f\x2\xE\x2U\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5\x62\n\x5\f\x5\xE\x5\x65\v\x5\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\a\x6k\n\x6\f\x6\xE\x6n\v\x6\x3\x6\a\x6q\n\x6\f\x6\xE\x6"+
		"t\v\x6\x3\x6\x3\x6\x3\x6\a\x6y\n\x6\f\x6\xE\x6|\v\x6\x3\x6\a\x6\x7F\n"+
		"\x6\f\x6\xE\x6\x82\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x87\n\x6\x3\x6\x3\x6\x5"+
		"\x6\x8B\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x91\n\x6\f\x6\xE\x6\x94\v\x6"+
		"\x5\x6\x96\n\x6\x5\x6\x98\n\x6\x3\x6\a\x6\x9B\n\x6\f\x6\xE\x6\x9E\v\x6"+
		"\x3\x6\x3\x6\a\x6\xA2\n\x6\f\x6\xE\x6\xA5\v\x6\x3\x6\x3\x6\x3\x6\a\x6"+
		"\xAA\n\x6\f\x6\xE\x6\xAD\v\x6\x3\x6\a\x6\xB0\n\x6\f\x6\xE\x6\xB3\v\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xB9\n\x6\x3\x6\x3\x6\x5\x6\xBD\n\x6\x3"+
		"\x6\x3\x6\x5\x6\xC1\n\x6\x3\a\x3\a\x3\a\x5\a\xC6\n\a\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xD6\n\b\x3\t"+
		"\x3\t\x3\t\x3\t\a\t\xDC\n\t\f\t\xE\t\xDF\v\t\x3\t\x3\t\x3\n\x3\n\x5\n"+
		"\xE5\n\n\x3\n\x3\n\x5\n\xE9\n\n\x3\v\x3\v\x5\v\xED\n\v\x3\v\x3\v\x3\v"+
		"\x5\v\xF2\n\v\a\v\xF4\n\v\f\v\xE\v\xF7\v\v\x3\f\x3\f\x3\f\x3\f\a\f\xFD"+
		"\n\f\f\f\xE\f\x100\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x5\r\x110\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\a\r\x119\n\r\f\r\xE\r\x11C\v\r\x3\r\x3\r\a\r\x120\n\r\f\r\xE\r\x123"+
		"\v\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x129\n\xE\f\xE\xE\xE\x12C\v\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x5\xE\x132\n\xE\x3\xF\a\xF\x135\n\xF\f\xF\xE\xF\x138"+
		"\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x5\x10\x13F\n\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x147\n\x11\f\x11\xE\x11\x14A\v\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x151\n\x11\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x5\x12\x158\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\x161\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x167"+
		"\n\x14\f\x14\xE\x14\x16A\v\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x170"+
		"\n\x14\x3\x15\a\x15\x173\n\x15\f\x15\xE\x15\x176\v\x15\x3\x15\x5\x15\x179"+
		"\n\x15\x3\x15\x3\x15\x3\x15\a\x15\x17E\n\x15\f\x15\xE\x15\x181\v\x15\x3"+
		"\x15\x5\x15\x184\n\x15\x3\x16\x3\x16\x3\x17\a\x17\x189\n\x17\f\x17\xE"+
		"\x17\x18C\v\x17\x3\x17\a\x17\x18F\n\x17\f\x17\xE\x17\x192\v\x17\x3\x17"+
		"\x3\x17\x5\x17\x196\n\x17\x3\x17\x3\x17\x5\x17\x19A\n\x17\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x5\x18\x1AA\n\x18\x3\x19\x3\x19\x3\x19\a\x19\x1AF\n\x19"+
		"\f\x19\xE\x19\x1B2\v\x19\x3\x19\x5\x19\x1B5\n\x19\x3\x1A\a\x1A\x1B8\n"+
		"\x1A\f\x1A\xE\x1A\x1BB\v\x1A\x3\x1A\a\x1A\x1BE\n\x1A\f\x1A\xE\x1A\x1C1"+
		"\v\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\a\x1B\x1C8\n\x1B\f\x1B\xE\x1B"+
		"\x1CB\v\x1B\x3\x1B\a\x1B\x1CE\n\x1B\f\x1B\xE\x1B\x1D1\v\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x1D5\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x1DB\n\x1B\f"+
		"\x1B\xE\x1B\x1DE\v\x1B\x3\x1B\x3\x1B\x3\x1C\a\x1C\x1E3\n\x1C\f\x1C\xE"+
		"\x1C\x1E6\v\x1C\x3\x1C\a\x1C\x1E9\n\x1C\f\x1C\xE\x1C\x1EC\v\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\a\x1D\x1F6\n\x1D\f\x1D"+
		"\xE\x1D\x1F9\v\x1D\x3\x1D\a\x1D\x1FC\n\x1D\f\x1D\xE\x1D\x1FF\v\x1D\x3"+
		"\x1D\x3\x1D\x5\x1D\x203\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x209\n"+
		"\x1D\f\x1D\xE\x1D\x20C\v\x1D\x3\x1D\x3\x1D\x3\x1E\a\x1E\x211\n\x1E\f\x1E"+
		"\xE\x1E\x214\v\x1E\x3\x1E\a\x1E\x217\n\x1E\f\x1E\xE\x1E\x21A\v\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x21F\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E"+
		"\x225\n\x1E\f\x1E\xE\x1E\x228\v\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\a\x1F"+
		"\x22E\n\x1F\f\x1F\xE\x1F\x231\v\x1F\x3\x1F\x3\x1F\x5\x1F\x235\n\x1F\x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x241\n \x3!\a!\x244\n!\f!\xE"+
		"!\x247\v!\x3!\a!\x24A\n!\f!\xE!\x24D\v!\x3!\x3!\x3!\x3!\x5!\x253\n!\x3"+
		"!\x3!\x5!\x257\n!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\a\"\x264\n\"\f\"\xE\"\x267\v\"\x3\"\x3\"\x3\"\a\"\x26C\n\"\f\"\xE\"\x26F"+
		"\v\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x285\n\"\x3\"\x3\"\x3\"\x3\""+
		"\x5\"\x28B\n\"\x3\"\x3\"\x5\"\x28F\n\"\x3\"\x3\"\x5\"\x293\n\"\x3\"\x3"+
		"\"\x3\"\x3\"\x3\"\x3\"\x5\"\x29B\n\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x5\"\x2A6\n\"\x3#\x3#\x3#\x3#\x5#\x2AC\n#\x3#\x3#\x5#\x2B0"+
		"\n#\x3$\x3$\x3$\x3$\x5$\x2B6\n$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x5%\x2C3\n%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x2CF\n%"+
		"\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x2DC\n%\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%"+
		"\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\a%\x30C\n%\f%\xE%\x30F\v%\x3%\x2\x4\x18"+
		"H&\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32"+
		"\x34\x36\x38:<>@\x42\x44\x46H\x2\f\x4\x2\x34\x34lm\x3\x2\x16\x17\x4\x2"+
		"IJVW\x4\x2  ;<\x3\x2\x19\x1A\x6\x2OOQQYZ_\x61\x4\x2OO[[\x3\x2YZ\x3\x2"+
		"TU\x3\x2\x62k\x386\x2M\x3\x2\x2\x2\x4X\x3\x2\x2\x2\x6\\\x3\x2\x2\x2\b"+
		"^\x3\x2\x2\x2\n\xC0\x3\x2\x2\x2\f\xC2\x3\x2\x2\x2\xE\xD5\x3\x2\x2\x2\x10"+
		"\xD7\x3\x2\x2\x2\x12\xE2\x3\x2\x2\x2\x14\xEA\x3\x2\x2\x2\x16\xF8\x3\x2"+
		"\x2\x2\x18\x10F\x3\x2\x2\x2\x1A\x131\x3\x2\x2\x2\x1C\x136\x3\x2\x2\x2"+
		"\x1E\x13E\x3\x2\x2\x2 \x150\x3\x2\x2\x2\"\x157\x3\x2\x2\x2$\x160\x3\x2"+
		"\x2\x2&\x16F\x3\x2\x2\x2(\x183\x3\x2\x2\x2*\x185\x3\x2\x2\x2,\x18A\x3"+
		"\x2\x2\x2.\x1A9\x3\x2\x2\x2\x30\x1B4\x3\x2\x2\x2\x32\x1B9\x3\x2\x2\x2"+
		"\x34\x1C9\x3\x2\x2\x2\x36\x1E4\x3\x2\x2\x2\x38\x1F7\x3\x2\x2\x2:\x212"+
		"\x3\x2\x2\x2<\x234\x3\x2\x2\x2>\x240\x3\x2\x2\x2@\x245\x3\x2\x2\x2\x42"+
		"\x2A5\x3\x2\x2\x2\x44\x2A7\x3\x2\x2\x2\x46\x2B1\x3\x2\x2\x2H\x2CE\x3\x2"+
		"\x2\x2JL\x5\x4\x3\x2KJ\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2"+
		"\x2\x2NS\x3\x2\x2\x2OM\x3\x2\x2\x2PR\x5\n\x6\x2QP\x3\x2\x2\x2RU\x3\x2"+
		"\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2TV\x3\x2\x2\x2US\x3\x2\x2\x2VW\a\x2"+
		"\x2\x3W\x3\x3\x2\x2\x2XY\a\v\x2\x2YZ\x5\b\x5\x2Z[\a\x41\x2\x2[\x5\x3\x2"+
		"\x2\x2\\]\t\x2\x2\x2]\a\x3\x2\x2\x2^\x63\x5\x6\x4\x2_`\a\x43\x2\x2`\x62"+
		"\x5\x6\x4\x2\x61_\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2"+
		"\x63\x64\x3\x2\x2\x2\x64\t\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66g\a\f\x2"+
		"\x2gh\x5\b\x5\x2hl\aG\x2\x2ik\x5\x4\x3\x2ji\x3\x2\x2\x2kn\x3\x2\x2\x2"+
		"lj\x3\x2\x2\x2lm\x3\x2\x2\x2mr\x3\x2\x2\x2nl\x3\x2\x2\x2oq\x5\n\x6\x2"+
		"po\x3\x2\x2\x2qt\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2su\x3\x2\x2\x2"+
		"tr\x3\x2\x2\x2uv\aH\x2\x2v\xC1\x3\x2\x2\x2wy\x5\f\a\x2xw\x3\x2\x2\x2y"+
		"|\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{\x80\x3\x2\x2\x2|z\x3\x2\x2"+
		"\x2}\x7F\x5\xE\b\x2~}\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2\x80~\x3\x2\x2\x2"+
		"\x80\x81\x3\x2\x2\x2\x81\x83\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x83\x84\a"+
		"\r\x2\x2\x84\x86\x5\x6\x4\x2\x85\x87\x5\x10\t\x2\x86\x85\x3\x2\x2\x2\x86"+
		"\x87\x3\x2\x2\x2\x87\x97\x3\x2\x2\x2\x88\x8A\a\x42\x2\x2\x89\x8B\x5\x14"+
		"\v\x2\x8A\x89\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x95\x3\x2\x2\x2\x8C"+
		"\x8D\a\x42\x2\x2\x8D\x92\x5\x14\v\x2\x8E\x8F\a\x44\x2\x2\x8F\x91\x5\x14"+
		"\v\x2\x90\x8E\x3\x2\x2\x2\x91\x94\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x92"+
		"\x93\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x95\x8C\x3\x2"+
		"\x2\x2\x95\x96\x3\x2\x2\x2\x96\x98\x3\x2\x2\x2\x97\x88\x3\x2\x2\x2\x97"+
		"\x98\x3\x2\x2\x2\x98\x9C\x3\x2\x2\x2\x99\x9B\x5 \x11\x2\x9A\x99\x3\x2"+
		"\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D"+
		"\x9F\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA3\aG\x2\x2\xA0\xA2\x5$\x13"+
		"\x2\xA1\xA0\x3\x2\x2\x2\xA2\xA5\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4"+
		"\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA6\xA7\aH\x2\x2"+
		"\xA7\xC1\x3\x2\x2\x2\xA8\xAA\x5\f\a\x2\xA9\xA8\x3\x2\x2\x2\xAA\xAD\x3"+
		"\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xB1\x3\x2\x2\x2"+
		"\xAD\xAB\x3\x2\x2\x2\xAE\xB0\x5\xE\b\x2\xAF\xAE\x3\x2\x2\x2\xB0\xB3\x3"+
		"\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB4\x3\x2\x2\x2"+
		"\xB3\xB1\x3\x2\x2\x2\xB4\xB5\t\x3\x2\x2\xB5\xB8\x5\x6\x4\x2\xB6\xB7\a"+
		"\x42\x2\x2\xB7\xB9\x5\x18\r\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2"+
		"\xB9\xBC\x3\x2\x2\x2\xBA\xBB\a\x62\x2\x2\xBB\xBD\x5H%\x2\xBC\xBA\x3\x2"+
		"\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBF\a\x41\x2\x2\xBF"+
		"\xC1\x3\x2\x2\x2\xC0\x66\x3\x2\x2\x2\xC0z\x3\x2\x2\x2\xC0\xAB\x3\x2\x2"+
		"\x2\xC1\v\x3\x2\x2\x2\xC2\xC5\am\x2\x2\xC3\xC4\aM\x2\x2\xC4\xC6\aN\x2"+
		"\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\r\x3\x2\x2\x2\xC7\xD6"+
		"\a\x35\x2\x2\xC8\xD6\a\x36\x2\x2\xC9\xD6\a\x37\x2\x2\xCA\xD6\a\x38\x2"+
		"\x2\xCB\xD6\a\x39\x2\x2\xCC\xD6\a:\x2\x2\xCD\xD6\a\x1F\x2\x2\xCE\xD6\a"+
		")\x2\x2\xCF\xD6\a\x32\x2\x2\xD0\xD6\a\x33\x2\x2\xD1\xD6\a\'\x2\x2\xD2"+
		"\xD6\a(\x2\x2\xD3\xD6\a\x18\x2\x2\xD4\xD6\a&\x2\x2\xD5\xC7\x3\x2\x2\x2"+
		"\xD5\xC8\x3\x2\x2\x2\xD5\xC9\x3\x2\x2\x2\xD5\xCA\x3\x2\x2\x2\xD5\xCB\x3"+
		"\x2\x2\x2\xD5\xCC\x3\x2\x2\x2\xD5\xCD\x3\x2\x2\x2\xD5\xCE\x3\x2\x2\x2"+
		"\xD5\xCF\x3\x2\x2\x2\xD5\xD0\x3\x2\x2\x2\xD5\xD1\x3\x2\x2\x2\xD5\xD2\x3"+
		"\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD5\xD4\x3\x2\x2\x2\xD6\xF\x3\x2\x2\x2\xD7"+
		"\xD8\aI\x2\x2\xD8\xDD\x5\x12\n\x2\xD9\xDA\a\x44\x2\x2\xDA\xDC\x5\x12\n"+
		"\x2\xDB\xD9\x3\x2\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE"+
		"\x3\x2\x2\x2\xDE\xE0\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE1\aJ\x2\x2"+
		"\xE1\x11\x3\x2\x2\x2\xE2\xE4\x5\x6\x4\x2\xE3\xE5\aX\x2\x2\xE4\xE3\x3\x2"+
		"\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE8\x3\x2\x2\x2\xE6\xE7\a\x42\x2\x2\xE7"+
		"\xE9\x5\x14\v\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\x13\x3\x2"+
		"\x2\x2\xEA\xEC\x5\x6\x4\x2\xEB\xED\x5\x16\f\x2\xEC\xEB\x3\x2\x2\x2\xEC"+
		"\xED\x3\x2\x2\x2\xED\xF5\x3\x2\x2\x2\xEE\xEF\a\x43\x2\x2\xEF\xF1\x5\x6"+
		"\x4\x2\xF0\xF2\x5\x16\f\x2\xF1\xF0\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2"+
		"\xF4\x3\x2\x2\x2\xF3\xEE\x3\x2\x2\x2\xF4\xF7\x3\x2\x2\x2\xF5\xF3\x3\x2"+
		"\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\x15\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF8"+
		"\xF9\aI\x2\x2\xF9\xFE\x5\x18\r\x2\xFA\xFB\a\x44\x2\x2\xFB\xFD\x5\x18\r"+
		"\x2\xFC\xFA\x3\x2\x2\x2\xFD\x100\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF"+
		"\x3\x2\x2\x2\xFF\x101\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x101\x102\aJ\x2"+
		"\x2\x102\x17\x3\x2\x2\x2\x103\x104\b\r\x1\x2\x104\x105\a<\x2\x2\x105\x110"+
		"\x5\x18\r\x6\x106\x107\a;\x2\x2\x107\x110\x5\x18\r\x5\x108\x109\a$\x2"+
		"\x2\x109\x110\x5\x18\r\x4\x10A\x10B\x5\x1A\xE\x2\x10B\x10C\a\x46\x2\x2"+
		"\x10C\x10D\x5\x18\r\x3\x10D\x110\x3\x2\x2\x2\x10E\x110\x5\x14\v\x2\x10F"+
		"\x103\x3\x2\x2\x2\x10F\x106\x3\x2\x2\x2\x10F\x108\x3\x2\x2\x2\x10F\x10A"+
		"\x3\x2\x2\x2\x10F\x10E\x3\x2\x2\x2\x110\x121\x3\x2\x2\x2\x111\x112\f\b"+
		"\x2\x2\x112\x120\aO\x2\x2\x113\x114\f\a\x2\x2\x114\x115\aK\x2\x2\x115"+
		"\x11A\x5\x1E\x10\x2\x116\x117\a\x44\x2\x2\x117\x119\x5\x1E\x10\x2\x118"+
		"\x116\x3\x2\x2\x2\x119\x11C\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B"+
		"\x3\x2\x2\x2\x11B\x11D\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D\x11E\aL"+
		"\x2\x2\x11E\x120\x3\x2\x2\x2\x11F\x111\x3\x2\x2\x2\x11F\x113\x3\x2\x2"+
		"\x2\x120\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2"+
		"\x122\x19\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124\x125\aM\x2\x2\x125\x12A"+
		"\x5\x1C\xF\x2\x126\x127\a\x44\x2\x2\x127\x129\x5\x1C\xF\x2\x128\x126\x3"+
		"\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12A\x12B\x3\x2"+
		"\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D\x12E\aN\x2\x2"+
		"\x12E\x132\x3\x2\x2\x2\x12F\x130\aM\x2\x2\x130\x132\aN\x2\x2\x131\x124"+
		"\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x132\x1B\x3\x2\x2\x2\x133\x135\x5*"+
		"\x16\x2\x134\x133\x3\x2\x2\x2\x135\x138\x3\x2\x2\x2\x136\x134\x3\x2\x2"+
		"\x2\x136\x137\x3\x2\x2\x2\x137\x139\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2"+
		"\x139\x13A\x5\x18\r\x2\x13A\x1D\x3\x2\x2\x2\x13B\x13F\a>\x2\x2\x13C\x13F"+
		"\a@\x2\x2\x13D\x13F\x5\x6\x4\x2\x13E\x13B\x3\x2\x2\x2\x13E\x13C\x3\x2"+
		"\x2\x2\x13E\x13D\x3\x2\x2\x2\x13F\x1F\x3\x2\x2\x2\x140\x141\a\x15\x2\x2"+
		"\x141\x142\x5\x12\n\x2\x142\x143\a\x42\x2\x2\x143\x148\x5\"\x12\x2\x144"+
		"\x145\a\x44\x2\x2\x145\x147\x5\"\x12\x2\x146\x144\x3\x2\x2\x2\x147\x14A"+
		"\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x151\x3"+
		"\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14B\x14C\a\x15\x2\x2\x14C\x14D\x5\x12"+
		"\n\x2\x14D\x14E\t\x4\x2\x2\x14E\x14F\a>\x2\x2\x14F\x151\x3\x2\x2\x2\x150"+
		"\x140\x3\x2\x2\x2\x150\x14B\x3\x2\x2\x2\x151!\x3\x2\x2\x2\x152\x153\a"+
		"\xF\x2\x2\x153\x154\aM\x2\x2\x154\x158\aN\x2\x2\x155\x158\x5\x14\v\x2"+
		"\x156\x158\x5\x12\n\x2\x157\x152\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157"+
		"\x156\x3\x2\x2\x2\x158#\x3\x2\x2\x2\x159\x161\x5,\x17\x2\x15A\x161\x5"+
		"\x32\x1A\x2\x15B\x161\x5\x38\x1D\x2\x15C\x161\x5\x34\x1B\x2\x15D\x161"+
		"\x5\x36\x1C\x2\x15E\x161\x5@!\x2\x15F\x161\x5:\x1E\x2\x160\x159\x3\x2"+
		"\x2\x2\x160\x15A\x3\x2\x2\x2\x160\x15B\x3\x2\x2\x2\x160\x15C\x3\x2\x2"+
		"\x2\x160\x15D\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x160\x15F\x3\x2\x2\x2"+
		"\x161%\x3\x2\x2\x2\x162\x163\aM\x2\x2\x163\x168\x5(\x15\x2\x164\x165\a"+
		"\x44\x2\x2\x165\x167\x5(\x15\x2\x166\x164\x3\x2\x2\x2\x167\x16A\x3\x2"+
		"\x2\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16B\x3\x2\x2"+
		"\x2\x16A\x168\x3\x2\x2\x2\x16B\x16C\aN\x2\x2\x16C\x170\x3\x2\x2\x2\x16D"+
		"\x16E\aM\x2\x2\x16E\x170\aN\x2\x2\x16F\x162\x3\x2\x2\x2\x16F\x16D\x3\x2"+
		"\x2\x2\x170\'\x3\x2\x2\x2\x171\x173\x5*\x16\x2\x172\x171\x3\x2\x2\x2\x173"+
		"\x176\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x178"+
		"\x3\x2\x2\x2\x176\x174\x3\x2\x2\x2\x177\x179\x5\x6\x4\x2\x178\x177\x3"+
		"\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\a\x42"+
		"\x2\x2\x17B\x184\x5\x18\r\x2\x17C\x17E\x5*\x16\x2\x17D\x17C\x3\x2\x2\x2"+
		"\x17E\x181\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180"+
		"\x182\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2\x182\x184\a\x12\x2\x2\x183\x174"+
		"\x3\x2\x2\x2\x183\x17F\x3\x2\x2\x2\x184)\x3\x2\x2\x2\x185\x186\t\x5\x2"+
		"\x2\x186+\x3\x2\x2\x2\x187\x189\x5\f\a\x2\x188\x187\x3\x2\x2\x2\x189\x18C"+
		"\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x190\x3"+
		"\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18D\x18F\x5\xE\b\x2\x18E\x18D\x3\x2\x2"+
		"\x2\x18F\x192\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2"+
		"\x191\x193\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x193\x195\a\xF\x2\x2\x194"+
		"\x196\x5\x6\x4\x2\x195\x194\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197"+
		"\x3\x2\x2\x2\x197\x199\x5&\x14\x2\x198\x19A\x5.\x18\x2\x199\x198\x3\x2"+
		"\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\x19C\x5<\x1F\x2"+
		"\x19C-\x3\x2\x2\x2\x19D\x19E\a\x42\x2\x2\x19E\x19F\a%\x2\x2\x19F\x1A0"+
		"\aM\x2\x2\x1A0\x1A1\x5\x30\x19\x2\x1A1\x1A2\aN\x2\x2\x1A2\x1AA\x3\x2\x2"+
		"\x2\x1A3\x1A4\a\x42\x2\x2\x1A4\x1A5\a\x12\x2\x2\x1A5\x1A6\aM\x2\x2\x1A6"+
		"\x1A7\x5\x30\x19\x2\x1A7\x1A8\aN\x2\x2\x1A8\x1AA\x3\x2\x2\x2\x1A9\x19D"+
		"\x3\x2\x2\x2\x1A9\x1A3\x3\x2\x2\x2\x1AA/\x3\x2\x2\x2\x1AB\x1B0\x5H%\x2"+
		"\x1AC\x1AD\a\x44\x2\x2\x1AD\x1AF\x5H%\x2\x1AE\x1AC\x3\x2\x2\x2\x1AF\x1B2"+
		"\x3\x2\x2\x2\x1B0\x1AE\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B5\x3"+
		"\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B3\x1B5\x3\x2\x2\x2\x1B4\x1AB\x3\x2"+
		"\x2\x2\x1B4\x1B3\x3\x2\x2\x2\x1B5\x31\x3\x2\x2\x2\x1B6\x1B8\x5\f\a\x2"+
		"\x1B7\x1B6\x3\x2\x2\x2\x1B8\x1BB\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9"+
		"\x1BA\x3\x2\x2\x2\x1BA\x1BF\x3\x2\x2\x2\x1BB\x1B9\x3\x2\x2\x2\x1BC\x1BE"+
		"\x5\xE\b\x2\x1BD\x1BC\x3\x2\x2\x2\x1BE\x1C1\x3\x2\x2\x2\x1BF\x1BD\x3\x2"+
		"\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0\x1C2\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2"+
		"\x2\x1C2\x1C3\a\x10\x2\x2\x1C3\x1C4\x5&\x14\x2\x1C4\x1C5\x5<\x1F\x2\x1C5"+
		"\x33\x3\x2\x2\x2\x1C6\x1C8\x5\f\a\x2\x1C7\x1C6\x3\x2\x2\x2\x1C8\x1CB\x3"+
		"\x2\x2\x2\x1C9\x1C7\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CF\x3\x2"+
		"\x2\x2\x1CB\x1C9\x3\x2\x2\x2\x1CC\x1CE\x5\xE\b\x2\x1CD\x1CC\x3\x2\x2\x2"+
		"\x1CE\x1D1\x3\x2\x2\x2\x1CF\x1CD\x3\x2\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0"+
		"\x1D2\x3\x2\x2\x2\x1D1\x1CF\x3\x2\x2\x2\x1D2\x1D4\x5\x6\x4\x2\x1D3\x1D5"+
		"\x5\x16\f\x2\x1D4\x1D3\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D6\x3"+
		"\x2\x2\x2\x1D6\x1D7\x5&\x14\x2\x1D7\x1D8\a\x46\x2\x2\x1D8\x1DC\x5\x18"+
		"\r\x2\x1D9\x1DB\x5 \x11\x2\x1DA\x1D9\x3\x2\x2\x2\x1DB\x1DE\x3\x2\x2\x2"+
		"\x1DC\x1DA\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD\x1DF\x3\x2\x2\x2\x1DE"+
		"\x1DC\x3\x2\x2\x2\x1DF\x1E0\x5<\x1F\x2\x1E0\x35\x3\x2\x2\x2\x1E1\x1E3"+
		"\x5\f\a\x2\x1E2\x1E1\x3\x2\x2\x2\x1E3\x1E6\x3\x2\x2\x2\x1E4\x1E2\x3\x2"+
		"\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1EA\x3\x2\x2\x2\x1E6\x1E4\x3\x2\x2"+
		"\x2\x1E7\x1E9\x5\xE\b\x2\x1E8\x1E7\x3\x2\x2\x2\x1E9\x1EC\x3\x2\x2\x2\x1EA"+
		"\x1E8\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1ED\x3\x2\x2\x2\x1EC\x1EA"+
		"\x3\x2\x2\x2\x1ED\x1EE\a\x11\x2\x2\x1EE\x1EF\x5> \x2\x1EF\x1F0\x5&\x14"+
		"\x2\x1F0\x1F1\a\x46\x2\x2\x1F1\x1F2\x5\x18\r\x2\x1F2\x1F3\x5<\x1F\x2\x1F3"+
		"\x37\x3\x2\x2\x2\x1F4\x1F6\x5\f\a\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6\x1F9\x3"+
		"\x2\x2\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1FD\x3\x2"+
		"\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1FA\x1FC\x5\xE\b\x2\x1FB\x1FA\x3\x2\x2\x2"+
		"\x1FC\x1FF\x3\x2\x2\x2\x1FD\x1FB\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE"+
		"\x200\x3\x2\x2\x2\x1FF\x1FD\x3\x2\x2\x2\x200\x202\a\x34\x2\x2\x201\x203"+
		"\x5\x16\f\x2\x202\x201\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203\x204\x3"+
		"\x2\x2\x2\x204\x205\x5&\x14\x2\x205\x206\a\x46\x2\x2\x206\x20A\x5\x18"+
		"\r\x2\x207\x209\x5 \x11\x2\x208\x207\x3\x2\x2\x2\x209\x20C\x3\x2\x2\x2"+
		"\x20A\x208\x3\x2\x2\x2\x20A\x20B\x3\x2\x2\x2\x20B\x20D\x3\x2\x2\x2\x20C"+
		"\x20A\x3\x2\x2\x2\x20D\x20E\x5<\x1F\x2\x20E\x39\x3\x2\x2\x2\x20F\x211"+
		"\x5\f\a\x2\x210\x20F\x3\x2\x2\x2\x211\x214\x3\x2\x2\x2\x212\x210\x3\x2"+
		"\x2\x2\x212\x213\x3\x2\x2\x2\x213\x218\x3\x2\x2\x2\x214\x212\x3\x2\x2"+
		"\x2\x215\x217\x5\xE\b\x2\x216\x215\x3\x2\x2\x2\x217\x21A\x3\x2\x2\x2\x218"+
		"\x216\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219\x21B\x3\x2\x2\x2\x21A\x218"+
		"\x3\x2\x2\x2\x21B\x21C\t\x6\x2\x2\x21C\x21E\x5\x6\x4\x2\x21D\x21F\x5\x16"+
		"\f\x2\x21E\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2"+
		"\x220\x221\x5&\x14\x2\x221\x222\a\x46\x2\x2\x222\x226\x5\x18\r\x2\x223"+
		"\x225\x5 \x11\x2\x224\x223\x3\x2\x2\x2\x225\x228\x3\x2\x2\x2\x226\x224"+
		"\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x229\x3\x2\x2\x2\x228\x226\x3"+
		"\x2\x2\x2\x229\x22A\x5<\x1F\x2\x22A;\x3\x2\x2\x2\x22B\x22F\aG\x2\x2\x22C"+
		"\x22E\x5\x42\"\x2\x22D\x22C\x3\x2\x2\x2\x22E\x231\x3\x2\x2\x2\x22F\x22D"+
		"\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230\x232\x3\x2\x2\x2\x231\x22F\x3"+
		"\x2\x2\x2\x232\x235\aH\x2\x2\x233\x235\a\x41\x2\x2\x234\x22B\x3\x2\x2"+
		"\x2\x234\x233\x3\x2\x2\x2\x235=\x3\x2\x2\x2\x236\x241\aO\x2\x2\x237\x241"+
		"\aQ\x2\x2\x238\x241\a^\x2\x2\x239\x241\a\\\x2\x2\x23A\x241\a]\x2\x2\x23B"+
		"\x241\aS\x2\x2\x23C\x241\aR\x2\x2\x23D\x241\a\x43\x2\x2\x23E\x23F\aK\x2"+
		"\x2\x23F\x241\aL\x2\x2\x240\x236\x3\x2\x2\x2\x240\x237\x3\x2\x2\x2\x240"+
		"\x238\x3\x2\x2\x2\x240\x239\x3\x2\x2\x2\x240\x23A\x3\x2\x2\x2\x240\x23B"+
		"\x3\x2\x2\x2\x240\x23C\x3\x2\x2\x2\x240\x23D\x3\x2\x2\x2\x240\x23E\x3"+
		"\x2\x2\x2\x241?\x3\x2\x2\x2\x242\x244\x5\f\a\x2\x243\x242\x3\x2\x2\x2"+
		"\x244\x247\x3\x2\x2\x2\x245\x243\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246"+
		"\x24B\x3\x2\x2\x2\x247\x245\x3\x2\x2\x2\x248\x24A\x5\xE\b\x2\x249\x248"+
		"\x3\x2\x2\x2\x24A\x24D\x3\x2\x2\x2\x24B\x249\x3\x2\x2\x2\x24B\x24C\x3"+
		"\x2\x2\x2\x24C\x24E\x3\x2\x2\x2\x24D\x24B\x3\x2\x2\x2\x24E\x24F\t\x3\x2"+
		"\x2\x24F\x252\x5\x6\x4\x2\x250\x251\a\x42\x2\x2\x251\x253\x5\x18\r\x2"+
		"\x252\x250\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x256\x3\x2\x2\x2\x254"+
		"\x255\a\x62\x2\x2\x255\x257\x5H%\x2\x256\x254\x3\x2\x2\x2\x256\x257\x3"+
		"\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x259\a\x41\x2\x2\x259\x41\x3\x2\x2"+
		"\x2\x25A\x25B\x5\x44#\x2\x25B\x25C\a\x41\x2\x2\x25C\x2A6\x3\x2\x2\x2\x25D"+
		"\x25E\x5\x46$\x2\x25E\x25F\a\x41\x2\x2\x25F\x2A6\x3\x2\x2\x2\x260\x261"+
		"\a:\x2\x2\x261\x265\aG\x2\x2\x262\x264\x5\x42\"\x2\x263\x262\x3\x2\x2"+
		"\x2\x264\x267\x3\x2\x2\x2\x265\x263\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2"+
		"\x266\x268\x3\x2\x2\x2\x267\x265\x3\x2\x2\x2\x268\x2A6\aH\x2\x2\x269\x26D"+
		"\aG\x2\x2\x26A\x26C\x5\x42\"\x2\x26B\x26A\x3\x2\x2\x2\x26C\x26F\x3\x2"+
		"\x2\x2\x26D\x26B\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x270\x3\x2\x2"+
		"\x2\x26F\x26D\x3\x2\x2\x2\x270\x2A6\aH\x2\x2\x271\x2A6\a\x41\x2\x2\x272"+
		"\x273\x5H%\x2\x273\x274\a\x41\x2\x2\x274\x2A6\x3\x2\x2\x2\x275\x276\a"+
		"\x13\x2\x2\x276\x277\x5H%\x2\x277\x278\a\x41\x2\x2\x278\x2A6\x3\x2\x2"+
		"\x2\x279\x27A\a\x31\x2\x2\x27A\x27B\x5H%\x2\x27B\x27C\a\x41\x2\x2\x27C"+
		"\x2A6\x3\x2\x2\x2\x27D\x27E\a\x1D\x2\x2\x27E\x27F\aM\x2\x2\x27F\x280\x5"+
		"H%\x2\x280\x281\aN\x2\x2\x281\x284\x5\x42\"\x2\x282\x283\a\x1E\x2\x2\x283"+
		"\x285\x5\x42\"\x2\x284\x282\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x2A6"+
		"\x3\x2\x2\x2\x286\x287\a!\x2\x2\x287\x28A\aM\x2\x2\x288\x28B\x5\x44#\x2"+
		"\x289\x28B\x5\x46$\x2\x28A\x288\x3\x2\x2\x2\x28A\x289\x3\x2\x2\x2\x28A"+
		"\x28B\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x28E\a\x41\x2\x2\x28D\x28F"+
		"\x5H%\x2\x28E\x28D\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x290\x3\x2\x2"+
		"\x2\x290\x292\a\x41\x2\x2\x291\x293\x5H%\x2\x292\x291\x3\x2\x2\x2\x292"+
		"\x293\x3\x2\x2\x2\x293\x294\x3\x2\x2\x2\x294\x295\aN\x2\x2\x295\x2A6\x5"+
		"\x42\"\x2\x296\x297\a\"\x2\x2\x297\x29A\aM\x2\x2\x298\x29B\x5\x44#\x2"+
		"\x299\x29B\x5\x46$\x2\x29A\x298\x3\x2\x2\x2\x29A\x299\x3\x2\x2\x2\x29B"+
		"\x29C\x3\x2\x2\x2\x29C\x29D\a#\x2\x2\x29D\x29E\x5H%\x2\x29E\x29F\aN\x2"+
		"\x2\x29F\x2A0\x5\x42\"\x2\x2A0\x2A6\x3\x2\x2\x2\x2A1\x2A2\a\x10\x2\x2"+
		"\x2A2\x2A3\x5H%\x2\x2A3\x2A4\a\x41\x2\x2\x2A4\x2A6\x3\x2\x2\x2\x2A5\x25A"+
		"\x3\x2\x2\x2\x2A5\x25D\x3\x2\x2\x2\x2A5\x260\x3\x2\x2\x2\x2A5\x269\x3"+
		"\x2\x2\x2\x2A5\x271\x3\x2\x2\x2\x2A5\x272\x3\x2\x2\x2\x2A5\x275\x3\x2"+
		"\x2\x2\x2A5\x279\x3\x2\x2\x2\x2A5\x27D\x3\x2\x2\x2\x2A5\x286\x3\x2\x2"+
		"\x2\x2A5\x296\x3\x2\x2\x2\x2A5\x2A1\x3\x2\x2\x2\x2A6\x43\x3\x2\x2\x2\x2A7"+
		"\x2A8\a\x16\x2\x2\x2A8\x2AB\x5\x6\x4\x2\x2A9\x2AA\a\x42\x2\x2\x2AA\x2AC"+
		"\x5\x18\r\x2\x2AB\x2A9\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AF\x3"+
		"\x2\x2\x2\x2AD\x2AE\a\x62\x2\x2\x2AE\x2B0\x5H%\x2\x2AF\x2AD\x3\x2\x2\x2"+
		"\x2AF\x2B0\x3\x2\x2\x2\x2B0\x45\x3\x2\x2\x2\x2B1\x2B2\a\x17\x2\x2\x2B2"+
		"\x2B5\x5\x6\x4\x2\x2B3\x2B4\a\x42\x2\x2\x2B4\x2B6\x5\x18\r\x2\x2B5\x2B3"+
		"\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8\a\x62"+
		"\x2\x2\x2B8\x2B9\x5H%\x2\x2B9G\x3\x2\x2\x2\x2BA\x2BB\b%\x1\x2\x2BB\x2BC"+
		"\t\a\x2\x2\x2BC\x2CF\x5H%\x16\x2BD\x2CF\x5\x6\x4\x2\x2BE\x2BF\a\xF\x2"+
		"\x2\x2BF\x2C2\x5\x14\v\x2\x2C0\x2C1\a\x43\x2\x2\x2C1\x2C3\x5\x6\x4\x2"+
		"\x2C2\x2C0\x3\x2\x2\x2\x2C2\x2C3\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4"+
		"\x2C5\aM\x2\x2\x2C5\x2C6\x5\x30\x19\x2\x2C6\x2C7\aN\x2\x2\x2C7\x2CF\x3"+
		"\x2\x2\x2\x2C8\x2CF\a?\x2\x2\x2C9\x2CF\a\x12\x2\x2\x2CA\x2CF\a=\x2\x2"+
		"\x2CB\x2CF\a>\x2\x2\x2CC\x2CF\a\x14\x2\x2\x2CD\x2CF\a@\x2\x2\x2CE\x2BA"+
		"\x3\x2\x2\x2\x2CE\x2BD\x3\x2\x2\x2\x2CE\x2BE\x3\x2\x2\x2\x2CE\x2C8\x3"+
		"\x2\x2\x2\x2CE\x2C9\x3\x2\x2\x2\x2CE\x2CA\x3\x2\x2\x2\x2CE\x2CB\x3\x2"+
		"\x2\x2\x2CE\x2CC\x3\x2\x2\x2\x2CE\x2CD\x3\x2\x2\x2\x2CF\x30D\x3\x2\x2"+
		"\x2\x2D0\x2D1\f\x15\x2\x2\x2D1\x2D2\t\b\x2\x2\x2D2\x30C\x5H%\x16\x2D3"+
		"\x2D4\f\x14\x2\x2\x2D4\x2D5\t\t\x2\x2\x2D5\x30C\x5H%\x15\x2D6\x2DB\f\x13"+
		"\x2\x2\x2D7\x2D8\aI\x2\x2\x2D8\x2DC\aI\x2\x2\x2D9\x2DA\aJ\x2\x2\x2DA\x2DC"+
		"\aJ\x2\x2\x2DB\x2D7\x3\x2\x2\x2\x2DB\x2D9\x3\x2\x2\x2\x2DC\x2DD\x3\x2"+
		"\x2\x2\x2DD\x30C\x5H%\x14\x2DE\x2DF\f\x12\x2\x2\x2DF\x2E0\t\x4\x2\x2\x2E0"+
		"\x30C\x5H%\x13\x2E1\x2E2\f\x11\x2\x2\x2E2\x2E3\t\n\x2\x2\x2E3\x30C\x5"+
		"H%\x12\x2E4\x2E5\f\x10\x2\x2\x2E5\x2E6\a\\\x2\x2\x2E6\x30C\x5H%\x11\x2E7"+
		"\x2E8\f\xF\x2\x2\x2E8\x2E9\a]\x2\x2\x2E9\x30C\x5H%\x10\x2EA\x2EB\f\xE"+
		"\x2\x2\x2EB\x2EC\a^\x2\x2\x2EC\x30C\x5H%\xF\x2ED\x2EE\f\r\x2\x2\x2EE\x2EF"+
		"\aR\x2\x2\x2EF\x30C\x5H%\xE\x2F0\x2F1\f\f\x2\x2\x2F1\x2F2\aS\x2\x2\x2F2"+
		"\x2F3\x5H%\x2\x2F3\x2F4\a\x42\x2\x2\x2F4\x2F5\x5H%\f\x2F5\x30C\x3\x2\x2"+
		"\x2\x2F6\x2F7\f\v\x2\x2\x2F7\x2F8\t\v\x2\x2\x2F8\x30C\x5H%\v\x2F9\x2FA"+
		"\f\x1B\x2\x2\x2FA\x2FB\a\x43\x2\x2\x2FB\x30C\x5\x6\x4\x2\x2FC\x2FD\f\x1A"+
		"\x2\x2\x2FD\x2FE\a\x45\x2\x2\x2FE\x30C\x5\x6\x4\x2\x2FF\x300\f\x19\x2"+
		"\x2\x300\x301\aM\x2\x2\x301\x302\x5\x30\x19\x2\x302\x303\aN\x2\x2\x303"+
		"\x30C\x3\x2\x2\x2\x304\x305\f\x18\x2\x2\x305\x306\aK\x2\x2\x306\x307\x5"+
		"\x30\x19\x2\x307\x308\aL\x2\x2\x308\x30C\x3\x2\x2\x2\x309\x30A\f\x17\x2"+
		"\x2\x30A\x30C\aS\x2\x2\x30B\x2D0\x3\x2\x2\x2\x30B\x2D3\x3\x2\x2\x2\x30B"+
		"\x2D6\x3\x2\x2\x2\x30B\x2DE\x3\x2\x2\x2\x30B\x2E1\x3\x2\x2\x2\x30B\x2E4"+
		"\x3\x2\x2\x2\x30B\x2E7\x3\x2\x2\x2\x30B\x2EA\x3\x2\x2\x2\x30B\x2ED\x3"+
		"\x2\x2\x2\x30B\x2F0\x3\x2\x2\x2\x30B\x2F6\x3\x2\x2\x2\x30B\x2F9\x3\x2"+
		"\x2\x2\x30B\x2FC\x3\x2\x2\x2\x30B\x2FF\x3\x2\x2\x2\x30B\x304\x3\x2\x2"+
		"\x2\x30B\x309\x3\x2\x2\x2\x30C\x30F\x3\x2\x2\x2\x30D\x30B\x3\x2\x2\x2"+
		"\x30D\x30E\x3\x2\x2\x2\x30EI\x3\x2\x2\x2\x30F\x30D\x3\x2\x2\x2^MS\x63"+
		"lrz\x80\x86\x8A\x92\x95\x97\x9C\xA3\xAB\xB1\xB8\xBC\xC0\xC5\xD5\xDD\xE4"+
		"\xE8\xEC\xF1\xF5\xFE\x10F\x11A\x11F\x121\x12A\x131\x136\x13E\x148\x150"+
		"\x157\x160\x168\x16F\x174\x178\x17F\x183\x18A\x190\x195\x199\x1A9\x1B0"+
		"\x1B4\x1B9\x1BF\x1C9\x1CF\x1D4\x1DC\x1E4\x1EA\x1F7\x1FD\x202\x20A\x212"+
		"\x218\x21E\x226\x22F\x234\x240\x245\x24B\x252\x256\x265\x26D\x284\x28A"+
		"\x28E\x292\x29A\x2A5\x2AB\x2AF\x2B5\x2C2\x2CE\x2DB\x30B\x30D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Compiler.Antlr
