//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreprocessorLineParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class PreprocessorLineParser : Parser {
	public const int
		SingleLineComment=1, Define=2, Undefine=3, If=4, ElseIf=5, Else=6, EndIf=7, 
		Line=8, Error=9, Warning=10, Region=11, EndRegion=12, PragmaWarning=13, 
		Pragma=14, BooleanLiteral=15, LineMode=16, WarningAction=17, ConditionalSymbol=18, 
		And=19, Or=20, Not=21, Equal=22, NotEqual=23, LeftParen=24, RightParen=25, 
		Number=26, FileName=27, Comma=28, Whitespace=29, Newline=30, Message=31;
	public const int
		RULE_preprocessorLine = 0, RULE_directive = 1, RULE_define = 2, RULE_undefine = 3, 
		RULE_conditionalSymbol = 4, RULE_ifDecl = 5, RULE_elseif = 6, RULE_elseDecl = 7, 
		RULE_endif = 8, RULE_expression = 9, RULE_line = 10, RULE_error = 11, 
		RULE_warning = 12, RULE_region = 13, RULE_pragma = 14;
	public static readonly string[] ruleNames = {
		"preprocessorLine", "directive", "define", "undefine", "conditionalSymbol", 
		"ifDecl", "elseif", "elseDecl", "endif", "expression", "line", "error", 
		"warning", "region", "pragma"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'&&'", "'||'", "'!'", "'=='", 
		"'!='", "'('", "')'", null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineComment", "Define", "Undefine", "If", "ElseIf", "Else", 
		"EndIf", "Line", "Error", "Warning", "Region", "EndRegion", "PragmaWarning", 
		"Pragma", "BooleanLiteral", "LineMode", "WarningAction", "ConditionalSymbol", 
		"And", "Or", "Not", "Equal", "NotEqual", "LeftParen", "RightParen", "Number", 
		"FileName", "Comma", "Whitespace", "Newline", "Message"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreprocessorLineParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreprocessorLineParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class PreprocessorLineContext : ParserRuleContext {
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(PreprocessorLineParser.Eof, 0); }
		public PreprocessorLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorLineContext preprocessorLine() {
		PreprocessorLineContext _localctx = new PreprocessorLineContext(Context, State);
		EnterRule(_localctx, 0, RULE_preprocessorLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; directive();
			State = 31; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public DefineContext define() {
			return GetRuleContext<DefineContext>(0);
		}
		public UndefineContext undefine() {
			return GetRuleContext<UndefineContext>(0);
		}
		public IfDeclContext ifDecl() {
			return GetRuleContext<IfDeclContext>(0);
		}
		public ElseifContext elseif() {
			return GetRuleContext<ElseifContext>(0);
		}
		public ElseDeclContext elseDecl() {
			return GetRuleContext<ElseDeclContext>(0);
		}
		public EndifContext endif() {
			return GetRuleContext<EndifContext>(0);
		}
		public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public ErrorContext error() {
			return GetRuleContext<ErrorContext>(0);
		}
		public WarningContext warning() {
			return GetRuleContext<WarningContext>(0);
		}
		public RegionContext region() {
			return GetRuleContext<RegionContext>(0);
		}
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_directive);
		try {
			State = 44;
			switch (TokenStream.La(1)) {
			case Define:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; define();
				}
				break;
			case Undefine:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; undefine();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 3);
				{
				State = 35; ifDecl();
				}
				break;
			case ElseIf:
				EnterOuterAlt(_localctx, 4);
				{
				State = 36; elseif();
				}
				break;
			case Else:
				EnterOuterAlt(_localctx, 5);
				{
				State = 37; elseDecl();
				}
				break;
			case EndIf:
				EnterOuterAlt(_localctx, 6);
				{
				State = 38; endif();
				}
				break;
			case Line:
			case Number:
				EnterOuterAlt(_localctx, 7);
				{
				State = 39; line();
				}
				break;
			case Error:
				EnterOuterAlt(_localctx, 8);
				{
				State = 40; error();
				}
				break;
			case Warning:
				EnterOuterAlt(_localctx, 9);
				{
				State = 41; warning();
				}
				break;
			case Region:
			case EndRegion:
				EnterOuterAlt(_localctx, 10);
				{
				State = 42; region();
				}
				break;
			case PragmaWarning:
			case Pragma:
				EnterOuterAlt(_localctx, 11);
				{
				State = 43; pragma();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		public ITerminalNode Define() { return GetToken(PreprocessorLineParser.Define, 0); }
		public ConditionalSymbolContext conditionalSymbol() {
			return GetRuleContext<ConditionalSymbolContext>(0);
		}
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 4, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(Define);
			State = 47; conditionalSymbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefineContext : ParserRuleContext {
		public ITerminalNode Undefine() { return GetToken(PreprocessorLineParser.Undefine, 0); }
		public ConditionalSymbolContext conditionalSymbol() {
			return GetRuleContext<ConditionalSymbolContext>(0);
		}
		public UndefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterUndefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitUndefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefineContext undefine() {
		UndefineContext _localctx = new UndefineContext(Context, State);
		EnterRule(_localctx, 6, RULE_undefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(Undefine);
			State = 50; conditionalSymbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalSymbolContext : ParserRuleContext {
		public ITerminalNode ConditionalSymbol() { return GetToken(PreprocessorLineParser.ConditionalSymbol, 0); }
		public ITerminalNode LineMode() { return GetToken(PreprocessorLineParser.LineMode, 0); }
		public ITerminalNode WarningAction() { return GetToken(PreprocessorLineParser.WarningAction, 0); }
		public ConditionalSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalSymbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterConditionalSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitConditionalSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalSymbolContext conditionalSymbol() {
		ConditionalSymbolContext _localctx = new ConditionalSymbolContext(Context, State);
		EnterRule(_localctx, 8, RULE_conditionalSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LineMode) | (1L << WarningAction) | (1L << ConditionalSymbol))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfDeclContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(PreprocessorLineParser.If, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterIfDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitIfDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfDeclContext ifDecl() {
		IfDeclContext _localctx = new IfDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(If);
			State = 55; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifContext : ParserRuleContext {
		public ITerminalNode ElseIf() { return GetToken(PreprocessorLineParser.ElseIf, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterElseif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitElseif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifContext elseif() {
		ElseifContext _localctx = new ElseifContext(Context, State);
		EnterRule(_localctx, 12, RULE_elseif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(ElseIf);
			State = 58; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseDeclContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(PreprocessorLineParser.Else, 0); }
		public ElseDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterElseDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitElseDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseDeclContext elseDecl() {
		ElseDeclContext _localctx = new ElseDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_elseDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(Else);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndifContext : ParserRuleContext {
		public ITerminalNode EndIf() { return GetToken(PreprocessorLineParser.EndIf, 0); }
		public EndifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterEndif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitEndif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndifContext endif() {
		EndifContext _localctx = new EndifContext(Context, State);
		EnterRule(_localctx, 16, RULE_endif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(EndIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExpressionContext {
		public ConditionalSymbolContext conditionalSymbol() {
			return GetRuleContext<ConditionalSymbolContext>(0);
		}
		public VariableContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanValueContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(PreprocessorLineParser.BooleanLiteral, 0); }
		public BooleanValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupingContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupingContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterGrouping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitGrouping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			switch (TokenStream.La(1)) {
			case Not:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 65; Match(Not);
				State = 66; expression(7);
				}
				break;
			case LeftParen:
				{
				_localctx = new GroupingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 67; Match(LeftParen);
				State = 68; expression(0);
				State = 69; Match(RightParen);
				}
				break;
			case LineMode:
			case WarningAction:
			case ConditionalSymbol:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 71; conditionalSymbol();
				}
				break;
			case BooleanLiteral:
				{
				_localctx = new BooleanValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72; Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 86;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 84;
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 75;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 76; Match(And);
						State = 77; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 78;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 79; Match(Or);
						State = 80; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new EqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 81;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 82;
						((EqualityContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 83; expression(5);
						}
						break;
					}
					} 
				}
				State = 88;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode Line() { return GetToken(PreprocessorLineParser.Line, 0); }
		public ITerminalNode LineMode() { return GetToken(PreprocessorLineParser.LineMode, 0); }
		public ITerminalNode Number() { return GetToken(PreprocessorLineParser.Number, 0); }
		public ITerminalNode FileName() { return GetToken(PreprocessorLineParser.FileName, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 20, RULE_line);
		int _la;
		try {
			State = 95;
			switch (TokenStream.La(1)) {
			case Line:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; Match(Line);
				State = 90; Match(LineMode);
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 91; Match(Number);
				State = 93;
				_la = TokenStream.La(1);
				if (_la==FileName) {
					{
					State = 92; Match(FileName);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public ITerminalNode Error() { return GetToken(PreprocessorLineParser.Error, 0); }
		public ITerminalNode Message() { return GetToken(PreprocessorLineParser.Message, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 22, RULE_error);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(Error);
			State = 99;
			_la = TokenStream.La(1);
			if (_la==Message) {
				{
				State = 98; Match(Message);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WarningContext : ParserRuleContext {
		public ITerminalNode Warning() { return GetToken(PreprocessorLineParser.Warning, 0); }
		public ITerminalNode Message() { return GetToken(PreprocessorLineParser.Message, 0); }
		public WarningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_warning; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterWarning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitWarning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWarning(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WarningContext warning() {
		WarningContext _localctx = new WarningContext(Context, State);
		EnterRule(_localctx, 24, RULE_warning);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(Warning);
			State = 103;
			_la = TokenStream.La(1);
			if (_la==Message) {
				{
				State = 102; Match(Message);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegionContext : ParserRuleContext {
		public RegionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_region; } }
	 
		public RegionContext() { }
		public virtual void CopyFrom(RegionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RegionEndContext : RegionContext {
		public ITerminalNode EndRegion() { return GetToken(PreprocessorLineParser.EndRegion, 0); }
		public ITerminalNode Message() { return GetToken(PreprocessorLineParser.Message, 0); }
		public RegionEndContext(RegionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterRegionEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitRegionEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegionEnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegionBeginContext : RegionContext {
		public ITerminalNode Region() { return GetToken(PreprocessorLineParser.Region, 0); }
		public ITerminalNode Message() { return GetToken(PreprocessorLineParser.Message, 0); }
		public RegionBeginContext(RegionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterRegionBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitRegionBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegionBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegionContext region() {
		RegionContext _localctx = new RegionContext(Context, State);
		EnterRule(_localctx, 26, RULE_region);
		int _la;
		try {
			State = 113;
			switch (TokenStream.La(1)) {
			case Region:
				_localctx = new RegionBeginContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(Region);
				State = 107;
				_la = TokenStream.La(1);
				if (_la==Message) {
					{
					State = 106; Match(Message);
					}
				}

				}
				break;
			case EndRegion:
				_localctx = new RegionEndContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; Match(EndRegion);
				State = 111;
				_la = TokenStream.La(1);
				if (_la==Message) {
					{
					State = 110; Match(Message);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
	 
		public PragmaContext() { }
		public virtual void CopyFrom(PragmaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PragmaWarningContext : PragmaContext {
		public IToken _Number;
		public IList<IToken> _warningNumbers = new List<IToken>();
		public ITerminalNode PragmaWarning() { return GetToken(PreprocessorLineParser.PragmaWarning, 0); }
		public ITerminalNode WarningAction() { return GetToken(PreprocessorLineParser.WarningAction, 0); }
		public ITerminalNode[] Number() { return GetTokens(PreprocessorLineParser.Number); }
		public ITerminalNode Number(int i) {
			return GetToken(PreprocessorLineParser.Number, i);
		}
		public PragmaWarningContext(PragmaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterPragmaWarning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitPragmaWarning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaWarning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PragmaUnknownContext : PragmaContext {
		public ITerminalNode Pragma() { return GetToken(PreprocessorLineParser.Pragma, 0); }
		public ITerminalNode Message() { return GetToken(PreprocessorLineParser.Message, 0); }
		public PragmaUnknownContext(PragmaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.EnterPragmaUnknown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorLineParserListener typedListener = listener as IPreprocessorLineParserListener;
			if (typedListener != null) typedListener.ExitPragmaUnknown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorLineParserVisitor<TResult> typedVisitor = visitor as IPreprocessorLineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaUnknown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(Context, State);
		EnterRule(_localctx, 28, RULE_pragma);
		int _la;
		try {
			State = 131;
			switch (TokenStream.La(1)) {
			case PragmaWarning:
				_localctx = new PragmaWarningContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; Match(PragmaWarning);
				State = 116; Match(WarningAction);
				State = 125;
				_la = TokenStream.La(1);
				if (_la==Number) {
					{
					State = 117; ((PragmaWarningContext)_localctx)._Number = Match(Number);
					((PragmaWarningContext)_localctx)._warningNumbers.Add(((PragmaWarningContext)_localctx)._Number);
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 118; Match(Comma);
						State = 119; ((PragmaWarningContext)_localctx)._Number = Match(Number);
						((PragmaWarningContext)_localctx)._warningNumbers.Add(((PragmaWarningContext)_localctx)._Number);
						}
						}
						State = 124;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				}
				break;
			case Pragma:
				_localctx = new PragmaUnknownContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; Match(Pragma);
				State = 129;
				_la = TokenStream.La(1);
				if (_la==Message) {
					{
					State = 128; Match(Message);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3!\x88\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x5\x3/\n\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vL\n\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\a\vW\n\v\f\v\xE\vZ\v\v\x3\f\x3\f\x3\f\x3\f\x5\f`"+
		"\n\f\x5\f\x62\n\f\x3\r\x3\r\x5\r\x66\n\r\x3\xE\x3\xE\x5\xEj\n\xE\x3\xF"+
		"\x3\xF\x5\xFn\n\xF\x3\xF\x3\xF\x5\xFr\n\xF\x5\xFt\n\xF\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\a\x10{\n\x10\f\x10\xE\x10~\v\x10\x5\x10\x80\n\x10\x3"+
		"\x10\x3\x10\x5\x10\x84\n\x10\x5\x10\x86\n\x10\x3\x10\x2\x3\x14\x11\x2"+
		"\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E\x2\x4\x3\x2\x12\x14\x3"+
		"\x2\x18\x19\x93\x2 \x3\x2\x2\x2\x4.\x3\x2\x2\x2\x6\x30\x3\x2\x2\x2\b\x33"+
		"\x3\x2\x2\x2\n\x36\x3\x2\x2\x2\f\x38\x3\x2\x2\x2\xE;\x3\x2\x2\x2\x10>"+
		"\x3\x2\x2\x2\x12@\x3\x2\x2\x2\x14K\x3\x2\x2\x2\x16\x61\x3\x2\x2\x2\x18"+
		"\x63\x3\x2\x2\x2\x1Ag\x3\x2\x2\x2\x1Cs\x3\x2\x2\x2\x1E\x85\x3\x2\x2\x2"+
		" !\x5\x4\x3\x2!\"\a\x2\x2\x3\"\x3\x3\x2\x2\x2#/\x5\x6\x4\x2$/\x5\b\x5"+
		"\x2%/\x5\f\a\x2&/\x5\xE\b\x2\'/\x5\x10\t\x2(/\x5\x12\n\x2)/\x5\x16\f\x2"+
		"*/\x5\x18\r\x2+/\x5\x1A\xE\x2,/\x5\x1C\xF\x2-/\x5\x1E\x10\x2.#\x3\x2\x2"+
		"\x2.$\x3\x2\x2\x2.%\x3\x2\x2\x2.&\x3\x2\x2\x2.\'\x3\x2\x2\x2.(\x3\x2\x2"+
		"\x2.)\x3\x2\x2\x2.*\x3\x2\x2\x2.+\x3\x2\x2\x2.,\x3\x2\x2\x2.-\x3\x2\x2"+
		"\x2/\x5\x3\x2\x2\x2\x30\x31\a\x4\x2\x2\x31\x32\x5\n\x6\x2\x32\a\x3\x2"+
		"\x2\x2\x33\x34\a\x5\x2\x2\x34\x35\x5\n\x6\x2\x35\t\x3\x2\x2\x2\x36\x37"+
		"\t\x2\x2\x2\x37\v\x3\x2\x2\x2\x38\x39\a\x6\x2\x2\x39:\x5\x14\v\x2:\r\x3"+
		"\x2\x2\x2;<\a\a\x2\x2<=\x5\x14\v\x2=\xF\x3\x2\x2\x2>?\a\b\x2\x2?\x11\x3"+
		"\x2\x2\x2@\x41\a\t\x2\x2\x41\x13\x3\x2\x2\x2\x42\x43\b\v\x1\x2\x43\x44"+
		"\a\x17\x2\x2\x44L\x5\x14\v\t\x45\x46\a\x1A\x2\x2\x46G\x5\x14\v\x2GH\a"+
		"\x1B\x2\x2HL\x3\x2\x2\x2IL\x5\n\x6\x2JL\a\x11\x2\x2K\x42\x3\x2\x2\x2K"+
		"\x45\x3\x2\x2\x2KI\x3\x2\x2\x2KJ\x3\x2\x2\x2LX\x3\x2\x2\x2MN\f\b\x2\x2"+
		"NO\a\x15\x2\x2OW\x5\x14\v\tPQ\f\a\x2\x2QR\a\x16\x2\x2RW\x5\x14\v\bST\f"+
		"\x6\x2\x2TU\t\x3\x2\x2UW\x5\x14\v\aVM\x3\x2\x2\x2VP\x3\x2\x2\x2VS\x3\x2"+
		"\x2\x2WZ\x3\x2\x2\x2XV\x3\x2\x2\x2XY\x3\x2\x2\x2Y\x15\x3\x2\x2\x2ZX\x3"+
		"\x2\x2\x2[\\\a\n\x2\x2\\\x62\a\x12\x2\x2]_\a\x1C\x2\x2^`\a\x1D\x2\x2_"+
		"^\x3\x2\x2\x2_`\x3\x2\x2\x2`\x62\x3\x2\x2\x2\x61[\x3\x2\x2\x2\x61]\x3"+
		"\x2\x2\x2\x62\x17\x3\x2\x2\x2\x63\x65\a\v\x2\x2\x64\x66\a!\x2\x2\x65\x64"+
		"\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66\x19\x3\x2\x2\x2gi\a\f\x2\x2hj\a!"+
		"\x2\x2ih\x3\x2\x2\x2ij\x3\x2\x2\x2j\x1B\x3\x2\x2\x2km\a\r\x2\x2ln\a!\x2"+
		"\x2ml\x3\x2\x2\x2mn\x3\x2\x2\x2nt\x3\x2\x2\x2oq\a\xE\x2\x2pr\a!\x2\x2"+
		"qp\x3\x2\x2\x2qr\x3\x2\x2\x2rt\x3\x2\x2\x2sk\x3\x2\x2\x2so\x3\x2\x2\x2"+
		"t\x1D\x3\x2\x2\x2uv\a\xF\x2\x2v\x7F\a\x13\x2\x2w|\a\x1C\x2\x2xy\a\x1E"+
		"\x2\x2y{\a\x1C\x2\x2zx\x3\x2\x2\x2{~\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3\x2"+
		"\x2\x2}\x80\x3\x2\x2\x2~|\x3\x2\x2\x2\x7Fw\x3\x2\x2\x2\x7F\x80\x3\x2\x2"+
		"\x2\x80\x86\x3\x2\x2\x2\x81\x83\a\x10\x2\x2\x82\x84\a!\x2\x2\x83\x82\x3"+
		"\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x86\x3\x2\x2\x2\x85u\x3\x2\x2\x2\x85"+
		"\x81\x3\x2\x2\x2\x86\x1F\x3\x2\x2\x2\x11.KVX_\x61\x65imqs|\x7F\x83\x85";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Compiler.Antlr
